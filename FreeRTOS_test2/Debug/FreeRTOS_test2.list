
FreeRTOS_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004020  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080041f0  080041f0  000051f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000052f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000052fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004304  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f8  20000060  08004364  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  08004364  00006258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f18  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e51  00000000  00000000  00019fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001ce00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d76  00000000  00000000  0001df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237a9  00000000  00000000  0001ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b80  00000000  00000000  0004246f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d902a  00000000  00000000  00056fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130019  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa8  00000000  00000000  0013005c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00134b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041d8 	.word	0x080041d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080041d8 	.word	0x080041d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	@ (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	@ (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	@ 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	2000007c 	.word	0x2000007c
 8000540:	2000011c 	.word	0x2000011c

08000544 <senddflt>:
void task2_init(void const * argument);
void task3_init(void const * argument);
void task4_init(void const * argument);

/* USER CODE BEGIN PFP */
void senddflt(void){
 8000544:	b598      	push	{r3, r4, r7, lr}
 8000546:	af00      	add	r7, sp, #0
	str = "hello from the dflt task\r\n";
 8000548:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <senddflt+0x2c>)
 800054a:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <senddflt+0x30>)
 800054c:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 500);
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <senddflt+0x2c>)
 8000550:	681c      	ldr	r4, [r3, #0]
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <senddflt+0x2c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe5a 	bl	8000210 <strlen>
 800055c:	4603      	mov	r3, r0
 800055e:	b29a      	uxth	r2, r3
 8000560:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000564:	4621      	mov	r1, r4
 8000566:	4804      	ldr	r0, [pc, #16]	@ (8000578 <senddflt+0x34>)
 8000568:	f001 ff12 	bl	8002390 <HAL_UART_Transmit>
}
 800056c:	bf00      	nop
 800056e:	bd98      	pop	{r3, r4, r7, pc}
 8000570:	2000031c 	.word	0x2000031c
 8000574:	080041f0 	.word	0x080041f0
 8000578:	20000320 	.word	0x20000320

0800057c <send2>:
void send2(void){
 800057c:	b598      	push	{r3, r4, r7, lr}
 800057e:	af00      	add	r7, sp, #0
	str = "hello from the task 2\r\n";
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <send2+0x2c>)
 8000582:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <send2+0x30>)
 8000584:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 500);
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <send2+0x2c>)
 8000588:	681c      	ldr	r4, [r3, #0]
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <send2+0x2c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe3e 	bl	8000210 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	b29a      	uxth	r2, r3
 8000598:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800059c:	4621      	mov	r1, r4
 800059e:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <send2+0x34>)
 80005a0:	f001 fef6 	bl	8002390 <HAL_UART_Transmit>
}
 80005a4:	bf00      	nop
 80005a6:	bd98      	pop	{r3, r4, r7, pc}
 80005a8:	2000031c 	.word	0x2000031c
 80005ac:	0800420c 	.word	0x0800420c
 80005b0:	20000320 	.word	0x20000320

080005b4 <send3>:
void send3(void){
 80005b4:	b598      	push	{r3, r4, r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	str = "hello from the task 3\r\n";
 80005b8:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <send3+0x2c>)
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <send3+0x30>)
 80005bc:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 500);
 80005be:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <send3+0x2c>)
 80005c0:	681c      	ldr	r4, [r3, #0]
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <send3+0x2c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe22 	bl	8000210 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005d4:	4621      	mov	r1, r4
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <send3+0x34>)
 80005d8:	f001 feda 	bl	8002390 <HAL_UART_Transmit>
}
 80005dc:	bf00      	nop
 80005de:	bd98      	pop	{r3, r4, r7, pc}
 80005e0:	2000031c 	.word	0x2000031c
 80005e4:	08004224 	.word	0x08004224
 80005e8:	20000320 	.word	0x20000320

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b09c      	sub	sp, #112	@ 0x70
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fae7 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f863 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8fd 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f8d1 	bl	80007a4 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 8000602:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <main+0xb4>)
 8000604:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000616:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fa92 	bl	8002b46 <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a1f      	ldr	r2, [pc, #124]	@ (80006a4 <main+0xb8>)
 8000626:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, task2_init, osPriorityHigh, 0, 128);
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <main+0xbc>)
 800062a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800063c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fa7f 	bl	8002b46 <osThreadCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a18      	ldr	r2, [pc, #96]	@ (80006ac <main+0xc0>)
 800064c:	6013      	str	r3, [r2, #0]

  osThreadDef(task3, task3_init, osPriorityHigh, 0, 128);
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <main+0xc4>)
 8000650:	f107 041c 	add.w	r4, r7, #28
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   task3handle = osThreadCreate(osThread(task3), NULL);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fa6c 	bl	8002b46 <osThreadCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a10      	ldr	r2, [pc, #64]	@ (80006b4 <main+0xc8>)
 8000672:	6013      	str	r3, [r2, #0]

   osThreadDef(task4, task4_init, osPriorityLow, 0, 128);
 8000674:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <main+0xcc>)
 8000676:	463c      	mov	r4, r7
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   task4handle = osThreadCreate(osThread(task4), NULL);
 8000686:	463b      	mov	r3, r7
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fa5b 	bl	8002b46 <osThreadCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <main+0xd0>)
 8000694:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000696:	f002 fa4f 	bl	8002b38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <main+0xae>
 800069e:	bf00      	nop
 80006a0:	08004248 	.word	0x08004248
 80006a4:	20000368 	.word	0x20000368
 80006a8:	08004270 	.word	0x08004270
 80006ac:	2000036c 	.word	0x2000036c
 80006b0:	08004294 	.word	0x08004294
 80006b4:	20000370 	.word	0x20000370
 80006b8:	080042b8 	.word	0x080042b8
 80006bc:	20000374 	.word	0x20000374

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	@ 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fca8 	bl	8004024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <SystemClock_Config+0xdc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a2b      	ldr	r2, [pc, #172]	@ (800079c <SystemClock_Config+0xdc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b29      	ldr	r3, [pc, #164]	@ (800079c <SystemClock_Config+0xdc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <SystemClock_Config+0xe0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a25      	ldr	r2, [pc, #148]	@ (80007a0 <SystemClock_Config+0xe0>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <SystemClock_Config+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000734:	23b4      	movs	r3, #180	@ 0xb4
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f891 	bl	8001870 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000754:	f000 f8e6 	bl	8000924 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000758:	f000 fd44 	bl	80011e4 <HAL_PWREx_EnableOverDrive>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000762:	f000 f8df 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000772:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2105      	movs	r1, #5
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fd7d 	bl	8001284 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000790:	f000 f8c8 	bl	8000924 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	@ 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_USART2_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007dc:	f001 fd88 	bl	80022f0 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f89d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000320 	.word	0x20000320
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_GPIO_Init+0x98>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a1e      	ldr	r2, [pc, #120]	@ (8000890 <MX_GPIO_Init+0x98>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_GPIO_Init+0x98>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_GPIO_Init+0x98>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <MX_GPIO_Init+0x98>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_GPIO_Init+0x98>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_GPIO_Init+0x98>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <MX_GPIO_Init+0x98>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_GPIO_Init+0x98>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	480b      	ldr	r0, [pc, #44]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000868:	f000 fc88 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800086c:	2320      	movs	r3, #32
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000884:	f000 fae6 	bl	8000e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  senddflt();
 80008a0:	f7ff fe50 	bl	8000544 <senddflt>
    osDelay(1000);
 80008a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a8:	f002 f999 	bl	8002bde <osDelay>
	  senddflt();
 80008ac:	bf00      	nop
 80008ae:	e7f7      	b.n	80008a0 <StartDefaultTask+0x8>

080008b0 <task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_init */
void task2_init(void const * argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task2_init */
  /* Infinite loop */
  for(;;)
  {
	send2();
 80008b8:	f7ff fe60 	bl	800057c <send2>
    osDelay(1000);
 80008bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c0:	f002 f98d 	bl	8002bde <osDelay>
	send2();
 80008c4:	bf00      	nop
 80008c6:	e7f7      	b.n	80008b8 <task2_init+0x8>

080008c8 <task3_init>:
  }
  /* USER CODE END task2_init */
}
void task3_init(void const * argument){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

	while(1){
		send3();
 80008d0:	f7ff fe70 	bl	80005b4 <send3>
	osDelay(1000);
 80008d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d8:	f002 f981 	bl	8002bde <osDelay>
		send3();
 80008dc:	bf00      	nop
 80008de:	e7f7      	b.n	80008d0 <task3_init+0x8>

080008e0 <task4_init>:
	}
}
void task4_init(void const * argument){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008e8:	2120      	movs	r1, #32
 80008ea:	4804      	ldr	r0, [pc, #16]	@ (80008fc <task4_init+0x1c>)
 80008ec:	f000 fc5f 	bl	80011ae <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f4:	f000 f9a8 	bl	8000c48 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008f8:	bf00      	nop
 80008fa:	e7f5      	b.n	80008e8 <task4_init+0x8>
 80008fc:	40020000 	.word	0x40020000

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 f979 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40010000 	.word	0x40010000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_MspInit+0x54>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <HAL_MspInit+0x54>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <HAL_MspInit+0x54>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <HAL_MspInit+0x54>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	210f      	movs	r1, #15
 8000972:	f06f 0001 	mvn.w	r0, #1
 8000976:	f000 fa43 	bl	8000e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <HAL_UART_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12b      	bne.n	8000a02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <HAL_UART_MspInit+0x88>)
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <HAL_UART_MspInit+0x88>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <HAL_UART_MspInit+0x88>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e2:	230c      	movs	r3, #12
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f2:	2307      	movs	r3, #7
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <HAL_UART_MspInit+0x8c>)
 80009fe:	f000 fa29 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	@ 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	@ 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <HAL_InitTick+0xd4>)
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a30:	4a2e      	ldr	r2, [pc, #184]	@ (8000aec <HAL_InitTick+0xd4>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a38:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <HAL_InitTick+0xd4>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a44:	f107 020c 	add.w	r2, r7, #12
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fd32 	bl	80014b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a54:	f000 fd1c 	bl	8001490 <HAL_RCC_GetPCLK2Freq>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a60:	4a23      	ldr	r2, [pc, #140]	@ (8000af0 <HAL_InitTick+0xd8>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	0c9b      	lsrs	r3, r3, #18
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <HAL_InitTick+0xdc>)
 8000a6e:	4a22      	ldr	r2, [pc, #136]	@ (8000af8 <HAL_InitTick+0xe0>)
 8000a70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a72:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <HAL_InitTick+0xdc>)
 8000a74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000af4 <HAL_InitTick+0xdc>)
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <HAL_InitTick+0xdc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <HAL_InitTick+0xdc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_InitTick+0xdc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a92:	4818      	ldr	r0, [pc, #96]	@ (8000af4 <HAL_InitTick+0xdc>)
 8000a94:	f001 f98a 	bl	8001dac <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d11b      	bne.n	8000ade <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aa6:	4813      	ldr	r0, [pc, #76]	@ (8000af4 <HAL_InitTick+0xdc>)
 8000aa8:	f001 f9da 	bl	8001e60 <HAL_TIM_Base_Start_IT>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d111      	bne.n	8000ade <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aba:	2019      	movs	r0, #25
 8000abc:	f000 f9bc 	bl	8000e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	d808      	bhi.n	8000ad8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	2019      	movs	r0, #25
 8000acc:	f000 f998 	bl	8000e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_InitTick+0xe4>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e002      	b.n	8000ade <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ade:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3730      	adds	r7, #48	@ 0x30
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	431bde83 	.word	0x431bde83
 8000af4:	20000378 	.word	0x20000378
 8000af8:	40010000 	.word	0x40010000
 8000afc:	20000004 	.word	0x20000004

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <NMI_Handler+0x4>

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <MemManage_Handler+0x4>

08000b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b3e:	f001 f9ff 	bl	8001f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000378 	.word	0x20000378

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b74:	f7ff ffea 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	@ (8000bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	@ (8000bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f003 fa9f 	bl	80040e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fd23 	bl	80005ec <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bb4:	08004304 	.word	0x08004304
  ldr r2, =_sbss
 8000bb8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bbc:	20004258 	.word	0x20004258

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f8fc 	bl	8000dea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f7ff ff10 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe9a 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200003c0 	.word	0x200003c0

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200003c0 	.word	0x200003c0

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff ffee 	bl	8000c30 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <HAL_Delay+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffde 	bl	8000c30 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4907      	ldr	r1, [pc, #28]	@ (8000d2c <__NVIC_EnableIRQ+0x38>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff4c 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e12:	f7ff ff61 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	f7ff ffb1 	bl	8000d84 <NVIC_EncodePriority>
 8000e22:	4602      	mov	r2, r0
 8000e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff80 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff54 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e165      	b.n	800113c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	f040 8154 	bne.w	8001136 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d130      	bne.n	8000f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d017      	beq.n	8000f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	69b9      	ldr	r1, [r7, #24]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80ae 	beq.w	8001136 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b5d      	ldr	r3, [pc, #372]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	4a5c      	ldr	r2, [pc, #368]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fea:	4b5a      	ldr	r3, [pc, #360]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff6:	4a58      	ldr	r2, [pc, #352]	@ (8001158 <HAL_GPIO_Init+0x304>)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4f      	ldr	r2, [pc, #316]	@ (800115c <HAL_GPIO_Init+0x308>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d025      	beq.n	800106e <HAL_GPIO_Init+0x21a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4e      	ldr	r2, [pc, #312]	@ (8001160 <HAL_GPIO_Init+0x30c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d01f      	beq.n	800106a <HAL_GPIO_Init+0x216>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4d      	ldr	r2, [pc, #308]	@ (8001164 <HAL_GPIO_Init+0x310>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d019      	beq.n	8001066 <HAL_GPIO_Init+0x212>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4c      	ldr	r2, [pc, #304]	@ (8001168 <HAL_GPIO_Init+0x314>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x20e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4b      	ldr	r2, [pc, #300]	@ (800116c <HAL_GPIO_Init+0x318>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00d      	beq.n	800105e <HAL_GPIO_Init+0x20a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4a      	ldr	r2, [pc, #296]	@ (8001170 <HAL_GPIO_Init+0x31c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x206>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a49      	ldr	r2, [pc, #292]	@ (8001174 <HAL_GPIO_Init+0x320>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_GPIO_Init+0x202>
 8001052:	2306      	movs	r3, #6
 8001054:	e00c      	b.n	8001070 <HAL_GPIO_Init+0x21c>
 8001056:	2307      	movs	r3, #7
 8001058:	e00a      	b.n	8001070 <HAL_GPIO_Init+0x21c>
 800105a:	2305      	movs	r3, #5
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x21c>
 800105e:	2304      	movs	r3, #4
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x21c>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x21c>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x21c>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x21c>
 800106e:	2300      	movs	r3, #0
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	f002 0203 	and.w	r2, r2, #3
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001080:	4935      	ldr	r1, [pc, #212]	@ (8001158 <HAL_GPIO_Init+0x304>)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108e:	4b3a      	ldr	r3, [pc, #232]	@ (8001178 <HAL_GPIO_Init+0x324>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b2:	4a31      	ldr	r2, [pc, #196]	@ (8001178 <HAL_GPIO_Init+0x324>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001178 <HAL_GPIO_Init+0x324>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010dc:	4a26      	ldr	r2, [pc, #152]	@ (8001178 <HAL_GPIO_Init+0x324>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e2:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <HAL_GPIO_Init+0x324>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001106:	4a1c      	ldr	r2, [pc, #112]	@ (8001178 <HAL_GPIO_Init+0x324>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110c:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <HAL_GPIO_Init+0x324>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001130:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <HAL_GPIO_Init+0x324>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3301      	adds	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	f67f ae96 	bls.w	8000e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40013800 	.word	0x40013800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40021000 	.word	0x40021000
 8001170:	40021400 	.word	0x40021400
 8001174:	40021800 	.word	0x40021800
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	041a      	lsls	r2, r3, #16
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	400b      	ands	r3, r1
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001274 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <HAL_PWREx_EnableOverDrive+0x90>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800120a:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <HAL_PWREx_EnableOverDrive+0x94>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001210:	f7ff fd0e 	bl	8000c30 <HAL_GetTick>
 8001214:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001216:	e009      	b.n	800122c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001218:	f7ff fd0a 	bl	8000c30 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001226:	d901      	bls.n	800122c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e01f      	b.n	800126c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_PWREx_EnableOverDrive+0x98>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001238:	d1ee      	bne.n	8001218 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001240:	f7ff fcf6 	bl	8000c30 <HAL_GetTick>
 8001244:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001246:	e009      	b.n	800125c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001248:	f7ff fcf2 	bl	8000c30 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001256:	d901      	bls.n	800125c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e007      	b.n	800126c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <HAL_PWREx_EnableOverDrive+0x98>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001268:	d1ee      	bne.n	8001248 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	420e0040 	.word	0x420e0040
 800127c:	40007000 	.word	0x40007000
 8001280:	420e0044 	.word	0x420e0044

08001284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0cc      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001298:	4b68      	ldr	r3, [pc, #416]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d90c      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	4b65      	ldr	r3, [pc, #404]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b63      	ldr	r3, [pc, #396]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0b8      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d8:	4b59      	ldr	r3, [pc, #356]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a58      	ldr	r2, [pc, #352]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a52      	ldr	r2, [pc, #328]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fc:	4b50      	ldr	r3, [pc, #320]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	494d      	ldr	r1, [pc, #308]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d044      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b47      	ldr	r3, [pc, #284]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d119      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e07f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d003      	beq.n	8001342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800133e:	2b03      	cmp	r3, #3
 8001340:	d107      	bne.n	8001352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e06f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	4b3b      	ldr	r3, [pc, #236]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e067      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001362:	4b37      	ldr	r3, [pc, #220]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f023 0203 	bic.w	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4934      	ldr	r1, [pc, #208]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	4313      	orrs	r3, r2
 8001372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001374:	f7ff fc5c 	bl	8000c30 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	e00a      	b.n	8001392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800137c:	f7ff fc58 	bl	8000c30 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e04f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001392:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 020c 	and.w	r2, r3, #12
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d1eb      	bne.n	800137c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d20c      	bcs.n	80013cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b22      	ldr	r3, [pc, #136]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e032      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4916      	ldr	r1, [pc, #88]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	490e      	ldr	r1, [pc, #56]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	4313      	orrs	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800140a:	f000 f887 	bl	800151c <HAL_RCC_GetSysClockFreq>
 800140e:	4602      	mov	r2, r0
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	490a      	ldr	r1, [pc, #40]	@ (8001444 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	5ccb      	ldrb	r3, [r1, r3]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_RCC_ClockConfig+0x1c8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff faf4 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00
 8001440:	40023800 	.word	0x40023800
 8001444:	080042dc 	.word	0x080042dc
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_RCC_GetHCLKFreq+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000

08001468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800146c:	f7ff fff0 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0a9b      	lsrs	r3, r3, #10
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	@ (800148c <HAL_RCC_GetPCLK1Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	080042ec 	.word	0x080042ec

08001490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001494:	f7ff ffdc 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	0b5b      	lsrs	r3, r3, #13
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	4903      	ldr	r1, [pc, #12]	@ (80014b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	080042ec 	.word	0x080042ec

080014b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	220f      	movs	r2, #15
 80014c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_RCC_GetClockConfig+0x5c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0203 	and.w	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_RCC_GetClockConfig+0x5c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <HAL_RCC_GetClockConfig+0x5c>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_RCC_GetClockConfig+0x5c>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <HAL_RCC_GetClockConfig+0x60>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 020f 	and.w	r2, r3, #15
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40023c00 	.word	0x40023c00

0800151c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800151c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001520:	b0a6      	sub	sp, #152	@ 0x98
 8001522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001542:	4bc8      	ldr	r3, [pc, #800]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b0c      	cmp	r3, #12
 800154c:	f200 817e 	bhi.w	800184c <HAL_RCC_GetSysClockFreq+0x330>
 8001550:	a201      	add	r2, pc, #4	@ (adr r2, 8001558 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	0800158d 	.word	0x0800158d
 800155c:	0800184d 	.word	0x0800184d
 8001560:	0800184d 	.word	0x0800184d
 8001564:	0800184d 	.word	0x0800184d
 8001568:	08001595 	.word	0x08001595
 800156c:	0800184d 	.word	0x0800184d
 8001570:	0800184d 	.word	0x0800184d
 8001574:	0800184d 	.word	0x0800184d
 8001578:	0800159d 	.word	0x0800159d
 800157c:	0800184d 	.word	0x0800184d
 8001580:	0800184d 	.word	0x0800184d
 8001584:	0800184d 	.word	0x0800184d
 8001588:	08001707 	.word	0x08001707
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800158c:	4bb6      	ldr	r3, [pc, #728]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x34c>)
 800158e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001592:	e15f      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001594:	4bb5      	ldr	r3, [pc, #724]	@ (800186c <HAL_RCC_GetSysClockFreq+0x350>)
 8001596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800159a:	e15b      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800159c:	4bb1      	ldr	r3, [pc, #708]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a8:	4bae      	ldr	r3, [pc, #696]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d031      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b4:	4bab      	ldr	r3, [pc, #684]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	2200      	movs	r2, #0
 80015bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80015c8:	2300      	movs	r3, #0
 80015ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80015cc:	4ba7      	ldr	r3, [pc, #668]	@ (800186c <HAL_RCC_GetSysClockFreq+0x350>)
 80015ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015d2:	462a      	mov	r2, r5
 80015d4:	fb03 f202 	mul.w	r2, r3, r2
 80015d8:	2300      	movs	r3, #0
 80015da:	4621      	mov	r1, r4
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	4aa2      	ldr	r2, [pc, #648]	@ (800186c <HAL_RCC_GetSysClockFreq+0x350>)
 80015e4:	4621      	mov	r1, r4
 80015e6:	fba1 1202 	umull	r1, r2, r1, r2
 80015ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80015ec:	460a      	mov	r2, r1
 80015ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80015f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80015f2:	4413      	add	r3, r2
 80015f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015fa:	2200      	movs	r2, #0
 80015fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001600:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001604:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001608:	f7fe fe0a 	bl	8000220 <__aeabi_uldivmod>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4613      	mov	r3, r2
 8001612:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001616:	e064      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001618:	4b92      	ldr	r3, [pc, #584]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	2200      	movs	r2, #0
 8001620:	653b      	str	r3, [r7, #80]	@ 0x50
 8001622:	657a      	str	r2, [r7, #84]	@ 0x54
 8001624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800162a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001630:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001634:	4622      	mov	r2, r4
 8001636:	462b      	mov	r3, r5
 8001638:	f04f 0000 	mov.w	r0, #0
 800163c:	f04f 0100 	mov.w	r1, #0
 8001640:	0159      	lsls	r1, r3, #5
 8001642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001646:	0150      	lsls	r0, r2, #5
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4621      	mov	r1, r4
 800164e:	1a51      	subs	r1, r2, r1
 8001650:	6139      	str	r1, [r7, #16]
 8001652:	4629      	mov	r1, r5
 8001654:	eb63 0301 	sbc.w	r3, r3, r1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001666:	4659      	mov	r1, fp
 8001668:	018b      	lsls	r3, r1, #6
 800166a:	4651      	mov	r1, sl
 800166c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001670:	4651      	mov	r1, sl
 8001672:	018a      	lsls	r2, r1, #6
 8001674:	4651      	mov	r1, sl
 8001676:	ebb2 0801 	subs.w	r8, r2, r1
 800167a:	4659      	mov	r1, fp
 800167c:	eb63 0901 	sbc.w	r9, r3, r1
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800168c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001690:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001694:	4690      	mov	r8, r2
 8001696:	4699      	mov	r9, r3
 8001698:	4623      	mov	r3, r4
 800169a:	eb18 0303 	adds.w	r3, r8, r3
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	462b      	mov	r3, r5
 80016a2:	eb49 0303 	adc.w	r3, r9, r3
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016b4:	4629      	mov	r1, r5
 80016b6:	028b      	lsls	r3, r1, #10
 80016b8:	4621      	mov	r1, r4
 80016ba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016be:	4621      	mov	r1, r4
 80016c0:	028a      	lsls	r2, r1, #10
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016ca:	2200      	movs	r2, #0
 80016cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80016ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80016d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80016d4:	f7fe fda4 	bl	8000220 <__aeabi_uldivmod>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4613      	mov	r3, r2
 80016de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016e2:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	0c1b      	lsrs	r3, r3, #16
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	3301      	adds	r3, #1
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80016f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80016f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001700:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001704:	e0a6      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001706:	4b57      	ldr	r3, [pc, #348]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800170e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001712:	4b54      	ldr	r3, [pc, #336]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d02a      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171e:	4b51      	ldr	r3, [pc, #324]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	099b      	lsrs	r3, r3, #6
 8001724:	2200      	movs	r2, #0
 8001726:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001728:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800172a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800172c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001730:	2100      	movs	r1, #0
 8001732:	4b4e      	ldr	r3, [pc, #312]	@ (800186c <HAL_RCC_GetSysClockFreq+0x350>)
 8001734:	fb03 f201 	mul.w	r2, r3, r1
 8001738:	2300      	movs	r3, #0
 800173a:	fb00 f303 	mul.w	r3, r0, r3
 800173e:	4413      	add	r3, r2
 8001740:	4a4a      	ldr	r2, [pc, #296]	@ (800186c <HAL_RCC_GetSysClockFreq+0x350>)
 8001742:	fba0 1202 	umull	r1, r2, r0, r2
 8001746:	677a      	str	r2, [r7, #116]	@ 0x74
 8001748:	460a      	mov	r2, r1
 800174a:	673a      	str	r2, [r7, #112]	@ 0x70
 800174c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800174e:	4413      	add	r3, r2
 8001750:	677b      	str	r3, [r7, #116]	@ 0x74
 8001752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001756:	2200      	movs	r2, #0
 8001758:	633b      	str	r3, [r7, #48]	@ 0x30
 800175a:	637a      	str	r2, [r7, #52]	@ 0x34
 800175c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001760:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001764:	f7fe fd5c 	bl	8000220 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001772:	e05b      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001774:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	2200      	movs	r2, #0
 800177c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800177e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
 800178c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001790:	4642      	mov	r2, r8
 8001792:	464b      	mov	r3, r9
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	f04f 0100 	mov.w	r1, #0
 800179c:	0159      	lsls	r1, r3, #5
 800179e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a2:	0150      	lsls	r0, r2, #5
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4641      	mov	r1, r8
 80017aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80017ae:	4649      	mov	r1, r9
 80017b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017c8:	ebb2 040a 	subs.w	r4, r2, sl
 80017cc:	eb63 050b 	sbc.w	r5, r3, fp
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	00eb      	lsls	r3, r5, #3
 80017da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017de:	00e2      	lsls	r2, r4, #3
 80017e0:	4614      	mov	r4, r2
 80017e2:	461d      	mov	r5, r3
 80017e4:	4643      	mov	r3, r8
 80017e6:	18e3      	adds	r3, r4, r3
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	464b      	mov	r3, r9
 80017ec:	eb45 0303 	adc.w	r3, r5, r3
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017fe:	4629      	mov	r1, r5
 8001800:	028b      	lsls	r3, r1, #10
 8001802:	4621      	mov	r1, r4
 8001804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001808:	4621      	mov	r1, r4
 800180a:	028a      	lsls	r2, r1, #10
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001814:	2200      	movs	r2, #0
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	61fa      	str	r2, [r7, #28]
 800181a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800181e:	f7fe fcff 	bl	8000220 <__aeabi_uldivmod>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4613      	mov	r3, r2
 8001828:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800182c:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x348>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0f1b      	lsrs	r3, r3, #28
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800183a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800183e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800184a:	e003      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x34c>)
 800184e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001854:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001858:	4618      	mov	r0, r3
 800185a:	3798      	adds	r7, #152	@ 0x98
 800185c:	46bd      	mov	sp, r7
 800185e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	00f42400 	.word	0x00f42400
 800186c:	017d7840 	.word	0x017d7840

08001870 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e28d      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8083 	beq.w	8001996 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001890:	4b94      	ldr	r3, [pc, #592]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b04      	cmp	r3, #4
 800189a:	d019      	beq.n	80018d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800189c:	4b91      	ldr	r3, [pc, #580]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018a8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018b4:	d00c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d112      	bne.n	80018e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c2:	4b88      	ldr	r3, [pc, #544]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018ce:	d10b      	bne.n	80018e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	4b84      	ldr	r3, [pc, #528]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d05b      	beq.n	8001994 <HAL_RCC_OscConfig+0x124>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d157      	bne.n	8001994 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e25a      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f0:	d106      	bne.n	8001900 <HAL_RCC_OscConfig+0x90>
 80018f2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e01d      	b.n	800193c <HAL_RCC_OscConfig+0xcc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0xb4>
 800190a:	4b76      	ldr	r3, [pc, #472]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a75      	ldr	r2, [pc, #468]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b73      	ldr	r3, [pc, #460]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a72      	ldr	r2, [pc, #456]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0xcc>
 8001924:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a6b      	ldr	r2, [pc, #428]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800193a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f974 	bl	8000c30 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff f970 	bl	8000c30 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e21f      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b61      	ldr	r3, [pc, #388]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0xdc>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff f960 	bl	8000c30 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff f95c 	bl	8000c30 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	@ 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e20b      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	4b57      	ldr	r3, [pc, #348]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x104>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d06f      	beq.n	8001a82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019a2:	4b50      	ldr	r3, [pc, #320]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d017      	beq.n	80019de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d105      	bne.n	80019c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c6:	4b47      	ldr	r3, [pc, #284]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d11c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d2:	4b44      	ldr	r3, [pc, #272]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d116      	bne.n	8001a0c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	4b41      	ldr	r3, [pc, #260]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_RCC_OscConfig+0x186>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e1d3      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4937      	ldr	r1, [pc, #220]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	e03a      	b.n	8001a82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a14:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <HAL_RCC_OscConfig+0x278>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f909 	bl	8000c30 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff f905 	bl	8000c30 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1b4      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4925      	ldr	r1, [pc, #148]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e015      	b.n	8001a82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <HAL_RCC_OscConfig+0x278>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f8e8 	bl	8000c30 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff f8e4 	bl	8000c30 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e193      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d036      	beq.n	8001afc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d016      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_RCC_OscConfig+0x27c>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f8c8 	bl	8000c30 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f8c4 	bl	8000c30 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e173      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x234>
 8001ac2:	e01b      	b.n	8001afc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_RCC_OscConfig+0x27c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f8b1 	bl	8000c30 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	e00e      	b.n	8001af0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f8ad 	bl	8000c30 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d907      	bls.n	8001af0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e15c      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	42470000 	.word	0x42470000
 8001aec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	4b8a      	ldr	r3, [pc, #552]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ea      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8097 	beq.w	8001c38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0e:	4b83      	ldr	r3, [pc, #524]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10f      	bne.n	8001b3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a7e      	ldr	r2, [pc, #504]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3a:	4b79      	ldr	r3, [pc, #484]	@ (8001d20 <HAL_RCC_OscConfig+0x4b0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b46:	4b76      	ldr	r3, [pc, #472]	@ (8001d20 <HAL_RCC_OscConfig+0x4b0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a75      	ldr	r2, [pc, #468]	@ (8001d20 <HAL_RCC_OscConfig+0x4b0>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b52:	f7ff f86d 	bl	8000c30 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5a:	f7ff f869 	bl	8000c30 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e118      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d20 <HAL_RCC_OscConfig+0x4b0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x31e>
 8001b80:	4b66      	ldr	r3, [pc, #408]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b84:	4a65      	ldr	r2, [pc, #404]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8c:	e01c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x358>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b05      	cmp	r3, #5
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x340>
 8001b96:	4b61      	ldr	r3, [pc, #388]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	4a60      	ldr	r2, [pc, #384]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x358>
 8001bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	4a59      	ldr	r2, [pc, #356]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bbc:	4b57      	ldr	r3, [pc, #348]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc0:	4a56      	ldr	r2, [pc, #344]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f023 0304 	bic.w	r3, r3, #4
 8001bc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d015      	beq.n	8001bfc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f82e 	bl	8000c30 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f82a 	bl	8000c30 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0d7      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bee:	4b4b      	ldr	r3, [pc, #300]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0ee      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x368>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff f818 	bl	8000c30 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c04:	f7ff f814 	bl	8000c30 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e0c1      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1a:	4b40      	ldr	r3, [pc, #256]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ee      	bne.n	8001c04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	4a3a      	ldr	r2, [pc, #232]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80ad 	beq.w	8001d9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c42:	4b36      	ldr	r3, [pc, #216]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d060      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d145      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b33      	ldr	r3, [pc, #204]	@ (8001d24 <HAL_RCC_OscConfig+0x4b4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7fe ffe8 	bl	8000c30 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c64:	f7fe ffe4 	bl	8000c30 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e093      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69da      	ldr	r2, [r3, #28]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	019b      	lsls	r3, r3, #6
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	071b      	lsls	r3, r3, #28
 8001cae:	491b      	ldr	r1, [pc, #108]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <HAL_RCC_OscConfig+0x4b4>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7fe ffb9 	bl	8000c30 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7fe ffb5 	bl	8000c30 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e064      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x452>
 8001ce0:	e05c      	b.n	8001d9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <HAL_RCC_OscConfig+0x4b4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ffa2 	bl	8000c30 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7fe ff9e 	bl	8000c30 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04d      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x480>
 8001d0e:	e045      	b.n	8001d9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e040      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d28:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <HAL_RCC_OscConfig+0x538>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d030      	beq.n	8001d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d129      	bne.n	8001d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d122      	bne.n	8001d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d58:	4013      	ands	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d119      	bne.n	8001d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	3b01      	subs	r3, #1
 8001d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d10f      	bne.n	8001d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e041      	b.n	8001e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f839 	bl	8001e4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3304      	adds	r3, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f000 f9c0 	bl	8002170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d001      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e04e      	b.n	8001f16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a23      	ldr	r2, [pc, #140]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d022      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea2:	d01d      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f28 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d018      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <HAL_TIM_Base_Start_IT+0xcc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x80>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f30 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x80>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f34 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x80>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d004      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x80>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a18      	ldr	r2, [pc, #96]	@ (8001f3c <HAL_TIM_Base_Start_IT+0xdc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d111      	bne.n	8001f04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d010      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f02:	e007      	b.n	8001f14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40000800 	.word	0x40000800
 8001f30:	40000c00 	.word	0x40000c00
 8001f34:	40010400 	.word	0x40010400
 8001f38:	40014000 	.word	0x40014000
 8001f3c:	40001800 	.word	0x40001800

08001f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d020      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0202 	mvn.w	r2, #2
 8001f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8d2 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8c4 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f8d5 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d020      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0204 	mvn.w	r2, #4
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8ac 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f89e 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f8af 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d020      	beq.n	800203c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0208 	mvn.w	r2, #8
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f886 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f878 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f889 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0210 	mvn.w	r2, #16
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2208      	movs	r2, #8
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f860 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f852 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f863 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0201 	mvn.w	r2, #1
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fc2a 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f906 	bl	80022dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f834 	bl	800215c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0220 	mvn.w	r2, #32
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8d8 	bl	80022c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a46      	ldr	r2, [pc, #280]	@ (800229c <TIM_Base_SetConfig+0x12c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800218e:	d00f      	beq.n	80021b0 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a43      	ldr	r2, [pc, #268]	@ (80022a0 <TIM_Base_SetConfig+0x130>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00b      	beq.n	80021b0 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a42      	ldr	r2, [pc, #264]	@ (80022a4 <TIM_Base_SetConfig+0x134>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a41      	ldr	r2, [pc, #260]	@ (80022a8 <TIM_Base_SetConfig+0x138>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d003      	beq.n	80021b0 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a40      	ldr	r2, [pc, #256]	@ (80022ac <TIM_Base_SetConfig+0x13c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d108      	bne.n	80021c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a35      	ldr	r2, [pc, #212]	@ (800229c <TIM_Base_SetConfig+0x12c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02b      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d0:	d027      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a32      	ldr	r2, [pc, #200]	@ (80022a0 <TIM_Base_SetConfig+0x130>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d023      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a31      	ldr	r2, [pc, #196]	@ (80022a4 <TIM_Base_SetConfig+0x134>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01f      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a30      	ldr	r2, [pc, #192]	@ (80022a8 <TIM_Base_SetConfig+0x138>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01b      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2f      	ldr	r2, [pc, #188]	@ (80022ac <TIM_Base_SetConfig+0x13c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d017      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2e      	ldr	r2, [pc, #184]	@ (80022b0 <TIM_Base_SetConfig+0x140>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2d      	ldr	r2, [pc, #180]	@ (80022b4 <TIM_Base_SetConfig+0x144>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00f      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2c      	ldr	r2, [pc, #176]	@ (80022b8 <TIM_Base_SetConfig+0x148>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00b      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2b      	ldr	r2, [pc, #172]	@ (80022bc <TIM_Base_SetConfig+0x14c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2a      	ldr	r2, [pc, #168]	@ (80022c0 <TIM_Base_SetConfig+0x150>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a29      	ldr	r2, [pc, #164]	@ (80022c4 <TIM_Base_SetConfig+0x154>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d108      	bne.n	8002234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <TIM_Base_SetConfig+0x12c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d003      	beq.n	8002268 <TIM_Base_SetConfig+0xf8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <TIM_Base_SetConfig+0x13c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d103      	bne.n	8002270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f023 0201 	bic.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]
  }
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40010000 	.word	0x40010000
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40000c00 	.word	0x40000c00
 80022ac:	40010400 	.word	0x40010400
 80022b0:	40014000 	.word	0x40014000
 80022b4:	40014400 	.word	0x40014400
 80022b8:	40014800 	.word	0x40014800
 80022bc:	40001800 	.word	0x40001800
 80022c0:	40001c00 	.word	0x40001c00
 80022c4:	40002000 	.word	0x40002000

080022c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e042      	b.n	8002388 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fb36 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2224      	movs	r2, #36	@ 0x24
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f973 	bl	8002620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	@ 0x28
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d175      	bne.n	800249c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_UART_Transmit+0x2c>
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e06e      	b.n	800249e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2221      	movs	r2, #33	@ 0x21
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ce:	f7fe fc2f 	bl	8000c30 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e8:	d108      	bne.n	80023fc <HAL_UART_Transmit+0x6c>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	e003      	b.n	8002404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002404:	e02e      	b.n	8002464 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2200      	movs	r2, #0
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f848 	bl	80024a6 <UART_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e03a      	b.n	800249e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10b      	bne.n	8002446 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	3302      	adds	r3, #2
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e007      	b.n	8002456 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	3301      	adds	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1cb      	bne.n	8002406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	2140      	movs	r1, #64	@ 0x40
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f814 	bl	80024a6 <UART_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e006      	b.n	800249e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b6:	e03b      	b.n	8002530 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024be:	d037      	beq.n	8002530 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c0:	f7fe fbb6 	bl	8000c30 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	6a3a      	ldr	r2, [r7, #32]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d302      	bcc.n	80024d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e03a      	b.n	8002550 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d023      	beq.n	8002530 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b80      	cmp	r3, #128	@ 0x80
 80024ec:	d020      	beq.n	8002530 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d01d      	beq.n	8002530 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d116      	bne.n	8002530 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f81d 	bl	8002558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2208      	movs	r2, #8
 8002522:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e00f      	b.n	8002550 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4013      	ands	r3, r2
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	429a      	cmp	r2, r3
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	429a      	cmp	r2, r3
 800254c:	d0b4      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002558:	b480      	push	{r7}
 800255a:	b095      	sub	sp, #84	@ 0x54
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	330c      	adds	r3, #12
 8002566:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256a:	e853 3f00 	ldrex	r3, [r3]
 800256e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002580:	643a      	str	r2, [r7, #64]	@ 0x40
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002584:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002588:	e841 2300 	strex	r3, r2, [r1]
 800258c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e5      	bne.n	8002560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3314      	adds	r3, #20
 80025b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025bc:	e841 2300 	strex	r3, r2, [r1]
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e5      	bne.n	8002594 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d119      	bne.n	8002604 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	60bb      	str	r3, [r7, #8]
   return(result);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f023 0310 	bic.w	r3, r3, #16
 80025e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025f0:	61ba      	str	r2, [r7, #24]
 80025f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6979      	ldr	r1, [r7, #20]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	e841 2300 	strex	r3, r2, [r1]
 80025fc:	613b      	str	r3, [r7, #16]
   return(result);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002612:	bf00      	nop
 8002614:	3754      	adds	r7, #84	@ 0x54
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b0c0      	sub	sp, #256	@ 0x100
 8002626:	af00      	add	r7, sp, #0
 8002628:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	68d9      	ldr	r1, [r3, #12]
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	ea40 0301 	orr.w	r3, r0, r1
 8002648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	431a      	orrs	r2, r3
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	431a      	orrs	r2, r3
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002678:	f021 010c 	bic.w	r1, r1, #12
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002686:	430b      	orrs	r3, r1
 8002688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800268a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800269a:	6999      	ldr	r1, [r3, #24]
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	ea40 0301 	orr.w	r3, r0, r1
 80026a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b8f      	ldr	r3, [pc, #572]	@ (80028ec <UART_SetConfig+0x2cc>)
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d005      	beq.n	80026c0 <UART_SetConfig+0xa0>
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b8d      	ldr	r3, [pc, #564]	@ (80028f0 <UART_SetConfig+0x2d0>)
 80026bc:	429a      	cmp	r2, r3
 80026be:	d104      	bne.n	80026ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c0:	f7fe fee6 	bl	8001490 <HAL_RCC_GetPCLK2Freq>
 80026c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80026c8:	e003      	b.n	80026d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ca:	f7fe fecd 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 80026ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026dc:	f040 810c 	bne.w	80028f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026f2:	4622      	mov	r2, r4
 80026f4:	462b      	mov	r3, r5
 80026f6:	1891      	adds	r1, r2, r2
 80026f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026fa:	415b      	adcs	r3, r3
 80026fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002702:	4621      	mov	r1, r4
 8002704:	eb12 0801 	adds.w	r8, r2, r1
 8002708:	4629      	mov	r1, r5
 800270a:	eb43 0901 	adc.w	r9, r3, r1
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002722:	4690      	mov	r8, r2
 8002724:	4699      	mov	r9, r3
 8002726:	4623      	mov	r3, r4
 8002728:	eb18 0303 	adds.w	r3, r8, r3
 800272c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002730:	462b      	mov	r3, r5
 8002732:	eb49 0303 	adc.w	r3, r9, r3
 8002736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002746:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800274a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800274e:	460b      	mov	r3, r1
 8002750:	18db      	adds	r3, r3, r3
 8002752:	653b      	str	r3, [r7, #80]	@ 0x50
 8002754:	4613      	mov	r3, r2
 8002756:	eb42 0303 	adc.w	r3, r2, r3
 800275a:	657b      	str	r3, [r7, #84]	@ 0x54
 800275c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002764:	f7fd fd5c 	bl	8000220 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4b61      	ldr	r3, [pc, #388]	@ (80028f4 <UART_SetConfig+0x2d4>)
 800276e:	fba3 2302 	umull	r2, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	011c      	lsls	r4, r3, #4
 8002776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800277a:	2200      	movs	r2, #0
 800277c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002780:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	1891      	adds	r1, r2, r2
 800278e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002790:	415b      	adcs	r3, r3
 8002792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002798:	4641      	mov	r1, r8
 800279a:	eb12 0a01 	adds.w	sl, r2, r1
 800279e:	4649      	mov	r1, r9
 80027a0:	eb43 0b01 	adc.w	fp, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027b8:	4692      	mov	sl, r2
 80027ba:	469b      	mov	fp, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	eb1a 0303 	adds.w	r3, sl, r3
 80027c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027c6:	464b      	mov	r3, r9
 80027c8:	eb4b 0303 	adc.w	r3, fp, r3
 80027cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027e4:	460b      	mov	r3, r1
 80027e6:	18db      	adds	r3, r3, r3
 80027e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ea:	4613      	mov	r3, r2
 80027ec:	eb42 0303 	adc.w	r3, r2, r3
 80027f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80027f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027fa:	f7fd fd11 	bl	8000220 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4611      	mov	r1, r2
 8002804:	4b3b      	ldr	r3, [pc, #236]	@ (80028f4 <UART_SetConfig+0x2d4>)
 8002806:	fba3 2301 	umull	r2, r3, r3, r1
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2264      	movs	r2, #100	@ 0x64
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	1acb      	subs	r3, r1, r3
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800281a:	4b36      	ldr	r3, [pc, #216]	@ (80028f4 <UART_SetConfig+0x2d4>)
 800281c:	fba3 2302 	umull	r2, r3, r3, r2
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002828:	441c      	add	r4, r3
 800282a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002834:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800283c:	4642      	mov	r2, r8
 800283e:	464b      	mov	r3, r9
 8002840:	1891      	adds	r1, r2, r2
 8002842:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002844:	415b      	adcs	r3, r3
 8002846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800284c:	4641      	mov	r1, r8
 800284e:	1851      	adds	r1, r2, r1
 8002850:	6339      	str	r1, [r7, #48]	@ 0x30
 8002852:	4649      	mov	r1, r9
 8002854:	414b      	adcs	r3, r1
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002864:	4659      	mov	r1, fp
 8002866:	00cb      	lsls	r3, r1, #3
 8002868:	4651      	mov	r1, sl
 800286a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800286e:	4651      	mov	r1, sl
 8002870:	00ca      	lsls	r2, r1, #3
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	4603      	mov	r3, r0
 8002878:	4642      	mov	r2, r8
 800287a:	189b      	adds	r3, r3, r2
 800287c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002880:	464b      	mov	r3, r9
 8002882:	460a      	mov	r2, r1
 8002884:	eb42 0303 	adc.w	r3, r2, r3
 8002888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002898:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800289c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80028a0:	460b      	mov	r3, r1
 80028a2:	18db      	adds	r3, r3, r3
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a6:	4613      	mov	r3, r2
 80028a8:	eb42 0303 	adc.w	r3, r2, r3
 80028ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80028b6:	f7fd fcb3 	bl	8000220 <__aeabi_uldivmod>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <UART_SetConfig+0x2d4>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	@ 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3332      	adds	r3, #50	@ 0x32
 80028d2:	4a08      	ldr	r2, [pc, #32]	@ (80028f4 <UART_SetConfig+0x2d4>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	f003 0207 	and.w	r2, r3, #7
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4422      	add	r2, r4
 80028e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028e8:	e106      	b.n	8002af8 <UART_SetConfig+0x4d8>
 80028ea:	bf00      	nop
 80028ec:	40011000 	.word	0x40011000
 80028f0:	40011400 	.word	0x40011400
 80028f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002902:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800290a:	4642      	mov	r2, r8
 800290c:	464b      	mov	r3, r9
 800290e:	1891      	adds	r1, r2, r2
 8002910:	6239      	str	r1, [r7, #32]
 8002912:	415b      	adcs	r3, r3
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
 8002916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800291a:	4641      	mov	r1, r8
 800291c:	1854      	adds	r4, r2, r1
 800291e:	4649      	mov	r1, r9
 8002920:	eb43 0501 	adc.w	r5, r3, r1
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	00eb      	lsls	r3, r5, #3
 800292e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002932:	00e2      	lsls	r2, r4, #3
 8002934:	4614      	mov	r4, r2
 8002936:	461d      	mov	r5, r3
 8002938:	4643      	mov	r3, r8
 800293a:	18e3      	adds	r3, r4, r3
 800293c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002940:	464b      	mov	r3, r9
 8002942:	eb45 0303 	adc.w	r3, r5, r3
 8002946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002956:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002966:	4629      	mov	r1, r5
 8002968:	008b      	lsls	r3, r1, #2
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002970:	4621      	mov	r1, r4
 8002972:	008a      	lsls	r2, r1, #2
 8002974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002978:	f7fd fc52 	bl	8000220 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4b60      	ldr	r3, [pc, #384]	@ (8002b04 <UART_SetConfig+0x4e4>)
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	011c      	lsls	r4, r3, #4
 800298a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800298e:	2200      	movs	r2, #0
 8002990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002994:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800299c:	4642      	mov	r2, r8
 800299e:	464b      	mov	r3, r9
 80029a0:	1891      	adds	r1, r2, r2
 80029a2:	61b9      	str	r1, [r7, #24]
 80029a4:	415b      	adcs	r3, r3
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ac:	4641      	mov	r1, r8
 80029ae:	1851      	adds	r1, r2, r1
 80029b0:	6139      	str	r1, [r7, #16]
 80029b2:	4649      	mov	r1, r9
 80029b4:	414b      	adcs	r3, r1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029c4:	4659      	mov	r1, fp
 80029c6:	00cb      	lsls	r3, r1, #3
 80029c8:	4651      	mov	r1, sl
 80029ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ce:	4651      	mov	r1, sl
 80029d0:	00ca      	lsls	r2, r1, #3
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	4642      	mov	r2, r8
 80029da:	189b      	adds	r3, r3, r2
 80029dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029e0:	464b      	mov	r3, r9
 80029e2:	460a      	mov	r2, r1
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a04:	4649      	mov	r1, r9
 8002a06:	008b      	lsls	r3, r1, #2
 8002a08:	4641      	mov	r1, r8
 8002a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a0e:	4641      	mov	r1, r8
 8002a10:	008a      	lsls	r2, r1, #2
 8002a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a16:	f7fd fc03 	bl	8000220 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4b38      	ldr	r3, [pc, #224]	@ (8002b04 <UART_SetConfig+0x4e4>)
 8002a22:	fba3 2301 	umull	r2, r3, r3, r1
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2264      	movs	r2, #100	@ 0x64
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	1acb      	subs	r3, r1, r3
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	3332      	adds	r3, #50	@ 0x32
 8002a34:	4a33      	ldr	r2, [pc, #204]	@ (8002b04 <UART_SetConfig+0x4e4>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a40:	441c      	add	r4, r3
 8002a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a46:	2200      	movs	r2, #0
 8002a48:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a50:	4642      	mov	r2, r8
 8002a52:	464b      	mov	r3, r9
 8002a54:	1891      	adds	r1, r2, r2
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	415b      	adcs	r3, r3
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a60:	4641      	mov	r1, r8
 8002a62:	1851      	adds	r1, r2, r1
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	4649      	mov	r1, r9
 8002a68:	414b      	adcs	r3, r1
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a78:	4659      	mov	r1, fp
 8002a7a:	00cb      	lsls	r3, r1, #3
 8002a7c:	4651      	mov	r1, sl
 8002a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a82:	4651      	mov	r1, sl
 8002a84:	00ca      	lsls	r2, r1, #3
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	189b      	adds	r3, r3, r2
 8002a90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a92:	464b      	mov	r3, r9
 8002a94:	460a      	mov	r2, r1
 8002a96:	eb42 0303 	adc.w	r3, r2, r3
 8002a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	008b      	lsls	r3, r1, #2
 8002ab8:	4641      	mov	r1, r8
 8002aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002abe:	4641      	mov	r1, r8
 8002ac0:	008a      	lsls	r2, r1, #2
 8002ac2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ac6:	f7fd fbab 	bl	8000220 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <UART_SetConfig+0x4e4>)
 8002ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	2164      	movs	r1, #100	@ 0x64
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	3332      	adds	r3, #50	@ 0x32
 8002ae2:	4a08      	ldr	r2, [pc, #32]	@ (8002b04 <UART_SetConfig+0x4e4>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 020f 	and.w	r2, r3, #15
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4422      	add	r2, r4
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002afe:	46bd      	mov	sp, r7
 8002b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b04:	51eb851f 	.word	0x51eb851f

08002b08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1a:	2b84      	cmp	r3, #132	@ 0x84
 8002b1c:	d005      	beq.n	8002b2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	3303      	adds	r3, #3
 8002b28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b3c:	f000 fafc 	bl	8003138 <vTaskStartScheduler>
  
  return osOK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b48:	b089      	sub	sp, #36	@ 0x24
 8002b4a:	af04      	add	r7, sp, #16
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <osThreadCreate+0x54>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01c      	beq.n	8002b9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685c      	ldr	r4, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691e      	ldr	r6, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffc8 	bl	8002b08 <makeFreeRtosPriority>
 8002b78:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b82:	9202      	str	r2, [sp, #8]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	9100      	str	r1, [sp, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4632      	mov	r2, r6
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f000 f8ed 	bl	8002d6e <xTaskCreateStatic>
 8002b94:	4603      	mov	r3, r0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e01c      	b.n	8002bd4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685c      	ldr	r4, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ffaa 	bl	8002b08 <makeFreeRtosPriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	9200      	str	r2, [sp, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	4632      	mov	r2, r6
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f000 f932 	bl	8002e2e <xTaskCreate>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d001      	beq.n	8002bd4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <osDelay+0x16>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	e000      	b.n	8002bf6 <osDelay+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fa68 	bl	80030cc <vTaskDelay>
  
  return osOK;
 8002bfc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f103 0208 	add.w	r2, r3, #8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f103 0208 	add.w	r2, r3, #8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f103 0208 	add.w	r2, r3, #8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	601a      	str	r2, [r3, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d103      	bne.n	8002cc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e00c      	b.n	8002ce2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3308      	adds	r3, #8
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e002      	b.n	8002cd6 <vListInsert+0x2e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d2f6      	bcs.n	8002cd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6852      	ldr	r2, [r2, #4]
 8002d3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d103      	bne.n	8002d4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	1e5a      	subs	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b08e      	sub	sp, #56	@ 0x38
 8002d72:	af04      	add	r7, sp, #16
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	61fb      	str	r3, [r7, #28]
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002db8:	23a0      	movs	r3, #160	@ 0xa0
 8002dba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dc0:	d00b      	beq.n	8002dda <xTaskCreateStatic+0x6c>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	61bb      	str	r3, [r7, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01e      	beq.n	8002e20 <xTaskCreateStatic+0xb2>
 8002de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01b      	beq.n	8002e20 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	2202      	movs	r2, #2
 8002df6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9303      	str	r3, [sp, #12]
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	9302      	str	r3, [sp, #8]
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f850 	bl	8002eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e1a:	f000 f8ed 	bl	8002ff8 <prvAddNewTaskToReadyList>
 8002e1e:	e001      	b.n	8002e24 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e24:	697b      	ldr	r3, [r7, #20]
	}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3728      	adds	r7, #40	@ 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08c      	sub	sp, #48	@ 0x30
 8002e32:	af04      	add	r7, sp, #16
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 ff00 	bl	8003c48 <pvPortMalloc>
 8002e48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00e      	beq.n	8002e6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e50:	20a0      	movs	r0, #160	@ 0xa0
 8002e52:	f000 fef9 	bl	8003c48 <pvPortMalloc>
 8002e56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e64:	e005      	b.n	8002e72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e66:	6978      	ldr	r0, [r7, #20]
 8002e68:	f000 ffbc 	bl	8003de4 <vPortFree>
 8002e6c:	e001      	b.n	8002e72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d017      	beq.n	8002ea8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9303      	str	r3, [sp, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f80e 	bl	8002eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e9c:	69f8      	ldr	r0, [r7, #28]
 8002e9e:	f000 f8ab 	bl	8002ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e002      	b.n	8002eae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002eae:	69bb      	ldr	r3, [r7, #24]
	}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f023 0307 	bic.w	r3, r3, #7
 8002ede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	617b      	str	r3, [r7, #20]
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	e7fd      	b.n	8002efe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01f      	beq.n	8002f48 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	e012      	b.n	8002f34 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	7819      	ldrb	r1, [r3, #0]
 8002f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3334      	adds	r3, #52	@ 0x34
 8002f1e:	460a      	mov	r2, r1
 8002f20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	d9e9      	bls.n	8002f0e <prvInitialiseNewTask+0x56>
 8002f3a:	e000      	b.n	8002f3e <prvInitialiseNewTask+0x86>
			{
				break;
 8002f3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f46:	e003      	b.n	8002f50 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d901      	bls.n	8002f5a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f56:	2306      	movs	r3, #6
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6e:	3304      	adds	r3, #4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fe68 	bl	8002c46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	3318      	adds	r3, #24
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fe63 	bl	8002c46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f88:	f1c3 0207 	rsb	r2, r3, #7
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa8:	334c      	adds	r3, #76	@ 0x4c
 8002faa:	224c      	movs	r2, #76	@ 0x4c
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 f838 	bl	8004024 <memset>
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8002fec <prvInitialiseNewTask+0x134>)
 8002fb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff0 <prvInitialiseNewTask+0x138>)
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff4 <prvInitialiseNewTask+0x13c>)
 8002fc4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	68f9      	ldr	r1, [r7, #12]
 8002fca:	69b8      	ldr	r0, [r7, #24]
 8002fcc:	f000 fc2a 	bl	8003824 <pxPortInitialiseStack>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fe2:	bf00      	nop
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20004118 	.word	0x20004118
 8002ff0:	20004180 	.word	0x20004180
 8002ff4:	200041e8 	.word	0x200041e8

08002ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003000:	f000 fd42 	bl	8003a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003004:	4b2a      	ldr	r3, [pc, #168]	@ (80030b0 <prvAddNewTaskToReadyList+0xb8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	4a29      	ldr	r2, [pc, #164]	@ (80030b0 <prvAddNewTaskToReadyList+0xb8>)
 800300c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800300e:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003016:	4a27      	ldr	r2, [pc, #156]	@ (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800301c:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <prvAddNewTaskToReadyList+0xb8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d110      	bne.n	8003046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003024:	f000 fad4 	bl	80035d0 <prvInitialiseTaskLists>
 8003028:	e00d      	b.n	8003046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800302a:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <prvAddNewTaskToReadyList+0xc0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	429a      	cmp	r2, r3
 800303e:	d802      	bhi.n	8003046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003040:	4a1c      	ldr	r2, [pc, #112]	@ (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003046:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <prvAddNewTaskToReadyList+0xc4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <prvAddNewTaskToReadyList+0xc4>)
 800304e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	4b19      	ldr	r3, [pc, #100]	@ (80030c0 <prvAddNewTaskToReadyList+0xc8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4313      	orrs	r3, r2
 800305e:	4a18      	ldr	r2, [pc, #96]	@ (80030c0 <prvAddNewTaskToReadyList+0xc8>)
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4a15      	ldr	r2, [pc, #84]	@ (80030c4 <prvAddNewTaskToReadyList+0xcc>)
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7ff fdf1 	bl	8002c60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800307e:	f000 fd35 	bl	8003aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003082:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <prvAddNewTaskToReadyList+0xc0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00e      	beq.n	80030a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800308a:	4b0a      	ldr	r3, [pc, #40]	@ (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	429a      	cmp	r2, r3
 8003096:	d207      	bcs.n	80030a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <prvAddNewTaskToReadyList+0xd0>)
 800309a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200004c4 	.word	0x200004c4
 80030b4:	200003c4 	.word	0x200003c4
 80030b8:	200004d0 	.word	0x200004d0
 80030bc:	200004e0 	.word	0x200004e0
 80030c0:	200004cc 	.word	0x200004cc
 80030c4:	200003c8 	.word	0x200003c8
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d018      	beq.n	8003110 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030de:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <vTaskDelay+0x64>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <vTaskDelay+0x32>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	60bb      	str	r3, [r7, #8]
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	e7fd      	b.n	80030fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030fe:	f000 f885 	bl	800320c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003102:	2100      	movs	r1, #0
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fb27 	bl	8003758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800310a:	f000 f88d 	bl	8003228 <xTaskResumeAll>
 800310e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003116:	4b07      	ldr	r3, [pc, #28]	@ (8003134 <vTaskDelay+0x68>)
 8003118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200004ec 	.word	0x200004ec
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003146:	463a      	mov	r2, r7
 8003148:	1d39      	adds	r1, r7, #4
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f9de 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	9202      	str	r2, [sp, #8]
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2300      	movs	r3, #0
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	460a      	mov	r2, r1
 8003166:	4921      	ldr	r1, [pc, #132]	@ (80031ec <vTaskStartScheduler+0xb4>)
 8003168:	4821      	ldr	r0, [pc, #132]	@ (80031f0 <vTaskStartScheduler+0xb8>)
 800316a:	f7ff fe00 	bl	8002d6e <xTaskCreateStatic>
 800316e:	4603      	mov	r3, r0
 8003170:	4a20      	ldr	r2, [pc, #128]	@ (80031f4 <vTaskStartScheduler+0xbc>)
 8003172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003174:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <vTaskStartScheduler+0xbc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e001      	b.n	8003186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d11b      	bne.n	80031c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	613b      	str	r3, [r7, #16]
}
 800319e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031a0:	4b15      	ldr	r3, [pc, #84]	@ (80031f8 <vTaskStartScheduler+0xc0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	334c      	adds	r3, #76	@ 0x4c
 80031a6:	4a15      	ldr	r2, [pc, #84]	@ (80031fc <vTaskStartScheduler+0xc4>)
 80031a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031aa:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <vTaskStartScheduler+0xc8>)
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031b2:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <vTaskStartScheduler+0xcc>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031b8:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <vTaskStartScheduler+0xd0>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031be:	f000 fbbf 	bl	8003940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031c2:	e00f      	b.n	80031e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d10b      	bne.n	80031e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	60fb      	str	r3, [r7, #12]
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <vTaskStartScheduler+0xa8>
}
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	080042d4 	.word	0x080042d4
 80031f0:	080035a1 	.word	0x080035a1
 80031f4:	200004e8 	.word	0x200004e8
 80031f8:	200003c4 	.word	0x200003c4
 80031fc:	20000010 	.word	0x20000010
 8003200:	200004e4 	.word	0x200004e4
 8003204:	200004d0 	.word	0x200004d0
 8003208:	200004c8 	.word	0x200004c8

0800320c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003210:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <vTaskSuspendAll+0x18>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3301      	adds	r3, #1
 8003216:	4a03      	ldr	r2, [pc, #12]	@ (8003224 <vTaskSuspendAll+0x18>)
 8003218:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	200004ec 	.word	0x200004ec

08003228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003236:	4b42      	ldr	r3, [pc, #264]	@ (8003340 <xTaskResumeAll+0x118>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <xTaskResumeAll+0x2e>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	603b      	str	r3, [r7, #0]
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	e7fd      	b.n	8003252 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003256:	f000 fc17 	bl	8003a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800325a:	4b39      	ldr	r3, [pc, #228]	@ (8003340 <xTaskResumeAll+0x118>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3b01      	subs	r3, #1
 8003260:	4a37      	ldr	r2, [pc, #220]	@ (8003340 <xTaskResumeAll+0x118>)
 8003262:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003264:	4b36      	ldr	r3, [pc, #216]	@ (8003340 <xTaskResumeAll+0x118>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d161      	bne.n	8003330 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800326c:	4b35      	ldr	r3, [pc, #212]	@ (8003344 <xTaskResumeAll+0x11c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d05d      	beq.n	8003330 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003274:	e02e      	b.n	80032d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003276:	4b34      	ldr	r3, [pc, #208]	@ (8003348 <xTaskResumeAll+0x120>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3318      	adds	r3, #24
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fd49 	bl	8002d1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3304      	adds	r3, #4
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fd44 	bl	8002d1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	2201      	movs	r2, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	4b2c      	ldr	r3, [pc, #176]	@ (800334c <xTaskResumeAll+0x124>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <xTaskResumeAll+0x124>)
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4a27      	ldr	r2, [pc, #156]	@ (8003350 <xTaskResumeAll+0x128>)
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7ff fcd0 	bl	8002c60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c4:	4b23      	ldr	r3, [pc, #140]	@ (8003354 <xTaskResumeAll+0x12c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80032ce:	4b22      	ldr	r3, [pc, #136]	@ (8003358 <xTaskResumeAll+0x130>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <xTaskResumeAll+0x120>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1cc      	bne.n	8003276 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032e2:	f000 fa19 	bl	8003718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032e6:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <xTaskResumeAll+0x134>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d010      	beq.n	8003314 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032f2:	f000 f837 	bl	8003364 <xTaskIncrementTick>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80032fc:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <xTaskResumeAll+0x130>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3b01      	subs	r3, #1
 8003306:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f1      	bne.n	80032f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800330e:	4b13      	ldr	r3, [pc, #76]	@ (800335c <xTaskResumeAll+0x134>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <xTaskResumeAll+0x130>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800331c:	2301      	movs	r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003320:	4b0f      	ldr	r3, [pc, #60]	@ (8003360 <xTaskResumeAll+0x138>)
 8003322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003330:	f000 fbdc 	bl	8003aec <vPortExitCritical>

	return xAlreadyYielded;
 8003334:	68bb      	ldr	r3, [r7, #8]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200004ec 	.word	0x200004ec
 8003344:	200004c4 	.word	0x200004c4
 8003348:	20000484 	.word	0x20000484
 800334c:	200004cc 	.word	0x200004cc
 8003350:	200003c8 	.word	0x200003c8
 8003354:	200003c4 	.word	0x200003c4
 8003358:	200004d8 	.word	0x200004d8
 800335c:	200004d4 	.word	0x200004d4
 8003360:	e000ed04 	.word	0xe000ed04

08003364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336e:	4b4f      	ldr	r3, [pc, #316]	@ (80034ac <xTaskIncrementTick+0x148>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 808f 	bne.w	8003496 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003378:	4b4d      	ldr	r3, [pc, #308]	@ (80034b0 <xTaskIncrementTick+0x14c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003380:	4a4b      	ldr	r2, [pc, #300]	@ (80034b0 <xTaskIncrementTick+0x14c>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d121      	bne.n	80033d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800338c:	4b49      	ldr	r3, [pc, #292]	@ (80034b4 <xTaskIncrementTick+0x150>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	603b      	str	r3, [r7, #0]
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	e7fd      	b.n	80033aa <xTaskIncrementTick+0x46>
 80033ae:	4b41      	ldr	r3, [pc, #260]	@ (80034b4 <xTaskIncrementTick+0x150>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <xTaskIncrementTick+0x154>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a3e      	ldr	r2, [pc, #248]	@ (80034b4 <xTaskIncrementTick+0x150>)
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4a3e      	ldr	r2, [pc, #248]	@ (80034b8 <xTaskIncrementTick+0x154>)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b3e      	ldr	r3, [pc, #248]	@ (80034bc <xTaskIncrementTick+0x158>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	4a3c      	ldr	r2, [pc, #240]	@ (80034bc <xTaskIncrementTick+0x158>)
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	f000 f9a4 	bl	8003718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033d0:	4b3b      	ldr	r3, [pc, #236]	@ (80034c0 <xTaskIncrementTick+0x15c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d348      	bcc.n	800346c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033da:	4b36      	ldr	r3, [pc, #216]	@ (80034b4 <xTaskIncrementTick+0x150>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e4:	4b36      	ldr	r3, [pc, #216]	@ (80034c0 <xTaskIncrementTick+0x15c>)
 80033e6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ea:	601a      	str	r2, [r3, #0]
					break;
 80033ec:	e03e      	b.n	800346c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ee:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <xTaskIncrementTick+0x150>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d203      	bcs.n	800340e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003406:	4a2e      	ldr	r2, [pc, #184]	@ (80034c0 <xTaskIncrementTick+0x15c>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800340c:	e02e      	b.n	800346c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3304      	adds	r3, #4
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fc81 	bl	8002d1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3318      	adds	r3, #24
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fc78 	bl	8002d1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	2201      	movs	r2, #1
 8003430:	409a      	lsls	r2, r3
 8003432:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <xTaskIncrementTick+0x160>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <xTaskIncrementTick+0x160>)
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4a1f      	ldr	r2, [pc, #124]	@ (80034c8 <xTaskIncrementTick+0x164>)
 800344a:	441a      	add	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7ff fc04 	bl	8002c60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <xTaskIncrementTick+0x168>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	429a      	cmp	r2, r3
 8003464:	d3b9      	bcc.n	80033da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003466:	2301      	movs	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800346a:	e7b6      	b.n	80033da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800346c:	4b17      	ldr	r3, [pc, #92]	@ (80034cc <xTaskIncrementTick+0x168>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003472:	4915      	ldr	r1, [pc, #84]	@ (80034c8 <xTaskIncrementTick+0x164>)
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d901      	bls.n	8003488 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <xTaskIncrementTick+0x16c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e004      	b.n	80034a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003496:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <xTaskIncrementTick+0x170>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	4a0d      	ldr	r2, [pc, #52]	@ (80034d4 <xTaskIncrementTick+0x170>)
 800349e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034a0:	697b      	ldr	r3, [r7, #20]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200004ec 	.word	0x200004ec
 80034b0:	200004c8 	.word	0x200004c8
 80034b4:	2000047c 	.word	0x2000047c
 80034b8:	20000480 	.word	0x20000480
 80034bc:	200004dc 	.word	0x200004dc
 80034c0:	200004e4 	.word	0x200004e4
 80034c4:	200004cc 	.word	0x200004cc
 80034c8:	200003c8 	.word	0x200003c8
 80034cc:	200003c4 	.word	0x200003c4
 80034d0:	200004d8 	.word	0x200004d8
 80034d4:	200004d4 	.word	0x200004d4

080034d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034de:	4b2a      	ldr	r3, [pc, #168]	@ (8003588 <vTaskSwitchContext+0xb0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034e6:	4b29      	ldr	r3, [pc, #164]	@ (800358c <vTaskSwitchContext+0xb4>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034ec:	e045      	b.n	800357a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80034ee:	4b27      	ldr	r3, [pc, #156]	@ (800358c <vTaskSwitchContext+0xb4>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f4:	4b26      	ldr	r3, [pc, #152]	@ (8003590 <vTaskSwitchContext+0xb8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003502:	7afb      	ldrb	r3, [r7, #11]
 8003504:	f1c3 031f 	rsb	r3, r3, #31
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	4922      	ldr	r1, [pc, #136]	@ (8003594 <vTaskSwitchContext+0xbc>)
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <vTaskSwitchContext+0x5e>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	607b      	str	r3, [r7, #4]
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	e7fd      	b.n	8003532 <vTaskSwitchContext+0x5a>
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4a14      	ldr	r2, [pc, #80]	@ (8003594 <vTaskSwitchContext+0xbc>)
 8003542:	4413      	add	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	3308      	adds	r3, #8
 8003558:	429a      	cmp	r2, r3
 800355a:	d104      	bne.n	8003566 <vTaskSwitchContext+0x8e>
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a0a      	ldr	r2, [pc, #40]	@ (8003598 <vTaskSwitchContext+0xc0>)
 800356e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003570:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <vTaskSwitchContext+0xc0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	334c      	adds	r3, #76	@ 0x4c
 8003576:	4a09      	ldr	r2, [pc, #36]	@ (800359c <vTaskSwitchContext+0xc4>)
 8003578:	6013      	str	r3, [r2, #0]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	200004ec 	.word	0x200004ec
 800358c:	200004d8 	.word	0x200004d8
 8003590:	200004cc 	.word	0x200004cc
 8003594:	200003c8 	.word	0x200003c8
 8003598:	200003c4 	.word	0x200003c4
 800359c:	20000010 	.word	0x20000010

080035a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035a8:	f000 f852 	bl	8003650 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <prvIdleTask+0x28>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d9f9      	bls.n	80035a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <prvIdleTask+0x2c>)
 80035b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035c4:	e7f0      	b.n	80035a8 <prvIdleTask+0x8>
 80035c6:	bf00      	nop
 80035c8:	200003c8 	.word	0x200003c8
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	e00c      	b.n	80035f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4a12      	ldr	r2, [pc, #72]	@ (8003630 <prvInitialiseTaskLists+0x60>)
 80035e8:	4413      	add	r3, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fb0b 	bl	8002c06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3301      	adds	r3, #1
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b06      	cmp	r3, #6
 80035fa:	d9ef      	bls.n	80035dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035fc:	480d      	ldr	r0, [pc, #52]	@ (8003634 <prvInitialiseTaskLists+0x64>)
 80035fe:	f7ff fb02 	bl	8002c06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003602:	480d      	ldr	r0, [pc, #52]	@ (8003638 <prvInitialiseTaskLists+0x68>)
 8003604:	f7ff faff 	bl	8002c06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003608:	480c      	ldr	r0, [pc, #48]	@ (800363c <prvInitialiseTaskLists+0x6c>)
 800360a:	f7ff fafc 	bl	8002c06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800360e:	480c      	ldr	r0, [pc, #48]	@ (8003640 <prvInitialiseTaskLists+0x70>)
 8003610:	f7ff faf9 	bl	8002c06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003614:	480b      	ldr	r0, [pc, #44]	@ (8003644 <prvInitialiseTaskLists+0x74>)
 8003616:	f7ff faf6 	bl	8002c06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800361a:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <prvInitialiseTaskLists+0x78>)
 800361c:	4a05      	ldr	r2, [pc, #20]	@ (8003634 <prvInitialiseTaskLists+0x64>)
 800361e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003620:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <prvInitialiseTaskLists+0x7c>)
 8003622:	4a05      	ldr	r2, [pc, #20]	@ (8003638 <prvInitialiseTaskLists+0x68>)
 8003624:	601a      	str	r2, [r3, #0]
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200003c8 	.word	0x200003c8
 8003634:	20000454 	.word	0x20000454
 8003638:	20000468 	.word	0x20000468
 800363c:	20000484 	.word	0x20000484
 8003640:	20000498 	.word	0x20000498
 8003644:	200004b0 	.word	0x200004b0
 8003648:	2000047c 	.word	0x2000047c
 800364c:	20000480 	.word	0x20000480

08003650 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003656:	e019      	b.n	800368c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003658:	f000 fa16 	bl	8003a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800365c:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <prvCheckTasksWaitingTermination+0x50>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fb56 	bl	8002d1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <prvCheckTasksWaitingTermination+0x54>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3b01      	subs	r3, #1
 8003674:	4a0b      	ldr	r2, [pc, #44]	@ (80036a4 <prvCheckTasksWaitingTermination+0x54>)
 8003676:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <prvCheckTasksWaitingTermination+0x58>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3b01      	subs	r3, #1
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <prvCheckTasksWaitingTermination+0x58>)
 8003680:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003682:	f000 fa33 	bl	8003aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f810 	bl	80036ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <prvCheckTasksWaitingTermination+0x58>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e1      	bne.n	8003658 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000498 	.word	0x20000498
 80036a4:	200004c4 	.word	0x200004c4
 80036a8:	200004ac 	.word	0x200004ac

080036ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	334c      	adds	r3, #76	@ 0x4c
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fcbb 	bl	8004034 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d108      	bne.n	80036da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fb89 	bl	8003de4 <vPortFree>
				vPortFree( pxTCB );
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fb86 	bl	8003de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036d8:	e019      	b.n	800370e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d103      	bne.n	80036ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fb7d 	bl	8003de4 <vPortFree>
	}
 80036ea:	e010      	b.n	800370e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d00b      	beq.n	800370e <prvDeleteTCB+0x62>
	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	60fb      	str	r3, [r7, #12]
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	e7fd      	b.n	800370a <prvDeleteTCB+0x5e>
	}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800371e:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <prvResetNextTaskUnblockTime+0x38>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003728:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <prvResetNextTaskUnblockTime+0x3c>)
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003730:	e008      	b.n	8003744 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <prvResetNextTaskUnblockTime+0x38>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <prvResetNextTaskUnblockTime+0x3c>)
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	2000047c 	.word	0x2000047c
 8003754:	200004e4 	.word	0x200004e4

08003758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003762:	4b29      	ldr	r3, [pc, #164]	@ (8003808 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003768:	4b28      	ldr	r3, [pc, #160]	@ (800380c <prvAddCurrentTaskToDelayedList+0xb4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3304      	adds	r3, #4
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fad3 	bl	8002d1a <uxListRemove>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800377a:	4b24      	ldr	r3, [pc, #144]	@ (800380c <prvAddCurrentTaskToDelayedList+0xb4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	2201      	movs	r2, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	4b21      	ldr	r3, [pc, #132]	@ (8003810 <prvAddCurrentTaskToDelayedList+0xb8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4013      	ands	r3, r2
 800378e:	4a20      	ldr	r2, [pc, #128]	@ (8003810 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003790:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d10a      	bne.n	80037b0 <prvAddCurrentTaskToDelayedList+0x58>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037a0:	4b1a      	ldr	r3, [pc, #104]	@ (800380c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	481a      	ldr	r0, [pc, #104]	@ (8003814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037aa:	f7ff fa59 	bl	8002c60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037ae:	e026      	b.n	80037fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037b8:	4b14      	ldr	r3, [pc, #80]	@ (800380c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d209      	bcs.n	80037dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037c8:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b0f      	ldr	r3, [pc, #60]	@ (800380c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7ff fa67 	bl	8002ca8 <vListInsert>
}
 80037da:	e010      	b.n	80037fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037dc:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <prvAddCurrentTaskToDelayedList+0xc4>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f7ff fa5d 	bl	8002ca8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d202      	bcs.n	80037fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80037f8:	4a09      	ldr	r2, [pc, #36]	@ (8003820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	6013      	str	r3, [r2, #0]
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200004c8 	.word	0x200004c8
 800380c:	200003c4 	.word	0x200003c4
 8003810:	200004cc 	.word	0x200004cc
 8003814:	200004b0 	.word	0x200004b0
 8003818:	20000480 	.word	0x20000480
 800381c:	2000047c 	.word	0x2000047c
 8003820:	200004e4 	.word	0x200004e4

08003824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3b04      	subs	r3, #4
 8003834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800383c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3b04      	subs	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f023 0201 	bic.w	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3b04      	subs	r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003854:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <pxPortInitialiseStack+0x64>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3b14      	subs	r3, #20
 800385e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3b04      	subs	r3, #4
 800386a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f06f 0202 	mvn.w	r2, #2
 8003872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b20      	subs	r3, #32
 8003878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	0800388d 	.word	0x0800388d

0800388c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003896:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <prvTaskExitError+0x58>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d00b      	beq.n	80038b8 <prvTaskExitError+0x2c>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	60fb      	str	r3, [r7, #12]
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <prvTaskExitError+0x28>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	60bb      	str	r3, [r7, #8]
}
 80038ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038cc:	bf00      	nop
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0fc      	beq.n	80038ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c
	...

080038f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038f0:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <pxCurrentTCBConst2>)
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	6808      	ldr	r0, [r1, #0]
 80038f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fa:	f380 8809 	msr	PSP, r0
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f04f 0000 	mov.w	r0, #0
 8003906:	f380 8811 	msr	BASEPRI, r0
 800390a:	4770      	bx	lr
 800390c:	f3af 8000 	nop.w

08003910 <pxCurrentTCBConst2>:
 8003910:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop

08003918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003918:	4808      	ldr	r0, [pc, #32]	@ (800393c <prvPortStartFirstTask+0x24>)
 800391a:	6800      	ldr	r0, [r0, #0]
 800391c:	6800      	ldr	r0, [r0, #0]
 800391e:	f380 8808 	msr	MSP, r0
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f380 8814 	msr	CONTROL, r0
 800392a:	b662      	cpsie	i
 800392c:	b661      	cpsie	f
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	df00      	svc	0
 8003938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800393a:	bf00      	nop
 800393c:	e000ed08 	.word	0xe000ed08

08003940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003946:	4b47      	ldr	r3, [pc, #284]	@ (8003a64 <xPortStartScheduler+0x124>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a47      	ldr	r2, [pc, #284]	@ (8003a68 <xPortStartScheduler+0x128>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d10b      	bne.n	8003968 <xPortStartScheduler+0x28>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	613b      	str	r3, [r7, #16]
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003968:	4b3e      	ldr	r3, [pc, #248]	@ (8003a64 <xPortStartScheduler+0x124>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a6c <xPortStartScheduler+0x12c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10b      	bne.n	800398a <xPortStartScheduler+0x4a>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60fb      	str	r3, [r7, #12]
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	e7fd      	b.n	8003986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800398a:	4b39      	ldr	r3, [pc, #228]	@ (8003a70 <xPortStartScheduler+0x130>)
 800398c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	22ff      	movs	r2, #255	@ 0xff
 800399a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <xPortStartScheduler+0x134>)
 80039b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039b2:	4b31      	ldr	r3, [pc, #196]	@ (8003a78 <xPortStartScheduler+0x138>)
 80039b4:	2207      	movs	r2, #7
 80039b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039b8:	e009      	b.n	80039ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80039ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003a78 <xPortStartScheduler+0x138>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3b01      	subs	r3, #1
 80039c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a78 <xPortStartScheduler+0x138>)
 80039c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d6:	2b80      	cmp	r3, #128	@ 0x80
 80039d8:	d0ef      	beq.n	80039ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <xPortStartScheduler+0x138>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d00b      	beq.n	80039fe <xPortStartScheduler+0xbe>
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	60bb      	str	r3, [r7, #8]
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	e7fd      	b.n	80039fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003a78 <xPortStartScheduler+0x138>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	4a1c      	ldr	r2, [pc, #112]	@ (8003a78 <xPortStartScheduler+0x138>)
 8003a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <xPortStartScheduler+0x138>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a10:	4a19      	ldr	r2, [pc, #100]	@ (8003a78 <xPortStartScheduler+0x138>)
 8003a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a1c:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <xPortStartScheduler+0x13c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <xPortStartScheduler+0x13c>)
 8003a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a28:	4b14      	ldr	r3, [pc, #80]	@ (8003a7c <xPortStartScheduler+0x13c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a13      	ldr	r2, [pc, #76]	@ (8003a7c <xPortStartScheduler+0x13c>)
 8003a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a34:	f000 f8da 	bl	8003bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a38:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <xPortStartScheduler+0x140>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a3e:	f000 f8f9 	bl	8003c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <xPortStartScheduler+0x144>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a0f      	ldr	r2, [pc, #60]	@ (8003a84 <xPortStartScheduler+0x144>)
 8003a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a4e:	f7ff ff63 	bl	8003918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a52:	f7ff fd41 	bl	80034d8 <vTaskSwitchContext>
	prvTaskExitError();
 8003a56:	f7ff ff19 	bl	800388c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	e000ed00 	.word	0xe000ed00
 8003a68:	410fc271 	.word	0x410fc271
 8003a6c:	410fc270 	.word	0x410fc270
 8003a70:	e000e400 	.word	0xe000e400
 8003a74:	200004f0 	.word	0x200004f0
 8003a78:	200004f4 	.word	0x200004f4
 8003a7c:	e000ed20 	.word	0xe000ed20
 8003a80:	2000000c 	.word	0x2000000c
 8003a84:	e000ef34 	.word	0xe000ef34

08003a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	607b      	str	r3, [r7, #4]
}
 8003aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <vPortEnterCritical+0x5c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae4 <vPortEnterCritical+0x5c>)
 8003aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003aac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae4 <vPortEnterCritical+0x5c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d110      	bne.n	8003ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <vPortEnterCritical+0x60>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	603b      	str	r3, [r7, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	e7fd      	b.n	8003ad2 <vPortEnterCritical+0x4a>
	}
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000000c 	.word	0x2000000c
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <vPortExitCritical+0x50>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <vPortExitCritical+0x26>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	607b      	str	r3, [r7, #4]
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	4a08      	ldr	r2, [pc, #32]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b1c:	4b07      	ldr	r3, [pc, #28]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <vPortExitCritical+0x44>
 8003b24:	2300      	movs	r3, #0
 8003b26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	2000000c 	.word	0x2000000c

08003b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b40:	f3ef 8009 	mrs	r0, PSP
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <pxCurrentTCBConst>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	f01e 0f10 	tst.w	lr, #16
 8003b50:	bf08      	it	eq
 8003b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5a:	6010      	str	r0, [r2, #0]
 8003b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b64:	f380 8811 	msr	BASEPRI, r0
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f7ff fcb2 	bl	80034d8 <vTaskSwitchContext>
 8003b74:	f04f 0000 	mov.w	r0, #0
 8003b78:	f380 8811 	msr	BASEPRI, r0
 8003b7c:	bc09      	pop	{r0, r3}
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	6808      	ldr	r0, [r1, #0]
 8003b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b86:	f01e 0f10 	tst.w	lr, #16
 8003b8a:	bf08      	it	eq
 8003b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b90:	f380 8809 	msr	PSP, r0
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	f3af 8000 	nop.w

08003ba0 <pxCurrentTCBConst>:
 8003ba0:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop

08003ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	607b      	str	r3, [r7, #4]
}
 8003bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bc2:	f7ff fbcf 	bl	8003364 <xTaskIncrementTick>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <SysTick_Handler+0x40>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f383 8811 	msr	BASEPRI, r3
}
 8003bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <vPortSetupTimerInterrupt+0x34>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <vPortSetupTimerInterrupt+0x38>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <vPortSetupTimerInterrupt+0x3c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <vPortSetupTimerInterrupt+0x40>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <vPortSetupTimerInterrupt+0x44>)
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c0e:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <vPortSetupTimerInterrupt+0x34>)
 8003c10:	2207      	movs	r2, #7
 8003c12:	601a      	str	r2, [r3, #0]
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000e010 	.word	0xe000e010
 8003c24:	e000e018 	.word	0xe000e018
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	10624dd3 	.word	0x10624dd3
 8003c30:	e000e014 	.word	0xe000e014

08003c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003c44 <vPortEnableVFP+0x10>
 8003c38:	6801      	ldr	r1, [r0, #0]
 8003c3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c3e:	6001      	str	r1, [r0, #0]
 8003c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c42:	bf00      	nop
 8003c44:	e000ed88 	.word	0xe000ed88

08003c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c54:	f7ff fada 	bl	800320c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c58:	4b5c      	ldr	r3, [pc, #368]	@ (8003dcc <pvPortMalloc+0x184>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c60:	f000 f924 	bl	8003eac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c64:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd0 <pvPortMalloc+0x188>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 8095 	bne.w	8003d9c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01e      	beq.n	8003cb6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003c78:	2208      	movs	r2, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d015      	beq.n	8003cb6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f023 0307 	bic.w	r3, r3, #7
 8003c90:	3308      	adds	r3, #8
 8003c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <pvPortMalloc+0x6e>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	617b      	str	r3, [r7, #20]
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d06f      	beq.n	8003d9c <pvPortMalloc+0x154>
 8003cbc:	4b45      	ldr	r3, [pc, #276]	@ (8003dd4 <pvPortMalloc+0x18c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d86a      	bhi.n	8003d9c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cc6:	4b44      	ldr	r3, [pc, #272]	@ (8003dd8 <pvPortMalloc+0x190>)
 8003cc8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cca:	4b43      	ldr	r3, [pc, #268]	@ (8003dd8 <pvPortMalloc+0x190>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cd0:	e004      	b.n	8003cdc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d903      	bls.n	8003cee <pvPortMalloc+0xa6>
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f1      	bne.n	8003cd2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cee:	4b37      	ldr	r3, [pc, #220]	@ (8003dcc <pvPortMalloc+0x184>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d051      	beq.n	8003d9c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	4413      	add	r3, r2
 8003d00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1ad2      	subs	r2, r2, r3
 8003d12:	2308      	movs	r3, #8
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d920      	bls.n	8003d5c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4413      	add	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <pvPortMalloc+0xfc>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	613b      	str	r3, [r7, #16]
}
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d56:	69b8      	ldr	r0, [r7, #24]
 8003d58:	f000 f90a 	bl	8003f70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <pvPortMalloc+0x18c>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd4 <pvPortMalloc+0x18c>)
 8003d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <pvPortMalloc+0x18c>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <pvPortMalloc+0x194>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d203      	bcs.n	8003d7e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d76:	4b17      	ldr	r3, [pc, #92]	@ (8003dd4 <pvPortMalloc+0x18c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a18      	ldr	r2, [pc, #96]	@ (8003ddc <pvPortMalloc+0x194>)
 8003d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <pvPortMalloc+0x188>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003d92:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <pvPortMalloc+0x198>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3301      	adds	r3, #1
 8003d98:	4a11      	ldr	r2, [pc, #68]	@ (8003de0 <pvPortMalloc+0x198>)
 8003d9a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d9c:	f7ff fa44 	bl	8003228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <pvPortMalloc+0x17a>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60fb      	str	r3, [r7, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <pvPortMalloc+0x176>
	return pvReturn;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3728      	adds	r7, #40	@ 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20004100 	.word	0x20004100
 8003dd0:	20004114 	.word	0x20004114
 8003dd4:	20004104 	.word	0x20004104
 8003dd8:	200040f8 	.word	0x200040f8
 8003ddc:	20004108 	.word	0x20004108
 8003de0:	2000410c 	.word	0x2000410c

08003de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04f      	beq.n	8003e96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003df6:	2308      	movs	r3, #8
 8003df8:	425b      	negs	r3, r3
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	4b25      	ldr	r3, [pc, #148]	@ (8003ea0 <vPortFree+0xbc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <vPortFree+0x46>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	60fb      	str	r3, [r7, #12]
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <vPortFree+0x66>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	60bb      	str	r3, [r7, #8]
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	e7fd      	b.n	8003e46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <vPortFree+0xbc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01e      	beq.n	8003e96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d11a      	bne.n	8003e96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <vPortFree+0xbc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e70:	f7ff f9cc 	bl	800320c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea4 <vPortFree+0xc0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ea4 <vPortFree+0xc0>)
 8003e80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e82:	6938      	ldr	r0, [r7, #16]
 8003e84:	f000 f874 	bl	8003f70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003e88:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <vPortFree+0xc4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a06      	ldr	r2, [pc, #24]	@ (8003ea8 <vPortFree+0xc4>)
 8003e90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003e92:	f7ff f9c9 	bl	8003228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e96:	bf00      	nop
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20004114 	.word	0x20004114
 8003ea4:	20004104 	.word	0x20004104
 8003ea8:	20004110 	.word	0x20004110

08003eac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003eb2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003eb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003eb8:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <prvHeapInit+0xac>)
 8003eba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3307      	adds	r3, #7
 8003eca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	4a1f      	ldr	r2, [pc, #124]	@ (8003f58 <prvHeapInit+0xac>)
 8003edc:	4413      	add	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f5c <prvHeapInit+0xb0>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003eea:	4b1c      	ldr	r3, [pc, #112]	@ (8003f5c <prvHeapInit+0xb0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ef8:	2208      	movs	r2, #8
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a15      	ldr	r2, [pc, #84]	@ (8003f60 <prvHeapInit+0xb4>)
 8003f0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <prvHeapInit+0xb4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <prvHeapInit+0xb4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <prvHeapInit+0xb4>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <prvHeapInit+0xb8>)
 8003f3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a09      	ldr	r2, [pc, #36]	@ (8003f68 <prvHeapInit+0xbc>)
 8003f42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f44:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <prvHeapInit+0xc0>)
 8003f46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f4a:	601a      	str	r2, [r3, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	200004f8 	.word	0x200004f8
 8003f5c:	200040f8 	.word	0x200040f8
 8003f60:	20004100 	.word	0x20004100
 8003f64:	20004108 	.word	0x20004108
 8003f68:	20004104 	.word	0x20004104
 8003f6c:	20004114 	.word	0x20004114

08003f70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f78:	4b28      	ldr	r3, [pc, #160]	@ (800401c <prvInsertBlockIntoFreeList+0xac>)
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e002      	b.n	8003f84 <prvInsertBlockIntoFreeList+0x14>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d8f7      	bhi.n	8003f7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4413      	add	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d108      	bne.n	8003fb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	441a      	add	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d118      	bne.n	8003ff8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <prvInsertBlockIntoFreeList+0xb0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d00d      	beq.n	8003fee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e008      	b.n	8004000 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fee:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <prvInsertBlockIntoFreeList+0xb0>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e003      	b.n	8004000 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d002      	beq.n	800400e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	200040f8 	.word	0x200040f8
 8004020:	20004100 	.word	0x20004100

08004024 <memset>:
 8004024:	4402      	add	r2, r0
 8004026:	4603      	mov	r3, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	d100      	bne.n	800402e <memset+0xa>
 800402c:	4770      	bx	lr
 800402e:	f803 1b01 	strb.w	r1, [r3], #1
 8004032:	e7f9      	b.n	8004028 <memset+0x4>

08004034 <_reclaim_reent>:
 8004034:	4b29      	ldr	r3, [pc, #164]	@ (80040dc <_reclaim_reent+0xa8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4283      	cmp	r3, r0
 800403a:	b570      	push	{r4, r5, r6, lr}
 800403c:	4604      	mov	r4, r0
 800403e:	d04b      	beq.n	80040d8 <_reclaim_reent+0xa4>
 8004040:	69c3      	ldr	r3, [r0, #28]
 8004042:	b1ab      	cbz	r3, 8004070 <_reclaim_reent+0x3c>
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	b16b      	cbz	r3, 8004064 <_reclaim_reent+0x30>
 8004048:	2500      	movs	r5, #0
 800404a:	69e3      	ldr	r3, [r4, #28]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	5959      	ldr	r1, [r3, r5]
 8004050:	2900      	cmp	r1, #0
 8004052:	d13b      	bne.n	80040cc <_reclaim_reent+0x98>
 8004054:	3504      	adds	r5, #4
 8004056:	2d80      	cmp	r5, #128	@ 0x80
 8004058:	d1f7      	bne.n	800404a <_reclaim_reent+0x16>
 800405a:	69e3      	ldr	r3, [r4, #28]
 800405c:	4620      	mov	r0, r4
 800405e:	68d9      	ldr	r1, [r3, #12]
 8004060:	f000 f864 	bl	800412c <_free_r>
 8004064:	69e3      	ldr	r3, [r4, #28]
 8004066:	6819      	ldr	r1, [r3, #0]
 8004068:	b111      	cbz	r1, 8004070 <_reclaim_reent+0x3c>
 800406a:	4620      	mov	r0, r4
 800406c:	f000 f85e 	bl	800412c <_free_r>
 8004070:	6961      	ldr	r1, [r4, #20]
 8004072:	b111      	cbz	r1, 800407a <_reclaim_reent+0x46>
 8004074:	4620      	mov	r0, r4
 8004076:	f000 f859 	bl	800412c <_free_r>
 800407a:	69e1      	ldr	r1, [r4, #28]
 800407c:	b111      	cbz	r1, 8004084 <_reclaim_reent+0x50>
 800407e:	4620      	mov	r0, r4
 8004080:	f000 f854 	bl	800412c <_free_r>
 8004084:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004086:	b111      	cbz	r1, 800408e <_reclaim_reent+0x5a>
 8004088:	4620      	mov	r0, r4
 800408a:	f000 f84f 	bl	800412c <_free_r>
 800408e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004090:	b111      	cbz	r1, 8004098 <_reclaim_reent+0x64>
 8004092:	4620      	mov	r0, r4
 8004094:	f000 f84a 	bl	800412c <_free_r>
 8004098:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800409a:	b111      	cbz	r1, 80040a2 <_reclaim_reent+0x6e>
 800409c:	4620      	mov	r0, r4
 800409e:	f000 f845 	bl	800412c <_free_r>
 80040a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80040a4:	b111      	cbz	r1, 80040ac <_reclaim_reent+0x78>
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 f840 	bl	800412c <_free_r>
 80040ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80040ae:	b111      	cbz	r1, 80040b6 <_reclaim_reent+0x82>
 80040b0:	4620      	mov	r0, r4
 80040b2:	f000 f83b 	bl	800412c <_free_r>
 80040b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80040b8:	b111      	cbz	r1, 80040c0 <_reclaim_reent+0x8c>
 80040ba:	4620      	mov	r0, r4
 80040bc:	f000 f836 	bl	800412c <_free_r>
 80040c0:	6a23      	ldr	r3, [r4, #32]
 80040c2:	b14b      	cbz	r3, 80040d8 <_reclaim_reent+0xa4>
 80040c4:	4620      	mov	r0, r4
 80040c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040ca:	4718      	bx	r3
 80040cc:	680e      	ldr	r6, [r1, #0]
 80040ce:	4620      	mov	r0, r4
 80040d0:	f000 f82c 	bl	800412c <_free_r>
 80040d4:	4631      	mov	r1, r6
 80040d6:	e7bb      	b.n	8004050 <_reclaim_reent+0x1c>
 80040d8:	bd70      	pop	{r4, r5, r6, pc}
 80040da:	bf00      	nop
 80040dc:	20000010 	.word	0x20000010

080040e0 <__libc_init_array>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004118 <__libc_init_array+0x38>)
 80040e4:	4c0d      	ldr	r4, [pc, #52]	@ (800411c <__libc_init_array+0x3c>)
 80040e6:	1b64      	subs	r4, r4, r5
 80040e8:	10a4      	asrs	r4, r4, #2
 80040ea:	2600      	movs	r6, #0
 80040ec:	42a6      	cmp	r6, r4
 80040ee:	d109      	bne.n	8004104 <__libc_init_array+0x24>
 80040f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004120 <__libc_init_array+0x40>)
 80040f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004124 <__libc_init_array+0x44>)
 80040f4:	f000 f870 	bl	80041d8 <_init>
 80040f8:	1b64      	subs	r4, r4, r5
 80040fa:	10a4      	asrs	r4, r4, #2
 80040fc:	2600      	movs	r6, #0
 80040fe:	42a6      	cmp	r6, r4
 8004100:	d105      	bne.n	800410e <__libc_init_array+0x2e>
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	f855 3b04 	ldr.w	r3, [r5], #4
 8004108:	4798      	blx	r3
 800410a:	3601      	adds	r6, #1
 800410c:	e7ee      	b.n	80040ec <__libc_init_array+0xc>
 800410e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004112:	4798      	blx	r3
 8004114:	3601      	adds	r6, #1
 8004116:	e7f2      	b.n	80040fe <__libc_init_array+0x1e>
 8004118:	080042fc 	.word	0x080042fc
 800411c:	080042fc 	.word	0x080042fc
 8004120:	080042fc 	.word	0x080042fc
 8004124:	08004300 	.word	0x08004300

08004128 <__retarget_lock_acquire_recursive>:
 8004128:	4770      	bx	lr

0800412a <__retarget_lock_release_recursive>:
 800412a:	4770      	bx	lr

0800412c <_free_r>:
 800412c:	b538      	push	{r3, r4, r5, lr}
 800412e:	4605      	mov	r5, r0
 8004130:	2900      	cmp	r1, #0
 8004132:	d041      	beq.n	80041b8 <_free_r+0x8c>
 8004134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004138:	1f0c      	subs	r4, r1, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	bfb8      	it	lt
 800413e:	18e4      	addlt	r4, r4, r3
 8004140:	f000 f83e 	bl	80041c0 <__malloc_lock>
 8004144:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <_free_r+0x90>)
 8004146:	6813      	ldr	r3, [r2, #0]
 8004148:	b933      	cbnz	r3, 8004158 <_free_r+0x2c>
 800414a:	6063      	str	r3, [r4, #4]
 800414c:	6014      	str	r4, [r2, #0]
 800414e:	4628      	mov	r0, r5
 8004150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004154:	f000 b83a 	b.w	80041cc <__malloc_unlock>
 8004158:	42a3      	cmp	r3, r4
 800415a:	d908      	bls.n	800416e <_free_r+0x42>
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	1821      	adds	r1, r4, r0
 8004160:	428b      	cmp	r3, r1
 8004162:	bf01      	itttt	eq
 8004164:	6819      	ldreq	r1, [r3, #0]
 8004166:	685b      	ldreq	r3, [r3, #4]
 8004168:	1809      	addeq	r1, r1, r0
 800416a:	6021      	streq	r1, [r4, #0]
 800416c:	e7ed      	b.n	800414a <_free_r+0x1e>
 800416e:	461a      	mov	r2, r3
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	b10b      	cbz	r3, 8004178 <_free_r+0x4c>
 8004174:	42a3      	cmp	r3, r4
 8004176:	d9fa      	bls.n	800416e <_free_r+0x42>
 8004178:	6811      	ldr	r1, [r2, #0]
 800417a:	1850      	adds	r0, r2, r1
 800417c:	42a0      	cmp	r0, r4
 800417e:	d10b      	bne.n	8004198 <_free_r+0x6c>
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	4401      	add	r1, r0
 8004184:	1850      	adds	r0, r2, r1
 8004186:	4283      	cmp	r3, r0
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	d1e0      	bne.n	800414e <_free_r+0x22>
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	6053      	str	r3, [r2, #4]
 8004192:	4408      	add	r0, r1
 8004194:	6010      	str	r0, [r2, #0]
 8004196:	e7da      	b.n	800414e <_free_r+0x22>
 8004198:	d902      	bls.n	80041a0 <_free_r+0x74>
 800419a:	230c      	movs	r3, #12
 800419c:	602b      	str	r3, [r5, #0]
 800419e:	e7d6      	b.n	800414e <_free_r+0x22>
 80041a0:	6820      	ldr	r0, [r4, #0]
 80041a2:	1821      	adds	r1, r4, r0
 80041a4:	428b      	cmp	r3, r1
 80041a6:	bf04      	itt	eq
 80041a8:	6819      	ldreq	r1, [r3, #0]
 80041aa:	685b      	ldreq	r3, [r3, #4]
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	bf04      	itt	eq
 80041b0:	1809      	addeq	r1, r1, r0
 80041b2:	6021      	streq	r1, [r4, #0]
 80041b4:	6054      	str	r4, [r2, #4]
 80041b6:	e7ca      	b.n	800414e <_free_r+0x22>
 80041b8:	bd38      	pop	{r3, r4, r5, pc}
 80041ba:	bf00      	nop
 80041bc:	20004254 	.word	0x20004254

080041c0 <__malloc_lock>:
 80041c0:	4801      	ldr	r0, [pc, #4]	@ (80041c8 <__malloc_lock+0x8>)
 80041c2:	f7ff bfb1 	b.w	8004128 <__retarget_lock_acquire_recursive>
 80041c6:	bf00      	nop
 80041c8:	20004250 	.word	0x20004250

080041cc <__malloc_unlock>:
 80041cc:	4801      	ldr	r0, [pc, #4]	@ (80041d4 <__malloc_unlock+0x8>)
 80041ce:	f7ff bfac 	b.w	800412a <__retarget_lock_release_recursive>
 80041d2:	bf00      	nop
 80041d4:	20004250 	.word	0x20004250

080041d8 <_init>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr

080041e4 <_fini>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	bf00      	nop
 80041e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ea:	bc08      	pop	{r3}
 80041ec:	469e      	mov	lr, r3
 80041ee:	4770      	bx	lr
