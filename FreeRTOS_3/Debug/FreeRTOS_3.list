
FreeRTOS_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004618  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080047e8  080047e8  000057e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ec  080048ec  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  080048ec  080048ec  000058ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f4  080048f4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f4  080048f4  000058f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048f8  080048f8  000058f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080048fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b8  2000006c  08004968  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004224  08004968  00006224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010218  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c3  00000000  00000000  000162b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00018c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bac  00000000  00000000  00019bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002407d  00000000  00000000  0001a764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c8b  00000000  00000000  0003e7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8c99  00000000  00000000  0005046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004638  00000000  00000000  00129148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0012d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047d0 	.word	0x080047d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080047d0 	.word	0x080047d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000088 	.word	0x20000088
 80005d0:	20000128 	.word	0x20000128

080005d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d013      	beq.n	8000614 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d00b      	beq.n	8000614 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005fc:	e000      	b.n	8000600 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000600:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f9      	beq.n	80005fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800060a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <_write>:
static void MX_GPIO_Init(void);
void StartDefaultTask(void const * argument);
void task1_init(void const * argument);

/* USER CODE BEGIN PFP */
int _write(int file, char * ptr, int len){
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
	for(i= 0; i< len; i++){
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e009      	b.n	800064c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	60ba      	str	r2, [r7, #8]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffc7 	bl	80005d4 <ITM_SendChar>
	for(i= 0; i< len; i++){
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	dbf1      	blt.n	8000638 <_write+0x16>
	}
	return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fabd 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f837 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f8a3 	bl	80007b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf ("starting\r\n");
 8000672:	4815      	ldr	r0, [pc, #84]	@ (80006c8 <main+0x68>)
 8000674:	f003 f9f2 	bl	8003a5c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <main+0x6c>)
 800067a:	f107 041c 	add.w	r4, r7, #28
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fcb3 	bl	8001ffe <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <main+0x70>)
 800069c:	6013      	str	r3, [r2, #0]

  // define the thread
  osThreadDef(task1,task1_init,osPriorityAboveNormal,0,128);
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <main+0x74>)
 80006a0:	463c      	mov	r4, r7
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  // create the thread and assign ID
  task1handle = osThreadCreate(osThread(task1), NULL);
 80006b0:	463b      	mov	r3, r7
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fca2 	bl	8001ffe <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a06      	ldr	r2, [pc, #24]	@ (80006d8 <main+0x78>)
 80006be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c0:	f001 fc86 	bl	8001fd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <main+0x64>
 80006c8:	080047e8 	.word	0x080047e8
 80006cc:	08004800 	.word	0x08004800
 80006d0:	20000328 	.word	0x20000328
 80006d4:	08004824 	.word	0x08004824
 80006d8:	2000032c 	.word	0x2000032c

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2234      	movs	r2, #52	@ 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fa96 	bl	8003c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b2a      	ldr	r3, [pc, #168]	@ (80007b0 <SystemClock_Config+0xd4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a29      	ldr	r2, [pc, #164]	@ (80007b0 <SystemClock_Config+0xd4>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <SystemClock_Config+0xd4>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <SystemClock_Config+0xd8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000728:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <SystemClock_Config+0xd8>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <SystemClock_Config+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000744:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000754:	2364      	movs	r3, #100	@ 0x64
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fec7 	bl	80014fc <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000774:	f000 f8a6 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2103      	movs	r1, #3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fb48 	bl	8000e2c <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007a2:	f000 f88f 	bl	80008c4 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	@ 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	printf("default task begin ...\n");
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <StartDefaultTask+0x1c>)
 8000812:	f003 f923 	bl	8003a5c <puts>
    osDelay(2000);
 8000816:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800081a:	f001 fc48 	bl	80020ae <osDelay>
	printf("default task begin ...\n");
 800081e:	bf00      	nop
 8000820:	e7f6      	b.n	8000810 <StartDefaultTask+0x8>
 8000822:	bf00      	nop
 8000824:	08004840 	.word	0x08004840

08000828 <task1_init>:

  }
  /* USER CODE END 5 */
}

void task1_init(void const * argument){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

	for(;;){
		printf("hello from task 1\n");
 8000830:	4816      	ldr	r0, [pc, #88]	@ (800088c <task1_init+0x64>)
 8000832:	f003 f913 	bl	8003a5c <puts>
		printf("the value of our index : %d \n",++idex);
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <task1_init+0x68>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <task1_init+0x68>)
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <task1_init+0x68>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	4813      	ldr	r0, [pc, #76]	@ (8000894 <task1_init+0x6c>)
 8000848:	f003 f8a0 	bl	800398c <iprintf>
		osDelay(2000);
 800084c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000850:	f001 fc2d 	bl	80020ae <osDelay>
//		}
//		if(idex == 7){
//			printf("resuming...\n");
//			osThreadResume(defaultTaskHandle);
//		}
		if(idex == 6){
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <task1_init+0x68>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b06      	cmp	r3, #6
 800085a:	d107      	bne.n	800086c <task1_init+0x44>
			printf("terminating\n");
 800085c:	480e      	ldr	r0, [pc, #56]	@ (8000898 <task1_init+0x70>)
 800085e:	f003 f8fd 	bl	8003a5c <puts>
			osThreadTerminate(defaultTaskHandle);
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <task1_init+0x74>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fc15 	bl	8002096 <osThreadTerminate>
		}
		if(idex == 9){
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <task1_init+0x68>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b09      	cmp	r3, #9
 8000872:	d1dd      	bne.n	8000830 <task1_init+0x8>
			uint32_t previoustime = osKernelSysTick();
 8000874:	f001 fbb3 	bl	8001fde <osKernelSysTick>
 8000878:	4603      	mov	r3, r0
 800087a:	60fb      	str	r3, [r7, #12]
			osDelayUntil(&previoustime, 3000);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fc26 	bl	80020d6 <osDelayUntil>
		printf("hello from task 1\n");
 800088a:	e7d1      	b.n	8000830 <task1_init+0x8>
 800088c:	08004858 	.word	0x08004858
 8000890:	20000330 	.word	0x20000330
 8000894:	0800486c 	.word	0x0800486c
 8000898:	0800488c 	.word	0x0800488c
 800089c:	20000328 	.word	0x20000328

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 f9b9 	bl	8000c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40010000 	.word	0x40010000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_MspInit+0x54>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x54>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_MspInit+0x54>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_MspInit+0x54>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fa5f 	bl	8000dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	@ 0x30
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b2f      	ldr	r3, [pc, #188]	@ (80009fc <HAL_InitTick+0xd4>)
 800093e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000940:	4a2e      	ldr	r2, [pc, #184]	@ (80009fc <HAL_InitTick+0xd4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6453      	str	r3, [r2, #68]	@ 0x44
 8000948:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <HAL_InitTick+0xd4>)
 800094a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 020c 	add.w	r2, r7, #12
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fb6a 	bl	8001038 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000964:	f000 fb54 	bl	8001010 <HAL_RCC_GetPCLK2Freq>
 8000968:	4603      	mov	r3, r0
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000970:	4a23      	ldr	r2, [pc, #140]	@ (8000a00 <HAL_InitTick+0xd8>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3b01      	subs	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800097c:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <HAL_InitTick+0xdc>)
 800097e:	4a22      	ldr	r2, [pc, #136]	@ (8000a08 <HAL_InitTick+0xe0>)
 8000980:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <HAL_InitTick+0xdc>)
 8000984:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000988:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800098a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a04 <HAL_InitTick+0xdc>)
 800098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <HAL_InitTick+0xdc>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <HAL_InitTick+0xdc>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <HAL_InitTick+0xdc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009a2:	4818      	ldr	r0, [pc, #96]	@ (8000a04 <HAL_InitTick+0xdc>)
 80009a4:	f001 f848 	bl	8001a38 <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d11b      	bne.n	80009ee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009b6:	4813      	ldr	r0, [pc, #76]	@ (8000a04 <HAL_InitTick+0xdc>)
 80009b8:	f001 f898 	bl	8001aec <HAL_TIM_Base_Start_IT>
 80009bc:	4603      	mov	r3, r0
 80009be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d111      	bne.n	80009ee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009ca:	2019      	movs	r0, #25
 80009cc:	f000 fa20 	bl	8000e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d808      	bhi.n	80009e8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009d6:	2200      	movs	r2, #0
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 f9fc 	bl	8000dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_InitTick+0xe4>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e002      	b.n	80009ee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3730      	adds	r7, #48	@ 0x30
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	431bde83 	.word	0x431bde83
 8000a04:	20000334 	.word	0x20000334
 8000a08:	40010000 	.word	0x40010000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a4e:	f001 f8bd 	bl	8001bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000334 	.word	0x20000334

08000a5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
  }

  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000abe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_isatty>:

int _isatty(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f003 f918 	bl	8003d64 <__errno>
 8000b34:	4603      	mov	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20020000 	.word	0x20020000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	2000037c 	.word	0x2000037c
 8000b68:	20004228 	.word	0x20004228

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b94:	f7ff ffea 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f003 f8d7 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fd4d 	bl	8000660 <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000bd4:	080048fc 	.word	0x080048fc
  ldr r2, =_sbss
 8000bd8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bdc:	20004224 	.word	0x20004224

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f8d8 	bl	8000dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff fe88 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe5a 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000380 	.word	0x20000380

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	@ (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000380 	.word	0x20000380

08000c68 <__NVIC_SetPriorityGrouping>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	@ (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	@ (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	@ 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff4c 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dea:	f7ff ff61 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	f7ff ffb1 	bl	8000d5c <NVIC_EncodePriority>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff80 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff54 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e0cc      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e40:	4b68      	ldr	r3, [pc, #416]	@ (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90c      	bls.n	8000e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4e:	4b65      	ldr	r3, [pc, #404]	@ (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e56:	4b63      	ldr	r3, [pc, #396]	@ (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d001      	beq.n	8000e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e0b8      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d020      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e80:	4b59      	ldr	r3, [pc, #356]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4a58      	ldr	r2, [pc, #352]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000e8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e98:	4b53      	ldr	r3, [pc, #332]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a52      	ldr	r2, [pc, #328]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ea4:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	494d      	ldr	r1, [pc, #308]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d044      	beq.n	8000f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d107      	bne.n	8000eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	4b47      	ldr	r3, [pc, #284]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d119      	bne.n	8000f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e07f      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d003      	beq.n	8000eea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d107      	bne.n	8000efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eea:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d109      	bne.n	8000f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e06f      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efa:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e067      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f0a:	4b37      	ldr	r3, [pc, #220]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f023 0203 	bic.w	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4934      	ldr	r1, [pc, #208]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f1c:	f7ff fe98 	bl	8000c50 <HAL_GetTick>
 8000f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f22:	e00a      	b.n	8000f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f24:	f7ff fe94 	bl	8000c50 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e04f      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 020c 	and.w	r2, r3, #12
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d1eb      	bne.n	8000f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f4c:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d20c      	bcs.n	8000f74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f62:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d001      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e032      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d008      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4916      	ldr	r1, [pc, #88]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d009      	beq.n	8000fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	490e      	ldr	r1, [pc, #56]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fb2:	f000 f873 	bl	800109c <HAL_RCC_GetSysClockFreq>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	490a      	ldr	r1, [pc, #40]	@ (8000fec <HAL_RCC_ClockConfig+0x1c0>)
 8000fc4:	5ccb      	ldrb	r3, [r1, r3]
 8000fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fca:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fca8 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	080048a0 	.word	0x080048a0
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_RCC_GetHCLKFreq+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000

08001010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001014:	f7ff fff0 	bl	8000ff8 <HAL_RCC_GetHCLKFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	0b5b      	lsrs	r3, r3, #13
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	4903      	ldr	r1, [pc, #12]	@ (8001034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	080048b0 	.word	0x080048b0

08001038 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	220f      	movs	r2, #15
 8001046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_RCC_GetClockConfig+0x5c>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <HAL_RCC_GetClockConfig+0x5c>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <HAL_RCC_GetClockConfig+0x5c>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <HAL_RCC_GetClockConfig+0x5c>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_RCC_GetClockConfig+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 020f 	and.w	r2, r3, #15
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800109c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010a0:	b0ae      	sub	sp, #184	@ 0xb8
 80010a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010c2:	4bcb      	ldr	r3, [pc, #812]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b0c      	cmp	r3, #12
 80010cc:	f200 8206 	bhi.w	80014dc <HAL_RCC_GetSysClockFreq+0x440>
 80010d0:	a201      	add	r2, pc, #4	@ (adr r2, 80010d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	0800110d 	.word	0x0800110d
 80010dc:	080014dd 	.word	0x080014dd
 80010e0:	080014dd 	.word	0x080014dd
 80010e4:	080014dd 	.word	0x080014dd
 80010e8:	08001115 	.word	0x08001115
 80010ec:	080014dd 	.word	0x080014dd
 80010f0:	080014dd 	.word	0x080014dd
 80010f4:	080014dd 	.word	0x080014dd
 80010f8:	0800111d 	.word	0x0800111d
 80010fc:	080014dd 	.word	0x080014dd
 8001100:	080014dd 	.word	0x080014dd
 8001104:	080014dd 	.word	0x080014dd
 8001108:	0800130d 	.word	0x0800130d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800110c:	4bb9      	ldr	r3, [pc, #740]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800110e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001112:	e1e7      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001114:	4bb8      	ldr	r3, [pc, #736]	@ (80013f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800111a:	e1e3      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800111c:	4bb4      	ldr	r3, [pc, #720]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001128:	4bb1      	ldr	r3, [pc, #708]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d071      	beq.n	8001218 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001134:	4bae      	ldr	r3, [pc, #696]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	099b      	lsrs	r3, r3, #6
 800113a:	2200      	movs	r2, #0
 800113c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001140:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800114c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800115a:	4622      	mov	r2, r4
 800115c:	462b      	mov	r3, r5
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	f04f 0100 	mov.w	r1, #0
 8001166:	0159      	lsls	r1, r3, #5
 8001168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800116c:	0150      	lsls	r0, r2, #5
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4621      	mov	r1, r4
 8001174:	1a51      	subs	r1, r2, r1
 8001176:	6439      	str	r1, [r7, #64]	@ 0x40
 8001178:	4629      	mov	r1, r5
 800117a:	eb63 0301 	sbc.w	r3, r3, r1
 800117e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800118c:	4649      	mov	r1, r9
 800118e:	018b      	lsls	r3, r1, #6
 8001190:	4641      	mov	r1, r8
 8001192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001196:	4641      	mov	r1, r8
 8001198:	018a      	lsls	r2, r1, #6
 800119a:	4641      	mov	r1, r8
 800119c:	1a51      	subs	r1, r2, r1
 800119e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80011a0:	4649      	mov	r1, r9
 80011a2:	eb63 0301 	sbc.w	r3, r3, r1
 80011a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80011b4:	4649      	mov	r1, r9
 80011b6:	00cb      	lsls	r3, r1, #3
 80011b8:	4641      	mov	r1, r8
 80011ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011be:	4641      	mov	r1, r8
 80011c0:	00ca      	lsls	r2, r1, #3
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	4622      	mov	r2, r4
 80011ca:	189b      	adds	r3, r3, r2
 80011cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80011ce:	462b      	mov	r3, r5
 80011d0:	460a      	mov	r2, r1
 80011d2:	eb42 0303 	adc.w	r3, r2, r3
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80011e4:	4629      	mov	r1, r5
 80011e6:	024b      	lsls	r3, r1, #9
 80011e8:	4621      	mov	r1, r4
 80011ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80011ee:	4621      	mov	r1, r4
 80011f0:	024a      	lsls	r2, r1, #9
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011fa:	2200      	movs	r2, #0
 80011fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001204:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001208:	f7ff f852 	bl	80002b0 <__aeabi_uldivmod>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4613      	mov	r3, r2
 8001212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001216:	e067      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001218:	4b75      	ldr	r3, [pc, #468]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	2200      	movs	r2, #0
 8001220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001224:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001230:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001232:	2300      	movs	r3, #0
 8001234:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001236:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800123a:	4622      	mov	r2, r4
 800123c:	462b      	mov	r3, r5
 800123e:	f04f 0000 	mov.w	r0, #0
 8001242:	f04f 0100 	mov.w	r1, #0
 8001246:	0159      	lsls	r1, r3, #5
 8001248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800124c:	0150      	lsls	r0, r2, #5
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4621      	mov	r1, r4
 8001254:	1a51      	subs	r1, r2, r1
 8001256:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001258:	4629      	mov	r1, r5
 800125a:	eb63 0301 	sbc.w	r3, r3, r1
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800126c:	4649      	mov	r1, r9
 800126e:	018b      	lsls	r3, r1, #6
 8001270:	4641      	mov	r1, r8
 8001272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001276:	4641      	mov	r1, r8
 8001278:	018a      	lsls	r2, r1, #6
 800127a:	4641      	mov	r1, r8
 800127c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001280:	4649      	mov	r1, r9
 8001282:	eb63 0b01 	sbc.w	fp, r3, r1
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001292:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800129a:	4692      	mov	sl, r2
 800129c:	469b      	mov	fp, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	eb1a 0303 	adds.w	r3, sl, r3
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	462b      	mov	r3, r5
 80012a8:	eb4b 0303 	adc.w	r3, fp, r3
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80012ba:	4629      	mov	r1, r5
 80012bc:	028b      	lsls	r3, r1, #10
 80012be:	4621      	mov	r1, r4
 80012c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80012c4:	4621      	mov	r1, r4
 80012c6:	028a      	lsls	r2, r1, #10
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012d0:	2200      	movs	r2, #0
 80012d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80012d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80012d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012da:	f7fe ffe9 	bl	80002b0 <__aeabi_uldivmod>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4613      	mov	r3, r2
 80012e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80012e8:	4b41      	ldr	r3, [pc, #260]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	0c1b      	lsrs	r3, r3, #16
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	3301      	adds	r3, #1
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80012fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80012fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800130a:	e0eb      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800130c:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001318:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d06b      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001324:	4b32      	ldr	r3, [pc, #200]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	2200      	movs	r2, #0
 800132c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800132e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001336:	663b      	str	r3, [r7, #96]	@ 0x60
 8001338:	2300      	movs	r3, #0
 800133a:	667b      	str	r3, [r7, #100]	@ 0x64
 800133c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001340:	4622      	mov	r2, r4
 8001342:	462b      	mov	r3, r5
 8001344:	f04f 0000 	mov.w	r0, #0
 8001348:	f04f 0100 	mov.w	r1, #0
 800134c:	0159      	lsls	r1, r3, #5
 800134e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001352:	0150      	lsls	r0, r2, #5
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4621      	mov	r1, r4
 800135a:	1a51      	subs	r1, r2, r1
 800135c:	61b9      	str	r1, [r7, #24]
 800135e:	4629      	mov	r1, r5
 8001360:	eb63 0301 	sbc.w	r3, r3, r1
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001372:	4659      	mov	r1, fp
 8001374:	018b      	lsls	r3, r1, #6
 8001376:	4651      	mov	r1, sl
 8001378:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800137c:	4651      	mov	r1, sl
 800137e:	018a      	lsls	r2, r1, #6
 8001380:	4651      	mov	r1, sl
 8001382:	ebb2 0801 	subs.w	r8, r2, r1
 8001386:	4659      	mov	r1, fp
 8001388:	eb63 0901 	sbc.w	r9, r3, r1
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800139c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	4623      	mov	r3, r4
 80013a6:	eb18 0303 	adds.w	r3, r8, r3
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	462b      	mov	r3, r5
 80013ae:	eb49 0303 	adc.w	r3, r9, r3
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80013c0:	4629      	mov	r1, r5
 80013c2:	024b      	lsls	r3, r1, #9
 80013c4:	4621      	mov	r1, r4
 80013c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013ca:	4621      	mov	r1, r4
 80013cc:	024a      	lsls	r2, r1, #9
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013d6:	2200      	movs	r2, #0
 80013d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80013da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80013dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80013e0:	f7fe ff66 	bl	80002b0 <__aeabi_uldivmod>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4613      	mov	r3, r2
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013ee:	e065      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x420>
 80013f0:	40023800 	.word	0x40023800
 80013f4:	00f42400 	.word	0x00f42400
 80013f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fc:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	2200      	movs	r2, #0
 8001404:	4618      	mov	r0, r3
 8001406:	4611      	mov	r1, r2
 8001408:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800140c:	653b      	str	r3, [r7, #80]	@ 0x50
 800140e:	2300      	movs	r3, #0
 8001410:	657b      	str	r3, [r7, #84]	@ 0x54
 8001412:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001416:	4642      	mov	r2, r8
 8001418:	464b      	mov	r3, r9
 800141a:	f04f 0000 	mov.w	r0, #0
 800141e:	f04f 0100 	mov.w	r1, #0
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001428:	0150      	lsls	r0, r2, #5
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4641      	mov	r1, r8
 8001430:	1a51      	subs	r1, r2, r1
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	4649      	mov	r1, r9
 8001436:	eb63 0301 	sbc.w	r3, r3, r1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001448:	4659      	mov	r1, fp
 800144a:	018b      	lsls	r3, r1, #6
 800144c:	4651      	mov	r1, sl
 800144e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001452:	4651      	mov	r1, sl
 8001454:	018a      	lsls	r2, r1, #6
 8001456:	4651      	mov	r1, sl
 8001458:	1a54      	subs	r4, r2, r1
 800145a:	4659      	mov	r1, fp
 800145c:	eb63 0501 	sbc.w	r5, r3, r1
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	00eb      	lsls	r3, r5, #3
 800146a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800146e:	00e2      	lsls	r2, r4, #3
 8001470:	4614      	mov	r4, r2
 8001472:	461d      	mov	r5, r3
 8001474:	4643      	mov	r3, r8
 8001476:	18e3      	adds	r3, r4, r3
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	464b      	mov	r3, r9
 800147c:	eb45 0303 	adc.w	r3, r5, r3
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800148e:	4629      	mov	r1, r5
 8001490:	028b      	lsls	r3, r1, #10
 8001492:	4621      	mov	r1, r4
 8001494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001498:	4621      	mov	r1, r4
 800149a:	028a      	lsls	r2, r1, #10
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014a4:	2200      	movs	r2, #0
 80014a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80014aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80014ae:	f7fe feff 	bl	80002b0 <__aeabi_uldivmod>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4613      	mov	r3, r2
 80014b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	0f1b      	lsrs	r3, r3, #28
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80014ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014da:	e003      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80014de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	37b8      	adds	r7, #184	@ 0xb8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	00f42400 	.word	0x00f42400

080014fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e28d      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8083 	beq.w	8001622 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800151c:	4b94      	ldr	r3, [pc, #592]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	d019      	beq.n	800155c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001528:	4b91      	ldr	r3, [pc, #580]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001530:	2b08      	cmp	r3, #8
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001534:	4b8e      	ldr	r3, [pc, #568]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4b8b      	ldr	r3, [pc, #556]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d112      	bne.n	8001574 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b88      	ldr	r3, [pc, #544]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4b84      	ldr	r3, [pc, #528]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05b      	beq.n	8001620 <HAL_RCC_OscConfig+0x124>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d157      	bne.n	8001620 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e25a      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x90>
 800157e:	4b7c      	ldr	r3, [pc, #496]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7b      	ldr	r2, [pc, #492]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xcc>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0xb4>
 8001596:	4b76      	ldr	r3, [pc, #472]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a75      	ldr	r2, [pc, #468]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b73      	ldr	r3, [pc, #460]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a72      	ldr	r2, [pc, #456]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xcc>
 80015b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a6b      	ldr	r2, [pc, #428]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb3e 	bl	8000c50 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb3a 	bl	8000c50 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	@ 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e21f      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b61      	ldr	r3, [pc, #388]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xdc>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb2a 	bl	8000c50 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fb26 	bl	8000c50 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	@ 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e20b      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b57      	ldr	r3, [pc, #348]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x104>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d06f      	beq.n	800170e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800162e:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d017      	beq.n	800166a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800163a:	4b4d      	ldr	r3, [pc, #308]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001642:	2b08      	cmp	r3, #8
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001646:	4b4a      	ldr	r3, [pc, #296]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	4b47      	ldr	r3, [pc, #284]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800165a:	2b0c      	cmp	r3, #12
 800165c:	d11c      	bne.n	8001698 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165e:	4b44      	ldr	r3, [pc, #272]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	4b41      	ldr	r3, [pc, #260]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x186>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e1d3      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4937      	ldr	r1, [pc, #220]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	e03a      	b.n	800170e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a0:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <HAL_RCC_OscConfig+0x278>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7ff fad3 	bl	8000c50 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff facf 	bl	8000c50 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e1b4      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4925      	ldr	r1, [pc, #148]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e015      	b.n	800170e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_RCC_OscConfig+0x278>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fab2 	bl	8000c50 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff faae 	bl	8000c50 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e193      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d036      	beq.n	8001788 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d016      	beq.n	8001750 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_RCC_OscConfig+0x27c>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fa92 	bl	8000c50 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fa8e 	bl	8000c50 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e173      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_RCC_OscConfig+0x274>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x234>
 800174e:	e01b      	b.n	8001788 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_OscConfig+0x27c>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff fa7b 	bl	8000c50 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	e00e      	b.n	800177c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff fa77 	bl	8000c50 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d907      	bls.n	800177c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e15c      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
 8001770:	40023800 	.word	0x40023800
 8001774:	42470000 	.word	0x42470000
 8001778:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b8a      	ldr	r3, [pc, #552]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 800177e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ea      	bne.n	800175e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8097 	beq.w	80018c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179a:	4b83      	ldr	r3, [pc, #524]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10f      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b7f      	ldr	r3, [pc, #508]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	4a7e      	ldr	r2, [pc, #504]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b6:	4b7c      	ldr	r3, [pc, #496]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b79      	ldr	r3, [pc, #484]	@ (80019ac <HAL_RCC_OscConfig+0x4b0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	4b76      	ldr	r3, [pc, #472]	@ (80019ac <HAL_RCC_OscConfig+0x4b0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a75      	ldr	r2, [pc, #468]	@ (80019ac <HAL_RCC_OscConfig+0x4b0>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff fa37 	bl	8000c50 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fa33 	bl	8000c50 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e118      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b6c      	ldr	r3, [pc, #432]	@ (80019ac <HAL_RCC_OscConfig+0x4b0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x31e>
 800180c:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001810:	4a65      	ldr	r2, [pc, #404]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	@ 0x70
 8001818:	e01c      	b.n	8001854 <HAL_RCC_OscConfig+0x358>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x340>
 8001822:	4b61      	ldr	r3, [pc, #388]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001826:	4a60      	ldr	r2, [pc, #384]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6713      	str	r3, [r2, #112]	@ 0x70
 800182e:	4b5e      	ldr	r3, [pc, #376]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001832:	4a5d      	ldr	r2, [pc, #372]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6713      	str	r3, [r2, #112]	@ 0x70
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0x358>
 800183c:	4b5a      	ldr	r3, [pc, #360]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001840:	4a59      	ldr	r2, [pc, #356]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6713      	str	r3, [r2, #112]	@ 0x70
 8001848:	4b57      	ldr	r3, [pc, #348]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184c:	4a56      	ldr	r2, [pc, #344]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d015      	beq.n	8001888 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff f9f8 	bl	8000c50 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001862:	e00a      	b.n	800187a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7ff f9f4 	bl	8000c50 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e0d7      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187a:	4b4b      	ldr	r3, [pc, #300]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0ee      	beq.n	8001864 <HAL_RCC_OscConfig+0x368>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff f9e2 	bl	8000c50 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f7ff f9de 	bl	8000c50 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0c1      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a6:	4b40      	ldr	r3, [pc, #256]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1ee      	bne.n	8001890 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b8:	4b3b      	ldr	r3, [pc, #236]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	4a3a      	ldr	r2, [pc, #232]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 80018be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80ad 	beq.w	8001a28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ce:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d060      	beq.n	800199c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d145      	bne.n	800196e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e2:	4b33      	ldr	r3, [pc, #204]	@ (80019b0 <HAL_RCC_OscConfig+0x4b4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff f9b2 	bl	8000c50 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f9ae 	bl	8000c50 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e093      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	019b      	lsls	r3, r3, #6
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	3b01      	subs	r3, #1
 8001928:	041b      	lsls	r3, r3, #16
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001938:	071b      	lsls	r3, r3, #28
 800193a:	491b      	ldr	r1, [pc, #108]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_RCC_OscConfig+0x4b4>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff f983 	bl	8000c50 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff f97f 	bl	8000c50 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e064      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x452>
 800196c:	e05c      	b.n	8001a28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <HAL_RCC_OscConfig+0x4b4>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f96c 	bl	8000c50 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f968 	bl	8000c50 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e04d      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_RCC_OscConfig+0x4ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x480>
 800199a:	e045      	b.n	8001a28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e040      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000
 80019b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <HAL_RCC_OscConfig+0x538>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d030      	beq.n	8001a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d129      	bne.n	8001a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d122      	bne.n	8001a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d119      	bne.n	8001a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d10f      	bne.n	8001a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e041      	b.n	8001ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f839 	bl	8001ad6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3304      	adds	r3, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f000 f9c0 	bl	8001dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d001      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e04e      	b.n	8001ba2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a23      	ldr	r2, [pc, #140]	@ (8001bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d022      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b2e:	d01d      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d018      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1c      	ldr	r2, [pc, #112]	@ (8001bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00e      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d004      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d111      	bne.n	8001b90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d010      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8e:	e007      	b.n	8001ba0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	40000c00 	.word	0x40000c00
 8001bc0:	40010400 	.word	0x40010400
 8001bc4:	40014000 	.word	0x40014000
 8001bc8:	40001800 	.word	0x40001800

08001bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d020      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01b      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0202 	mvn.w	r2, #2
 8001c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8d2 	bl	8001dc0 <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8c4 	bl	8001dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f8d5 	bl	8001dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0204 	mvn.w	r2, #4
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2202      	movs	r2, #2
 8001c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8ac 	bl	8001dc0 <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f89e 	bl	8001dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8af 	bl	8001dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d020      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0208 	mvn.w	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f886 	bl	8001dc0 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f878 	bl	8001dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f889 	bl	8001dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d020      	beq.n	8001d14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0210 	mvn.w	r2, #16
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f860 	bl	8001dc0 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f852 	bl	8001dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f863 	bl	8001dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00c      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0201 	mvn.w	r2, #1
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe fdb4 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00c      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f906 	bl	8001f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f834 	bl	8001de8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00c      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0220 	mvn.w	r2, #32
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8d8 	bl	8001f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a46      	ldr	r2, [pc, #280]	@ (8001f28 <TIM_Base_SetConfig+0x12c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <TIM_Base_SetConfig+0x40>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1a:	d00f      	beq.n	8001e3c <TIM_Base_SetConfig+0x40>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a43      	ldr	r2, [pc, #268]	@ (8001f2c <TIM_Base_SetConfig+0x130>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00b      	beq.n	8001e3c <TIM_Base_SetConfig+0x40>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a42      	ldr	r2, [pc, #264]	@ (8001f30 <TIM_Base_SetConfig+0x134>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d007      	beq.n	8001e3c <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a41      	ldr	r2, [pc, #260]	@ (8001f34 <TIM_Base_SetConfig+0x138>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d003      	beq.n	8001e3c <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a40      	ldr	r2, [pc, #256]	@ (8001f38 <TIM_Base_SetConfig+0x13c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d108      	bne.n	8001e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a35      	ldr	r2, [pc, #212]	@ (8001f28 <TIM_Base_SetConfig+0x12c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02b      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5c:	d027      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <TIM_Base_SetConfig+0x130>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d023      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a31      	ldr	r2, [pc, #196]	@ (8001f30 <TIM_Base_SetConfig+0x134>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a30      	ldr	r2, [pc, #192]	@ (8001f34 <TIM_Base_SetConfig+0x138>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01b      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <TIM_Base_SetConfig+0x13c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d017      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2e      	ldr	r2, [pc, #184]	@ (8001f3c <TIM_Base_SetConfig+0x140>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2d      	ldr	r2, [pc, #180]	@ (8001f40 <TIM_Base_SetConfig+0x144>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00f      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a2c      	ldr	r2, [pc, #176]	@ (8001f44 <TIM_Base_SetConfig+0x148>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00b      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a2b      	ldr	r2, [pc, #172]	@ (8001f48 <TIM_Base_SetConfig+0x14c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d007      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <TIM_Base_SetConfig+0x150>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d003      	beq.n	8001eae <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a29      	ldr	r2, [pc, #164]	@ (8001f50 <TIM_Base_SetConfig+0x154>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d108      	bne.n	8001ec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a10      	ldr	r2, [pc, #64]	@ (8001f28 <TIM_Base_SetConfig+0x12c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d003      	beq.n	8001ef4 <TIM_Base_SetConfig+0xf8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <TIM_Base_SetConfig+0x13c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d103      	bne.n	8001efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f023 0201 	bic.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40000c00 	.word	0x40000c00
 8001f38:	40010400 	.word	0x40010400
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40014400 	.word	0x40014400
 8001f44:	40014800 	.word	0x40014800
 8001f48:	40001800 	.word	0x40001800
 8001f4c:	40001c00 	.word	0x40001c00
 8001f50:	40002000 	.word	0x40002000

08001f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f8e:	2b84      	cmp	r3, #132	@ 0x84
 8001f90:	d005      	beq.n	8001f9e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fb2:	f3ef 8305 	mrs	r3, IPSR
 8001fb6:	607b      	str	r3, [r7, #4]
  return(result);
 8001fb8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001fd4:	f000 fc3e 	bl	8002854 <vTaskStartScheduler>
  
  return osOK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8001fe2:	f7ff ffe3 	bl	8001fac <inHandlerMode>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8001fec:	f000 fd58 	bl	8002aa0 <xTaskGetTickCountFromISR>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	e002      	b.n	8001ffa <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8001ff4:	f000 fd44 	bl	8002a80 <xTaskGetTickCount>
 8001ff8:	4603      	mov	r3, r0
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002000:	b089      	sub	sp, #36	@ 0x24
 8002002:	af04      	add	r7, sp, #16
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <osThreadCreate+0x54>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01c      	beq.n	8002052 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685c      	ldr	r4, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691e      	ldr	r6, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ffa6 	bl	8001f7c <makeFreeRtosPriority>
 8002030:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800203a:	9202      	str	r2, [sp, #8]
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	9100      	str	r1, [sp, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4632      	mov	r2, r6
 8002044:	4629      	mov	r1, r5
 8002046:	4620      	mov	r0, r4
 8002048:	f000 f90f 	bl	800226a <xTaskCreateStatic>
 800204c:	4603      	mov	r3, r0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e01c      	b.n	800208c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685c      	ldr	r4, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800205e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff88 	bl	8001f7c <makeFreeRtosPriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	9200      	str	r2, [sp, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4632      	mov	r2, r6
 800207a:	4629      	mov	r1, r5
 800207c:	4620      	mov	r0, r4
 800207e:	f000 f954 	bl	800232a <xTaskCreate>
 8002082:	4603      	mov	r3, r0
 8002084:	2b01      	cmp	r3, #1
 8002086:	d001      	beq.n	800208c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002096 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa92 	bl	80025c8 <vTaskDelete>
  return osOK;
 80020a4:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <osDelay+0x16>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	e000      	b.n	80020c6 <osDelay+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fb8e 	bl	80027e8 <vTaskDelay>
  
  return osOK;
 80020cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <osDelayUntil+0x18>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	e000      	b.n	80020f0 <osDelayUntil+0x1a>
 80020ee:	2301      	movs	r3, #1
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 faf8 	bl	80026e8 <vTaskDelayUntil>
  
  return osOK;
 80020f8:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 0208 	add.w	r2, r3, #8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0208 	add.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f103 0208 	add.w	r2, r3, #8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d103      	bne.n	80021c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e00c      	b.n	80021de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3308      	adds	r3, #8
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e002      	b.n	80021d2 <vListInsert+0x2e>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d2f6      	bcs.n	80021cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	601a      	str	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6892      	ldr	r2, [r2, #8]
 800222c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6852      	ldr	r2, [r2, #4]
 8002236:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	d103      	bne.n	800224a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08e      	sub	sp, #56	@ 0x38
 800226e:	af04      	add	r7, sp, #16
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10b      	bne.n	8002296 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800227e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	e7fd      	b.n	8002292 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10b      	bne.n	80022b4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800229c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	61fb      	str	r3, [r7, #28]
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80022b4:	23a0      	movs	r3, #160	@ 0xa0
 80022b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80022bc:	d00b      	beq.n	80022d6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	61bb      	str	r3, [r7, #24]
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	e7fd      	b.n	80022d2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80022d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80022d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01e      	beq.n	800231c <xTaskCreateStatic+0xb2>
 80022de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022f6:	2300      	movs	r3, #0
 80022f8:	9303      	str	r3, [sp, #12]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f850 	bl	80023b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002314:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002316:	f000 f8ed 	bl	80024f4 <prvAddNewTaskToReadyList>
 800231a:	e001      	b.n	8002320 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002320:	697b      	ldr	r3, [r7, #20]
	}
 8002322:	4618      	mov	r0, r3
 8002324:	3728      	adds	r7, #40	@ 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800232a:	b580      	push	{r7, lr}
 800232c:	b08c      	sub	sp, #48	@ 0x30
 800232e:	af04      	add	r7, sp, #16
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f874 	bl	800342c <pvPortMalloc>
 8002344:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00e      	beq.n	800236a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800234c:	20a0      	movs	r0, #160	@ 0xa0
 800234e:	f001 f86d 	bl	800342c <pvPortMalloc>
 8002352:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002360:	e005      	b.n	800236e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002362:	6978      	ldr	r0, [r7, #20]
 8002364:	f001 f930 	bl	80035c8 <vPortFree>
 8002368:	e001      	b.n	800236e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d017      	beq.n	80023a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	2300      	movs	r3, #0
 8002380:	9303      	str	r3, [sp, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f80e 	bl	80023b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002398:	69f8      	ldr	r0, [r7, #28]
 800239a:	f000 f8ab 	bl	80024f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	e002      	b.n	80023aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295
 80023a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023aa:	69bb      	ldr	r3, [r7, #24]
	}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023cc:	3b01      	subs	r3, #1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f023 0307 	bic.w	r3, r3, #7
 80023da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <prvInitialiseNewTask+0x4a>
	__asm volatile
 80023e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ea:	f383 8811 	msr	BASEPRI, r3
 80023ee:	f3bf 8f6f 	isb	sy
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	617b      	str	r3, [r7, #20]
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	e7fd      	b.n	80023fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01f      	beq.n	8002444 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	e012      	b.n	8002430 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	7819      	ldrb	r1, [r3, #0]
 8002412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	3334      	adds	r3, #52	@ 0x34
 800241a:	460a      	mov	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	d9e9      	bls.n	800240a <prvInitialiseNewTask+0x56>
 8002436:	e000      	b.n	800243a <prvInitialiseNewTask+0x86>
			{
				break;
 8002438:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002442:	e003      	b.n	800244c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	2b06      	cmp	r3, #6
 8002450:	d901      	bls.n	8002456 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002452:	2306      	movs	r3, #6
 8002454:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002458:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800245a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	3304      	adds	r3, #4
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe68 	bl	8002142 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	3318      	adds	r3, #24
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fe63 	bl	8002142 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002480:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002484:	f1c3 0207 	rsb	r2, r3, #7
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	2200      	movs	r2, #0
 8002496:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249c:	2200      	movs	r2, #0
 800249e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80024a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a4:	334c      	adds	r3, #76	@ 0x4c
 80024a6:	224c      	movs	r2, #76	@ 0x4c
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 fbb6 	bl	8003c1c <memset>
 80024b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b2:	4a0d      	ldr	r2, [pc, #52]	@ (80024e8 <prvInitialiseNewTask+0x134>)
 80024b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	4a0c      	ldr	r2, [pc, #48]	@ (80024ec <prvInitialiseNewTask+0x138>)
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80024bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024be:	4a0c      	ldr	r2, [pc, #48]	@ (80024f0 <prvInitialiseNewTask+0x13c>)
 80024c0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	68f9      	ldr	r1, [r7, #12]
 80024c6:	69b8      	ldr	r0, [r7, #24]
 80024c8:	f000 fd5c 	bl	8002f84 <pxPortInitialiseStack>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80024d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200040d8 	.word	0x200040d8
 80024ec:	20004140 	.word	0x20004140
 80024f0:	200041a8 	.word	0x200041a8

080024f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024fc:	f000 fe74 	bl	80031e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002500:	4b2a      	ldr	r3, [pc, #168]	@ (80025ac <prvAddNewTaskToReadyList+0xb8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	4a29      	ldr	r2, [pc, #164]	@ (80025ac <prvAddNewTaskToReadyList+0xb8>)
 8002508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800250a:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <prvAddNewTaskToReadyList+0xbc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002512:	4a27      	ldr	r2, [pc, #156]	@ (80025b0 <prvAddNewTaskToReadyList+0xbc>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002518:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <prvAddNewTaskToReadyList+0xb8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d110      	bne.n	8002542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002520:	f000 fc06 	bl	8002d30 <prvInitialiseTaskLists>
 8002524:	e00d      	b.n	8002542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002526:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <prvAddNewTaskToReadyList+0xc0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <prvAddNewTaskToReadyList+0xbc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	429a      	cmp	r2, r3
 800253a:	d802      	bhi.n	8002542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800253c:	4a1c      	ldr	r2, [pc, #112]	@ (80025b0 <prvAddNewTaskToReadyList+0xbc>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002542:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <prvAddNewTaskToReadyList+0xc4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <prvAddNewTaskToReadyList+0xc4>)
 800254a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <prvAddNewTaskToReadyList+0xc8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4313      	orrs	r3, r2
 800255a:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <prvAddNewTaskToReadyList+0xc8>)
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4a15      	ldr	r2, [pc, #84]	@ (80025c0 <prvAddNewTaskToReadyList+0xcc>)
 800256c:	441a      	add	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7ff fdf1 	bl	800215c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800257a:	f000 fe67 	bl	800324c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <prvAddNewTaskToReadyList+0xc0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00e      	beq.n	80025a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <prvAddNewTaskToReadyList+0xbc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	429a      	cmp	r2, r3
 8002592:	d207      	bcs.n	80025a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <prvAddNewTaskToReadyList+0xd0>)
 8002596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000484 	.word	0x20000484
 80025b0:	20000384 	.word	0x20000384
 80025b4:	20000490 	.word	0x20000490
 80025b8:	200004a0 	.word	0x200004a0
 80025bc:	2000048c 	.word	0x2000048c
 80025c0:	20000388 	.word	0x20000388
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80025d0:	f000 fe0a 	bl	80031e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <vTaskDelete+0x18>
 80025da:	4b39      	ldr	r3, [pc, #228]	@ (80026c0 <vTaskDelete+0xf8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	e000      	b.n	80025e2 <vTaskDelete+0x1a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fe14 	bl	8002216 <uxListRemove>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d115      	bne.n	8002620 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f8:	4932      	ldr	r1, [pc, #200]	@ (80026c4 <vTaskDelete+0xfc>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <vTaskDelete+0x58>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260e:	2201      	movs	r2, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43da      	mvns	r2, r3
 8002616:	4b2c      	ldr	r3, [pc, #176]	@ (80026c8 <vTaskDelete+0x100>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4013      	ands	r3, r2
 800261c:	4a2a      	ldr	r2, [pc, #168]	@ (80026c8 <vTaskDelete+0x100>)
 800261e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3318      	adds	r3, #24
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fdf2 	bl	8002216 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002632:	4b26      	ldr	r3, [pc, #152]	@ (80026cc <vTaskDelete+0x104>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	4a24      	ldr	r2, [pc, #144]	@ (80026cc <vTaskDelete+0x104>)
 800263a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800263c:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <vTaskDelete+0xf8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	429a      	cmp	r2, r3
 8002644:	d10b      	bne.n	800265e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3304      	adds	r3, #4
 800264a:	4619      	mov	r1, r3
 800264c:	4820      	ldr	r0, [pc, #128]	@ (80026d0 <vTaskDelete+0x108>)
 800264e:	f7ff fd85 	bl	800215c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002652:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <vTaskDelete+0x10c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a1e      	ldr	r2, [pc, #120]	@ (80026d4 <vTaskDelete+0x10c>)
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	e009      	b.n	8002672 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800265e:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <vTaskDelete+0x110>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3b01      	subs	r3, #1
 8002664:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <vTaskDelete+0x110>)
 8002666:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fbcf 	bl	8002e0c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800266e:	f000 fc03 	bl	8002e78 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002672:	f000 fdeb 	bl	800324c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002676:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <vTaskDelete+0x114>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01c      	beq.n	80026b8 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800267e:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <vTaskDelete+0xf8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d117      	bne.n	80026b8 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002688:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <vTaskDelete+0x118>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <vTaskDelete+0xe0>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	60bb      	str	r3, [r7, #8]
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80026a8:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <vTaskDelete+0x11c>)
 80026aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000384 	.word	0x20000384
 80026c4:	20000388 	.word	0x20000388
 80026c8:	2000048c 	.word	0x2000048c
 80026cc:	200004a0 	.word	0x200004a0
 80026d0:	20000458 	.word	0x20000458
 80026d4:	2000046c 	.word	0x2000046c
 80026d8:	20000484 	.word	0x20000484
 80026dc:	20000490 	.word	0x20000490
 80026e0:	200004ac 	.word	0x200004ac
 80026e4:	e000ed04 	.word	0xe000ed04

080026e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	@ 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <vTaskDelayUntil+0x2c>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	617b      	str	r3, [r7, #20]
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <vTaskDelayUntil+0x4a>
	__asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	613b      	str	r3, [r7, #16]
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8002732:	4b2a      	ldr	r3, [pc, #168]	@ (80027dc <vTaskDelayUntil+0xf4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <vTaskDelayUntil+0x6a>
	__asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	60fb      	str	r3, [r7, #12]
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	e7fd      	b.n	800274e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8002752:	f000 f8e9 	bl	8002928 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002756:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <vTaskDelayUntil+0xf8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4413      	add	r3, r2
 8002764:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a3a      	ldr	r2, [r7, #32]
 800276c:	429a      	cmp	r2, r3
 800276e:	d20b      	bcs.n	8002788 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	429a      	cmp	r2, r3
 8002778:	d211      	bcs.n	800279e <vTaskDelayUntil+0xb6>
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	429a      	cmp	r2, r3
 8002780:	d90d      	bls.n	800279e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8002782:	2301      	movs	r3, #1
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
 8002786:	e00a      	b.n	800279e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	429a      	cmp	r2, r3
 8002790:	d303      	bcc.n	800279a <vTaskDelayUntil+0xb2>
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	429a      	cmp	r2, r3
 8002798:	d901      	bls.n	800279e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800279a:	2301      	movs	r3, #1
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fb80 	bl	8002eb8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80027b8:	f000 f8c4 	bl	8002944 <xTaskResumeAll>
 80027bc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80027c4:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <vTaskDelayUntil+0xfc>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027d4:	bf00      	nop
 80027d6:	3728      	adds	r7, #40	@ 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200004ac 	.word	0x200004ac
 80027e0:	20000488 	.word	0x20000488
 80027e4:	e000ed04 	.word	0xe000ed04

080027e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d018      	beq.n	800282c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80027fa:	4b14      	ldr	r3, [pc, #80]	@ (800284c <vTaskDelay+0x64>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <vTaskDelay+0x32>
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	60bb      	str	r3, [r7, #8]
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	e7fd      	b.n	8002816 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800281a:	f000 f885 	bl	8002928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800281e:	2100      	movs	r1, #0
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fb49 	bl	8002eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002826:	f000 f88d 	bl	8002944 <xTaskResumeAll>
 800282a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <vTaskDelay+0x68>)
 8002834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200004ac 	.word	0x200004ac
 8002850:	e000ed04 	.word	0xe000ed04

08002854 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	@ 0x28
 8002858:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002862:	463a      	mov	r2, r7
 8002864:	1d39      	adds	r1, r7, #4
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe98 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	9202      	str	r2, [sp, #8]
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	2300      	movs	r3, #0
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2300      	movs	r3, #0
 8002880:	460a      	mov	r2, r1
 8002882:	4921      	ldr	r1, [pc, #132]	@ (8002908 <vTaskStartScheduler+0xb4>)
 8002884:	4821      	ldr	r0, [pc, #132]	@ (800290c <vTaskStartScheduler+0xb8>)
 8002886:	f7ff fcf0 	bl	800226a <xTaskCreateStatic>
 800288a:	4603      	mov	r3, r0
 800288c:	4a20      	ldr	r2, [pc, #128]	@ (8002910 <vTaskStartScheduler+0xbc>)
 800288e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002890:	4b1f      	ldr	r3, [pc, #124]	@ (8002910 <vTaskStartScheduler+0xbc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002898:	2301      	movs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	e001      	b.n	80028a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d11b      	bne.n	80028e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	613b      	str	r3, [r7, #16]
}
 80028ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80028bc:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <vTaskStartScheduler+0xc0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	334c      	adds	r3, #76	@ 0x4c
 80028c2:	4a15      	ldr	r2, [pc, #84]	@ (8002918 <vTaskStartScheduler+0xc4>)
 80028c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <vTaskStartScheduler+0xc8>)
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028ce:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <vTaskStartScheduler+0xcc>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <vTaskStartScheduler+0xd0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80028da:	f000 fbe1 	bl	80030a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80028de:	e00f      	b.n	8002900 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d10b      	bne.n	8002900 <vTaskStartScheduler+0xac>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	60fb      	str	r3, [r7, #12]
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <vTaskStartScheduler+0xa8>
}
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	08004898 	.word	0x08004898
 800290c:	08002d01 	.word	0x08002d01
 8002910:	200004a8 	.word	0x200004a8
 8002914:	20000384 	.word	0x20000384
 8002918:	2000001c 	.word	0x2000001c
 800291c:	200004a4 	.word	0x200004a4
 8002920:	20000490 	.word	0x20000490
 8002924:	20000488 	.word	0x20000488

08002928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <vTaskSuspendAll+0x18>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	4a03      	ldr	r2, [pc, #12]	@ (8002940 <vTaskSuspendAll+0x18>)
 8002934:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	200004ac 	.word	0x200004ac

08002944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002952:	4b42      	ldr	r3, [pc, #264]	@ (8002a5c <xTaskResumeAll+0x118>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10b      	bne.n	8002972 <xTaskResumeAll+0x2e>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	603b      	str	r3, [r7, #0]
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002972:	f000 fc39 	bl	80031e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002976:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <xTaskResumeAll+0x118>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3b01      	subs	r3, #1
 800297c:	4a37      	ldr	r2, [pc, #220]	@ (8002a5c <xTaskResumeAll+0x118>)
 800297e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002980:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <xTaskResumeAll+0x118>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d161      	bne.n	8002a4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002988:	4b35      	ldr	r3, [pc, #212]	@ (8002a60 <xTaskResumeAll+0x11c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05d      	beq.n	8002a4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002990:	e02e      	b.n	80029f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002992:	4b34      	ldr	r3, [pc, #208]	@ (8002a64 <xTaskResumeAll+0x120>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3318      	adds	r3, #24
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fc39 	bl	8002216 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fc34 	bl	8002216 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	2201      	movs	r2, #1
 80029b4:	409a      	lsls	r2, r3
 80029b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <xTaskResumeAll+0x124>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a68 <xTaskResumeAll+0x124>)
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4a27      	ldr	r2, [pc, #156]	@ (8002a6c <xTaskResumeAll+0x128>)
 80029ce:	441a      	add	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3304      	adds	r3, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	4610      	mov	r0, r2
 80029d8:	f7ff fbc0 	bl	800215c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e0:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <xTaskResumeAll+0x12c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80029ea:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <xTaskResumeAll+0x130>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <xTaskResumeAll+0x120>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1cc      	bne.n	8002992 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80029fe:	f000 fa3b 	bl	8002e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a02:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <xTaskResumeAll+0x134>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a0e:	f000 f859 	bl	8002ac4 <xTaskIncrementTick>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002a18:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <xTaskResumeAll+0x130>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f1      	bne.n	8002a0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002a2a:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <xTaskResumeAll+0x134>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a30:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <xTaskResumeAll+0x130>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <xTaskResumeAll+0x138>)
 8002a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a4c:	f000 fbfe 	bl	800324c <vPortExitCritical>

	return xAlreadyYielded;
 8002a50:	68bb      	ldr	r3, [r7, #8]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200004ac 	.word	0x200004ac
 8002a60:	20000484 	.word	0x20000484
 8002a64:	20000444 	.word	0x20000444
 8002a68:	2000048c 	.word	0x2000048c
 8002a6c:	20000388 	.word	0x20000388
 8002a70:	20000384 	.word	0x20000384
 8002a74:	20000498 	.word	0x20000498
 8002a78:	20000494 	.word	0x20000494
 8002a7c:	e000ed04 	.word	0xe000ed04

08002a80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002a86:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <xTaskGetTickCount+0x1c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000488 	.word	0x20000488

08002aa0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aa6:	f000 fc7f 	bl	80033a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002aae:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <xTaskGetTickCountFromISR+0x20>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ab4:	683b      	ldr	r3, [r7, #0]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000488 	.word	0x20000488

08002ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ace:	4b4f      	ldr	r3, [pc, #316]	@ (8002c0c <xTaskIncrementTick+0x148>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 808f 	bne.w	8002bf6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c10 <xTaskIncrementTick+0x14c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c10 <xTaskIncrementTick+0x14c>)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d121      	bne.n	8002b30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002aec:	4b49      	ldr	r3, [pc, #292]	@ (8002c14 <xTaskIncrementTick+0x150>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	603b      	str	r3, [r7, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	e7fd      	b.n	8002b0a <xTaskIncrementTick+0x46>
 8002b0e:	4b41      	ldr	r3, [pc, #260]	@ (8002c14 <xTaskIncrementTick+0x150>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	4b40      	ldr	r3, [pc, #256]	@ (8002c18 <xTaskIncrementTick+0x154>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a3e      	ldr	r2, [pc, #248]	@ (8002c14 <xTaskIncrementTick+0x150>)
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8002c18 <xTaskIncrementTick+0x154>)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b3e      	ldr	r3, [pc, #248]	@ (8002c1c <xTaskIncrementTick+0x158>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	4a3c      	ldr	r2, [pc, #240]	@ (8002c1c <xTaskIncrementTick+0x158>)
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	f000 f9a4 	bl	8002e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b30:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <xTaskIncrementTick+0x15c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d348      	bcc.n	8002bcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b3a:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <xTaskIncrementTick+0x150>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b44:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <xTaskIncrementTick+0x15c>)
 8002b46:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4a:	601a      	str	r2, [r3, #0]
					break;
 8002b4c:	e03e      	b.n	8002bcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b4e:	4b31      	ldr	r3, [pc, #196]	@ (8002c14 <xTaskIncrementTick+0x150>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d203      	bcs.n	8002b6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b66:	4a2e      	ldr	r2, [pc, #184]	@ (8002c20 <xTaskIncrementTick+0x15c>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b6c:	e02e      	b.n	8002bcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3304      	adds	r3, #4
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fb4f 	bl	8002216 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	3318      	adds	r3, #24
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fb46 	bl	8002216 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <xTaskIncrementTick+0x160>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <xTaskIncrementTick+0x160>)
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c28 <xTaskIncrementTick+0x164>)
 8002baa:	441a      	add	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7ff fad2 	bl	800215c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <xTaskIncrementTick+0x168>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3b9      	bcc.n	8002b3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bca:	e7b6      	b.n	8002b3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bcc:	4b17      	ldr	r3, [pc, #92]	@ (8002c2c <xTaskIncrementTick+0x168>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd2:	4915      	ldr	r1, [pc, #84]	@ (8002c28 <xTaskIncrementTick+0x164>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d901      	bls.n	8002be8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002be8:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <xTaskIncrementTick+0x16c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e004      	b.n	8002c00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <xTaskIncrementTick+0x170>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c34 <xTaskIncrementTick+0x170>)
 8002bfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c00:	697b      	ldr	r3, [r7, #20]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200004ac 	.word	0x200004ac
 8002c10:	20000488 	.word	0x20000488
 8002c14:	2000043c 	.word	0x2000043c
 8002c18:	20000440 	.word	0x20000440
 8002c1c:	2000049c 	.word	0x2000049c
 8002c20:	200004a4 	.word	0x200004a4
 8002c24:	2000048c 	.word	0x2000048c
 8002c28:	20000388 	.word	0x20000388
 8002c2c:	20000384 	.word	0x20000384
 8002c30:	20000498 	.word	0x20000498
 8002c34:	20000494 	.word	0x20000494

08002c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce8 <vTaskSwitchContext+0xb0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c46:	4b29      	ldr	r3, [pc, #164]	@ (8002cec <vTaskSwitchContext+0xb4>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c4c:	e045      	b.n	8002cda <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002c4e:	4b27      	ldr	r3, [pc, #156]	@ (8002cec <vTaskSwitchContext+0xb4>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c54:	4b26      	ldr	r3, [pc, #152]	@ (8002cf0 <vTaskSwitchContext+0xb8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	f1c3 031f 	rsb	r3, r3, #31
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	4922      	ldr	r1, [pc, #136]	@ (8002cf4 <vTaskSwitchContext+0xbc>)
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <vTaskSwitchContext+0x5e>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	607b      	str	r3, [r7, #4]
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	e7fd      	b.n	8002c92 <vTaskSwitchContext+0x5a>
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <vTaskSwitchContext+0xbc>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d104      	bne.n	8002cc6 <vTaskSwitchContext+0x8e>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf8 <vTaskSwitchContext+0xc0>)
 8002cce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <vTaskSwitchContext+0xc0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	334c      	adds	r3, #76	@ 0x4c
 8002cd6:	4a09      	ldr	r2, [pc, #36]	@ (8002cfc <vTaskSwitchContext+0xc4>)
 8002cd8:	6013      	str	r3, [r2, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	200004ac 	.word	0x200004ac
 8002cec:	20000498 	.word	0x20000498
 8002cf0:	2000048c 	.word	0x2000048c
 8002cf4:	20000388 	.word	0x20000388
 8002cf8:	20000384 	.word	0x20000384
 8002cfc:	2000001c 	.word	0x2000001c

08002d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002d08:	f000 f852 	bl	8002db0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <prvIdleTask+0x28>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d9f9      	bls.n	8002d08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <prvIdleTask+0x2c>)
 8002d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002d24:	e7f0      	b.n	8002d08 <prvIdleTask+0x8>
 8002d26:	bf00      	nop
 8002d28:	20000388 	.word	0x20000388
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	e00c      	b.n	8002d56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <prvInitialiseTaskLists+0x60>)
 8002d48:	4413      	add	r3, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f9d9 	bl	8002102 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d9ef      	bls.n	8002d3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d5c:	480d      	ldr	r0, [pc, #52]	@ (8002d94 <prvInitialiseTaskLists+0x64>)
 8002d5e:	f7ff f9d0 	bl	8002102 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d62:	480d      	ldr	r0, [pc, #52]	@ (8002d98 <prvInitialiseTaskLists+0x68>)
 8002d64:	f7ff f9cd 	bl	8002102 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d68:	480c      	ldr	r0, [pc, #48]	@ (8002d9c <prvInitialiseTaskLists+0x6c>)
 8002d6a:	f7ff f9ca 	bl	8002102 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d6e:	480c      	ldr	r0, [pc, #48]	@ (8002da0 <prvInitialiseTaskLists+0x70>)
 8002d70:	f7ff f9c7 	bl	8002102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d74:	480b      	ldr	r0, [pc, #44]	@ (8002da4 <prvInitialiseTaskLists+0x74>)
 8002d76:	f7ff f9c4 	bl	8002102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <prvInitialiseTaskLists+0x78>)
 8002d7c:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <prvInitialiseTaskLists+0x64>)
 8002d7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d80:	4b0a      	ldr	r3, [pc, #40]	@ (8002dac <prvInitialiseTaskLists+0x7c>)
 8002d82:	4a05      	ldr	r2, [pc, #20]	@ (8002d98 <prvInitialiseTaskLists+0x68>)
 8002d84:	601a      	str	r2, [r3, #0]
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000388 	.word	0x20000388
 8002d94:	20000414 	.word	0x20000414
 8002d98:	20000428 	.word	0x20000428
 8002d9c:	20000444 	.word	0x20000444
 8002da0:	20000458 	.word	0x20000458
 8002da4:	20000470 	.word	0x20000470
 8002da8:	2000043c 	.word	0x2000043c
 8002dac:	20000440 	.word	0x20000440

08002db0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002db6:	e019      	b.n	8002dec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002db8:	f000 fa16 	bl	80031e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dbc:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <prvCheckTasksWaitingTermination+0x50>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fa24 	bl	8002216 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <prvCheckTasksWaitingTermination+0x54>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002e04 <prvCheckTasksWaitingTermination+0x54>)
 8002dd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <prvCheckTasksWaitingTermination+0x58>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <prvCheckTasksWaitingTermination+0x58>)
 8002de0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002de2:	f000 fa33 	bl	800324c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f810 	bl	8002e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <prvCheckTasksWaitingTermination+0x58>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e1      	bne.n	8002db8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000458 	.word	0x20000458
 8002e04:	20000484 	.word	0x20000484
 8002e08:	2000046c 	.word	0x2000046c

08002e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	334c      	adds	r3, #76	@ 0x4c
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 ff17 	bl	8003c4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d108      	bne.n	8002e3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fbcb 	bl	80035c8 <vPortFree>
				vPortFree( pxTCB );
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fbc8 	bl	80035c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e38:	e019      	b.n	8002e6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d103      	bne.n	8002e4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fbbf 	bl	80035c8 <vPortFree>
	}
 8002e4a:	e010      	b.n	8002e6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d00b      	beq.n	8002e6e <prvDeleteTCB+0x62>
	__asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	60fb      	str	r3, [r7, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	e7fd      	b.n	8002e6a <prvDeleteTCB+0x5e>
	}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <prvResetNextTaskUnblockTime+0x38>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d104      	bne.n	8002e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e88:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8002e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e90:	e008      	b.n	8002ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e92:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <prvResetNextTaskUnblockTime+0x38>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	2000043c 	.word	0x2000043c
 8002eb4:	200004a4 	.word	0x200004a4

08002eb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ec2:	4b29      	ldr	r3, [pc, #164]	@ (8002f68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ec8:	4b28      	ldr	r3, [pc, #160]	@ (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f9a1 	bl	8002216 <uxListRemove>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002eda:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4013      	ands	r3, r2
 8002eee:	4a20      	ldr	r2, [pc, #128]	@ (8002f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ef0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d10a      	bne.n	8002f10 <prvAddCurrentTaskToDelayedList+0x58>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	481a      	ldr	r0, [pc, #104]	@ (8002f74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002f0a:	f7ff f927 	bl	800215c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f0e:	e026      	b.n	8002f5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d209      	bcs.n	8002f3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f28:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3304      	adds	r3, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f7ff f935 	bl	80021a4 <vListInsert>
}
 8002f3a:	e010      	b.n	8002f5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b0a      	ldr	r3, [pc, #40]	@ (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f7ff f92b 	bl	80021a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d202      	bcs.n	8002f5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002f58:	4a09      	ldr	r2, [pc, #36]	@ (8002f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6013      	str	r3, [r2, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000488 	.word	0x20000488
 8002f6c:	20000384 	.word	0x20000384
 8002f70:	2000048c 	.word	0x2000048c
 8002f74:	20000470 	.word	0x20000470
 8002f78:	20000440 	.word	0x20000440
 8002f7c:	2000043c 	.word	0x2000043c
 8002f80:	200004a4 	.word	0x200004a4

08002f84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3b04      	subs	r3, #4
 8002f94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3b04      	subs	r3, #4
 8002fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 0201 	bic.w	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3b04      	subs	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe8 <pxPortInitialiseStack+0x64>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3b14      	subs	r3, #20
 8002fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b04      	subs	r3, #4
 8002fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f06f 0202 	mvn.w	r2, #2
 8002fd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3b20      	subs	r3, #32
 8002fd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	08002fed 	.word	0x08002fed

08002fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ff6:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <prvTaskExitError+0x58>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d00b      	beq.n	8003018 <prvTaskExitError+0x2c>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	60fb      	str	r3, [r7, #12]
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <prvTaskExitError+0x28>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	60bb      	str	r3, [r7, #8]
}
 800302a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800302c:	bf00      	nop
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0fc      	beq.n	800302e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	2000000c 	.word	0x2000000c
	...

08003050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003050:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <pxCurrentTCBConst2>)
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	6808      	ldr	r0, [r1, #0]
 8003056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305a:	f380 8809 	msr	PSP, r0
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8811 	msr	BASEPRI, r0
 800306a:	4770      	bx	lr
 800306c:	f3af 8000 	nop.w

08003070 <pxCurrentTCBConst2>:
 8003070:	20000384 	.word	0x20000384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop

08003078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003078:	4808      	ldr	r0, [pc, #32]	@ (800309c <prvPortStartFirstTask+0x24>)
 800307a:	6800      	ldr	r0, [r0, #0]
 800307c:	6800      	ldr	r0, [r0, #0]
 800307e:	f380 8808 	msr	MSP, r0
 8003082:	f04f 0000 	mov.w	r0, #0
 8003086:	f380 8814 	msr	CONTROL, r0
 800308a:	b662      	cpsie	i
 800308c:	b661      	cpsie	f
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	df00      	svc	0
 8003098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800309a:	bf00      	nop
 800309c:	e000ed08 	.word	0xe000ed08

080030a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030a6:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <xPortStartScheduler+0x124>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a47      	ldr	r2, [pc, #284]	@ (80031c8 <xPortStartScheduler+0x128>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10b      	bne.n	80030c8 <xPortStartScheduler+0x28>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	613b      	str	r3, [r7, #16]
}
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030c8:	4b3e      	ldr	r3, [pc, #248]	@ (80031c4 <xPortStartScheduler+0x124>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a3f      	ldr	r2, [pc, #252]	@ (80031cc <xPortStartScheduler+0x12c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10b      	bne.n	80030ea <xPortStartScheduler+0x4a>
	__asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	60fb      	str	r3, [r7, #12]
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	e7fd      	b.n	80030e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030ea:	4b39      	ldr	r3, [pc, #228]	@ (80031d0 <xPortStartScheduler+0x130>)
 80030ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	22ff      	movs	r2, #255	@ 0xff
 80030fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4b31      	ldr	r3, [pc, #196]	@ (80031d4 <xPortStartScheduler+0x134>)
 8003110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003112:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <xPortStartScheduler+0x138>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003118:	e009      	b.n	800312e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800311a:	4b2f      	ldr	r3, [pc, #188]	@ (80031d8 <xPortStartScheduler+0x138>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3b01      	subs	r3, #1
 8003120:	4a2d      	ldr	r2, [pc, #180]	@ (80031d8 <xPortStartScheduler+0x138>)
 8003122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003136:	2b80      	cmp	r3, #128	@ 0x80
 8003138:	d0ef      	beq.n	800311a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800313a:	4b27      	ldr	r3, [pc, #156]	@ (80031d8 <xPortStartScheduler+0x138>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f1c3 0307 	rsb	r3, r3, #7
 8003142:	2b04      	cmp	r3, #4
 8003144:	d00b      	beq.n	800315e <xPortStartScheduler+0xbe>
	__asm volatile
 8003146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	60bb      	str	r3, [r7, #8]
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	e7fd      	b.n	800315a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800315e:	4b1e      	ldr	r3, [pc, #120]	@ (80031d8 <xPortStartScheduler+0x138>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <xPortStartScheduler+0x138>)
 8003166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <xPortStartScheduler+0x138>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003170:	4a19      	ldr	r2, [pc, #100]	@ (80031d8 <xPortStartScheduler+0x138>)
 8003172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800317c:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <xPortStartScheduler+0x13c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a16      	ldr	r2, [pc, #88]	@ (80031dc <xPortStartScheduler+0x13c>)
 8003182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003188:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <xPortStartScheduler+0x13c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <xPortStartScheduler+0x13c>)
 800318e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003194:	f000 f8da 	bl	800334c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <xPortStartScheduler+0x140>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800319e:	f000 f8f9 	bl	8003394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80031a2:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <xPortStartScheduler+0x144>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0f      	ldr	r2, [pc, #60]	@ (80031e4 <xPortStartScheduler+0x144>)
 80031a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80031ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80031ae:	f7ff ff63 	bl	8003078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80031b2:	f7ff fd41 	bl	8002c38 <vTaskSwitchContext>
	prvTaskExitError();
 80031b6:	f7ff ff19 	bl	8002fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	e000ed00 	.word	0xe000ed00
 80031c8:	410fc271 	.word	0x410fc271
 80031cc:	410fc270 	.word	0x410fc270
 80031d0:	e000e400 	.word	0xe000e400
 80031d4:	200004b0 	.word	0x200004b0
 80031d8:	200004b4 	.word	0x200004b4
 80031dc:	e000ed20 	.word	0xe000ed20
 80031e0:	2000000c 	.word	0x2000000c
 80031e4:	e000ef34 	.word	0xe000ef34

080031e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	607b      	str	r3, [r7, #4]
}
 8003200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003202:	4b10      	ldr	r3, [pc, #64]	@ (8003244 <vPortEnterCritical+0x5c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a0e      	ldr	r2, [pc, #56]	@ (8003244 <vPortEnterCritical+0x5c>)
 800320a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800320c:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <vPortEnterCritical+0x5c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d110      	bne.n	8003236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003214:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <vPortEnterCritical+0x60>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <vPortEnterCritical+0x4e>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	603b      	str	r3, [r7, #0]
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	e7fd      	b.n	8003232 <vPortEnterCritical+0x4a>
	}
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2000000c 	.word	0x2000000c
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003252:	4b12      	ldr	r3, [pc, #72]	@ (800329c <vPortExitCritical+0x50>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <vPortExitCritical+0x26>
	__asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	607b      	str	r3, [r7, #4]
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	e7fd      	b.n	800326e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003272:	4b0a      	ldr	r3, [pc, #40]	@ (800329c <vPortExitCritical+0x50>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	4a08      	ldr	r2, [pc, #32]	@ (800329c <vPortExitCritical+0x50>)
 800327a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800327c:	4b07      	ldr	r3, [pc, #28]	@ (800329c <vPortExitCritical+0x50>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <vPortExitCritical+0x44>
 8003284:	2300      	movs	r3, #0
 8003286:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800328e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	2000000c 	.word	0x2000000c

080032a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <pxCurrentTCBConst>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f01e 0f10 	tst.w	lr, #16
 80032b0:	bf08      	it	eq
 80032b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80032c4:	f380 8811 	msr	BASEPRI, r0
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f7ff fcb2 	bl	8002c38 <vTaskSwitchContext>
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f380 8811 	msr	BASEPRI, r0
 80032dc:	bc09      	pop	{r0, r3}
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	6808      	ldr	r0, [r1, #0]
 80032e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e6:	f01e 0f10 	tst.w	lr, #16
 80032ea:	bf08      	it	eq
 80032ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032f0:	f380 8809 	msr	PSP, r0
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	f3af 8000 	nop.w

08003300 <pxCurrentTCBConst>:
 8003300:	20000384 	.word	0x20000384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop

08003308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	607b      	str	r3, [r7, #4]
}
 8003320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003322:	f7ff fbcf 	bl	8002ac4 <xTaskIncrementTick>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <SysTick_Handler+0x40>)
 800332e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	2300      	movs	r3, #0
 8003336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f383 8811 	msr	BASEPRI, r3
}
 800333e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <vPortSetupTimerInterrupt+0x34>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <vPortSetupTimerInterrupt+0x38>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800335c:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <vPortSetupTimerInterrupt+0x3c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <vPortSetupTimerInterrupt+0x40>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <vPortSetupTimerInterrupt+0x44>)
 800336a:	3b01      	subs	r3, #1
 800336c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800336e:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <vPortSetupTimerInterrupt+0x34>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010
 8003384:	e000e018 	.word	0xe000e018
 8003388:	20000000 	.word	0x20000000
 800338c:	10624dd3 	.word	0x10624dd3
 8003390:	e000e014 	.word	0xe000e014

08003394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80033a4 <vPortEnableVFP+0x10>
 8003398:	6801      	ldr	r1, [r0, #0]
 800339a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800339e:	6001      	str	r1, [r0, #0]
 80033a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80033a2:	bf00      	nop
 80033a4:	e000ed88 	.word	0xe000ed88

080033a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80033ae:	f3ef 8305 	mrs	r3, IPSR
 80033b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	d915      	bls.n	80033e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80033ba:	4a18      	ldr	r2, [pc, #96]	@ (800341c <vPortValidateInterruptPriority+0x74>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033c4:	4b16      	ldr	r3, [pc, #88]	@ (8003420 <vPortValidateInterruptPriority+0x78>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	7afa      	ldrb	r2, [r7, #11]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d20b      	bcs.n	80033e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	607b      	str	r3, [r7, #4]
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	e7fd      	b.n	80033e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <vPortValidateInterruptPriority+0x7c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <vPortValidateInterruptPriority+0x80>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d90b      	bls.n	800340e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	603b      	str	r3, [r7, #0]
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	e7fd      	b.n	800340a <vPortValidateInterruptPriority+0x62>
	}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000e3f0 	.word	0xe000e3f0
 8003420:	200004b0 	.word	0x200004b0
 8003424:	e000ed0c 	.word	0xe000ed0c
 8003428:	200004b4 	.word	0x200004b4

0800342c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	@ 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003438:	f7ff fa76 	bl	8002928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800343c:	4b5c      	ldr	r3, [pc, #368]	@ (80035b0 <pvPortMalloc+0x184>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003444:	f000 f924 	bl	8003690 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003448:	4b5a      	ldr	r3, [pc, #360]	@ (80035b4 <pvPortMalloc+0x188>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	f040 8095 	bne.w	8003580 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01e      	beq.n	800349a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800345c:	2208      	movs	r2, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	2b00      	cmp	r3, #0
 800346c:	d015      	beq.n	800349a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f023 0307 	bic.w	r3, r3, #7
 8003474:	3308      	adds	r3, #8
 8003476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <pvPortMalloc+0x6e>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	617b      	str	r3, [r7, #20]
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	e7fd      	b.n	8003496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d06f      	beq.n	8003580 <pvPortMalloc+0x154>
 80034a0:	4b45      	ldr	r3, [pc, #276]	@ (80035b8 <pvPortMalloc+0x18c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d86a      	bhi.n	8003580 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80034aa:	4b44      	ldr	r3, [pc, #272]	@ (80035bc <pvPortMalloc+0x190>)
 80034ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80034ae:	4b43      	ldr	r3, [pc, #268]	@ (80035bc <pvPortMalloc+0x190>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034b4:	e004      	b.n	80034c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d903      	bls.n	80034d2 <pvPortMalloc+0xa6>
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f1      	bne.n	80034b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80034d2:	4b37      	ldr	r3, [pc, #220]	@ (80035b0 <pvPortMalloc+0x184>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	429a      	cmp	r2, r3
 80034da:	d051      	beq.n	8003580 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2208      	movs	r2, #8
 80034e2:	4413      	add	r3, r2
 80034e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	1ad2      	subs	r2, r2, r3
 80034f6:	2308      	movs	r3, #8
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d920      	bls.n	8003540 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <pvPortMalloc+0xfc>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	613b      	str	r3, [r7, #16]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad2      	subs	r2, r2, r3
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800353a:	69b8      	ldr	r0, [r7, #24]
 800353c:	f000 f90a 	bl	8003754 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003540:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <pvPortMalloc+0x18c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	4a1b      	ldr	r2, [pc, #108]	@ (80035b8 <pvPortMalloc+0x18c>)
 800354c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800354e:	4b1a      	ldr	r3, [pc, #104]	@ (80035b8 <pvPortMalloc+0x18c>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <pvPortMalloc+0x194>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d203      	bcs.n	8003562 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <pvPortMalloc+0x18c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <pvPortMalloc+0x194>)
 8003560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <pvPortMalloc+0x188>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	431a      	orrs	r2, r3
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003576:	4b13      	ldr	r3, [pc, #76]	@ (80035c4 <pvPortMalloc+0x198>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	4a11      	ldr	r2, [pc, #68]	@ (80035c4 <pvPortMalloc+0x198>)
 800357e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003580:	f7ff f9e0 	bl	8002944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <pvPortMalloc+0x17a>
	__asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	60fb      	str	r3, [r7, #12]
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	e7fd      	b.n	80035a2 <pvPortMalloc+0x176>
	return pvReturn;
 80035a6:	69fb      	ldr	r3, [r7, #28]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3728      	adds	r7, #40	@ 0x28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	200040c0 	.word	0x200040c0
 80035b4:	200040d4 	.word	0x200040d4
 80035b8:	200040c4 	.word	0x200040c4
 80035bc:	200040b8 	.word	0x200040b8
 80035c0:	200040c8 	.word	0x200040c8
 80035c4:	200040cc 	.word	0x200040cc

080035c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d04f      	beq.n	800367a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80035da:	2308      	movs	r3, #8
 80035dc:	425b      	negs	r3, r3
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4413      	add	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	4b25      	ldr	r3, [pc, #148]	@ (8003684 <vPortFree+0xbc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <vPortFree+0x46>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	60fb      	str	r3, [r7, #12]
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	e7fd      	b.n	800360a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <vPortFree+0x66>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	60bb      	str	r3, [r7, #8]
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4b14      	ldr	r3, [pc, #80]	@ (8003684 <vPortFree+0xbc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01e      	beq.n	800367a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11a      	bne.n	800367a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4b0e      	ldr	r3, [pc, #56]	@ (8003684 <vPortFree+0xbc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003654:	f7ff f968 	bl	8002928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <vPortFree+0xc0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4413      	add	r3, r2
 8003662:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <vPortFree+0xc0>)
 8003664:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003666:	6938      	ldr	r0, [r7, #16]
 8003668:	f000 f874 	bl	8003754 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800366c:	4b07      	ldr	r3, [pc, #28]	@ (800368c <vPortFree+0xc4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	4a06      	ldr	r2, [pc, #24]	@ (800368c <vPortFree+0xc4>)
 8003674:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003676:	f7ff f965 	bl	8002944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200040d4 	.word	0x200040d4
 8003688:	200040c4 	.word	0x200040c4
 800368c:	200040d0 	.word	0x200040d0

08003690 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003696:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800369a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800369c:	4b27      	ldr	r3, [pc, #156]	@ (800373c <prvHeapInit+0xac>)
 800369e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3307      	adds	r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0307 	bic.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	4a1f      	ldr	r2, [pc, #124]	@ (800373c <prvHeapInit+0xac>)
 80036c0:	4413      	add	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <prvHeapInit+0xb0>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003740 <prvHeapInit+0xb0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80036dc:	2208      	movs	r2, #8
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a15      	ldr	r2, [pc, #84]	@ (8003744 <prvHeapInit+0xb4>)
 80036f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80036f2:	4b14      	ldr	r3, [pc, #80]	@ (8003744 <prvHeapInit+0xb4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80036fa:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <prvHeapInit+0xb4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	1ad2      	subs	r2, r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003710:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <prvHeapInit+0xb4>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <prvHeapInit+0xb8>)
 800371e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a09      	ldr	r2, [pc, #36]	@ (800374c <prvHeapInit+0xbc>)
 8003726:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003728:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <prvHeapInit+0xc0>)
 800372a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800372e:	601a      	str	r2, [r3, #0]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	200004b8 	.word	0x200004b8
 8003740:	200040b8 	.word	0x200040b8
 8003744:	200040c0 	.word	0x200040c0
 8003748:	200040c8 	.word	0x200040c8
 800374c:	200040c4 	.word	0x200040c4
 8003750:	200040d4 	.word	0x200040d4

08003754 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800375c:	4b28      	ldr	r3, [pc, #160]	@ (8003800 <prvInsertBlockIntoFreeList+0xac>)
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e002      	b.n	8003768 <prvInsertBlockIntoFreeList+0x14>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d8f7      	bhi.n	8003762 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4413      	add	r3, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d108      	bne.n	8003796 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	441a      	add	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	441a      	add	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d118      	bne.n	80037dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <prvInsertBlockIntoFreeList+0xb0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d00d      	beq.n	80037d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e008      	b.n	80037e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <prvInsertBlockIntoFreeList+0xb0>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e003      	b.n	80037e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d002      	beq.n	80037f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	200040b8 	.word	0x200040b8
 8003804:	200040c0 	.word	0x200040c0

08003808 <std>:
 8003808:	2300      	movs	r3, #0
 800380a:	b510      	push	{r4, lr}
 800380c:	4604      	mov	r4, r0
 800380e:	e9c0 3300 	strd	r3, r3, [r0]
 8003812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003816:	6083      	str	r3, [r0, #8]
 8003818:	8181      	strh	r1, [r0, #12]
 800381a:	6643      	str	r3, [r0, #100]	@ 0x64
 800381c:	81c2      	strh	r2, [r0, #14]
 800381e:	6183      	str	r3, [r0, #24]
 8003820:	4619      	mov	r1, r3
 8003822:	2208      	movs	r2, #8
 8003824:	305c      	adds	r0, #92	@ 0x5c
 8003826:	f000 f9f9 	bl	8003c1c <memset>
 800382a:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <std+0x58>)
 800382c:	6263      	str	r3, [r4, #36]	@ 0x24
 800382e:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <std+0x5c>)
 8003830:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003832:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <std+0x60>)
 8003834:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <std+0x64>)
 8003838:	6323      	str	r3, [r4, #48]	@ 0x30
 800383a:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <std+0x68>)
 800383c:	6224      	str	r4, [r4, #32]
 800383e:	429c      	cmp	r4, r3
 8003840:	d006      	beq.n	8003850 <std+0x48>
 8003842:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003846:	4294      	cmp	r4, r2
 8003848:	d002      	beq.n	8003850 <std+0x48>
 800384a:	33d0      	adds	r3, #208	@ 0xd0
 800384c:	429c      	cmp	r4, r3
 800384e:	d105      	bne.n	800385c <std+0x54>
 8003850:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003858:	f000 baae 	b.w	8003db8 <__retarget_lock_init_recursive>
 800385c:	bd10      	pop	{r4, pc}
 800385e:	bf00      	nop
 8003860:	08003a6d 	.word	0x08003a6d
 8003864:	08003a8f 	.word	0x08003a8f
 8003868:	08003ac7 	.word	0x08003ac7
 800386c:	08003aeb 	.word	0x08003aeb
 8003870:	200040d8 	.word	0x200040d8

08003874 <stdio_exit_handler>:
 8003874:	4a02      	ldr	r2, [pc, #8]	@ (8003880 <stdio_exit_handler+0xc>)
 8003876:	4903      	ldr	r1, [pc, #12]	@ (8003884 <stdio_exit_handler+0x10>)
 8003878:	4803      	ldr	r0, [pc, #12]	@ (8003888 <stdio_exit_handler+0x14>)
 800387a:	f000 b869 	b.w	8003950 <_fwalk_sglue>
 800387e:	bf00      	nop
 8003880:	20000010 	.word	0x20000010
 8003884:	08004659 	.word	0x08004659
 8003888:	20000020 	.word	0x20000020

0800388c <cleanup_stdio>:
 800388c:	6841      	ldr	r1, [r0, #4]
 800388e:	4b0c      	ldr	r3, [pc, #48]	@ (80038c0 <cleanup_stdio+0x34>)
 8003890:	4299      	cmp	r1, r3
 8003892:	b510      	push	{r4, lr}
 8003894:	4604      	mov	r4, r0
 8003896:	d001      	beq.n	800389c <cleanup_stdio+0x10>
 8003898:	f000 fede 	bl	8004658 <_fflush_r>
 800389c:	68a1      	ldr	r1, [r4, #8]
 800389e:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <cleanup_stdio+0x38>)
 80038a0:	4299      	cmp	r1, r3
 80038a2:	d002      	beq.n	80038aa <cleanup_stdio+0x1e>
 80038a4:	4620      	mov	r0, r4
 80038a6:	f000 fed7 	bl	8004658 <_fflush_r>
 80038aa:	68e1      	ldr	r1, [r4, #12]
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <cleanup_stdio+0x3c>)
 80038ae:	4299      	cmp	r1, r3
 80038b0:	d004      	beq.n	80038bc <cleanup_stdio+0x30>
 80038b2:	4620      	mov	r0, r4
 80038b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038b8:	f000 bece 	b.w	8004658 <_fflush_r>
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	bf00      	nop
 80038c0:	200040d8 	.word	0x200040d8
 80038c4:	20004140 	.word	0x20004140
 80038c8:	200041a8 	.word	0x200041a8

080038cc <global_stdio_init.part.0>:
 80038cc:	b510      	push	{r4, lr}
 80038ce:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <global_stdio_init.part.0+0x30>)
 80038d0:	4c0b      	ldr	r4, [pc, #44]	@ (8003900 <global_stdio_init.part.0+0x34>)
 80038d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003904 <global_stdio_init.part.0+0x38>)
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	4620      	mov	r0, r4
 80038d8:	2200      	movs	r2, #0
 80038da:	2104      	movs	r1, #4
 80038dc:	f7ff ff94 	bl	8003808 <std>
 80038e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038e4:	2201      	movs	r2, #1
 80038e6:	2109      	movs	r1, #9
 80038e8:	f7ff ff8e 	bl	8003808 <std>
 80038ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038f0:	2202      	movs	r2, #2
 80038f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f6:	2112      	movs	r1, #18
 80038f8:	f7ff bf86 	b.w	8003808 <std>
 80038fc:	20004210 	.word	0x20004210
 8003900:	200040d8 	.word	0x200040d8
 8003904:	08003875 	.word	0x08003875

08003908 <__sfp_lock_acquire>:
 8003908:	4801      	ldr	r0, [pc, #4]	@ (8003910 <__sfp_lock_acquire+0x8>)
 800390a:	f000 ba56 	b.w	8003dba <__retarget_lock_acquire_recursive>
 800390e:	bf00      	nop
 8003910:	20004219 	.word	0x20004219

08003914 <__sfp_lock_release>:
 8003914:	4801      	ldr	r0, [pc, #4]	@ (800391c <__sfp_lock_release+0x8>)
 8003916:	f000 ba51 	b.w	8003dbc <__retarget_lock_release_recursive>
 800391a:	bf00      	nop
 800391c:	20004219 	.word	0x20004219

08003920 <__sinit>:
 8003920:	b510      	push	{r4, lr}
 8003922:	4604      	mov	r4, r0
 8003924:	f7ff fff0 	bl	8003908 <__sfp_lock_acquire>
 8003928:	6a23      	ldr	r3, [r4, #32]
 800392a:	b11b      	cbz	r3, 8003934 <__sinit+0x14>
 800392c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003930:	f7ff bff0 	b.w	8003914 <__sfp_lock_release>
 8003934:	4b04      	ldr	r3, [pc, #16]	@ (8003948 <__sinit+0x28>)
 8003936:	6223      	str	r3, [r4, #32]
 8003938:	4b04      	ldr	r3, [pc, #16]	@ (800394c <__sinit+0x2c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f5      	bne.n	800392c <__sinit+0xc>
 8003940:	f7ff ffc4 	bl	80038cc <global_stdio_init.part.0>
 8003944:	e7f2      	b.n	800392c <__sinit+0xc>
 8003946:	bf00      	nop
 8003948:	0800388d 	.word	0x0800388d
 800394c:	20004210 	.word	0x20004210

08003950 <_fwalk_sglue>:
 8003950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003954:	4607      	mov	r7, r0
 8003956:	4688      	mov	r8, r1
 8003958:	4614      	mov	r4, r2
 800395a:	2600      	movs	r6, #0
 800395c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003960:	f1b9 0901 	subs.w	r9, r9, #1
 8003964:	d505      	bpl.n	8003972 <_fwalk_sglue+0x22>
 8003966:	6824      	ldr	r4, [r4, #0]
 8003968:	2c00      	cmp	r4, #0
 800396a:	d1f7      	bne.n	800395c <_fwalk_sglue+0xc>
 800396c:	4630      	mov	r0, r6
 800396e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003972:	89ab      	ldrh	r3, [r5, #12]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d907      	bls.n	8003988 <_fwalk_sglue+0x38>
 8003978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800397c:	3301      	adds	r3, #1
 800397e:	d003      	beq.n	8003988 <_fwalk_sglue+0x38>
 8003980:	4629      	mov	r1, r5
 8003982:	4638      	mov	r0, r7
 8003984:	47c0      	blx	r8
 8003986:	4306      	orrs	r6, r0
 8003988:	3568      	adds	r5, #104	@ 0x68
 800398a:	e7e9      	b.n	8003960 <_fwalk_sglue+0x10>

0800398c <iprintf>:
 800398c:	b40f      	push	{r0, r1, r2, r3}
 800398e:	b507      	push	{r0, r1, r2, lr}
 8003990:	4906      	ldr	r1, [pc, #24]	@ (80039ac <iprintf+0x20>)
 8003992:	ab04      	add	r3, sp, #16
 8003994:	6808      	ldr	r0, [r1, #0]
 8003996:	f853 2b04 	ldr.w	r2, [r3], #4
 800399a:	6881      	ldr	r1, [r0, #8]
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	f000 fb31 	bl	8004004 <_vfiprintf_r>
 80039a2:	b003      	add	sp, #12
 80039a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039a8:	b004      	add	sp, #16
 80039aa:	4770      	bx	lr
 80039ac:	2000001c 	.word	0x2000001c

080039b0 <_puts_r>:
 80039b0:	6a03      	ldr	r3, [r0, #32]
 80039b2:	b570      	push	{r4, r5, r6, lr}
 80039b4:	6884      	ldr	r4, [r0, #8]
 80039b6:	4605      	mov	r5, r0
 80039b8:	460e      	mov	r6, r1
 80039ba:	b90b      	cbnz	r3, 80039c0 <_puts_r+0x10>
 80039bc:	f7ff ffb0 	bl	8003920 <__sinit>
 80039c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039c2:	07db      	lsls	r3, r3, #31
 80039c4:	d405      	bmi.n	80039d2 <_puts_r+0x22>
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	0598      	lsls	r0, r3, #22
 80039ca:	d402      	bmi.n	80039d2 <_puts_r+0x22>
 80039cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ce:	f000 f9f4 	bl	8003dba <__retarget_lock_acquire_recursive>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	0719      	lsls	r1, r3, #28
 80039d6:	d502      	bpl.n	80039de <_puts_r+0x2e>
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d135      	bne.n	8003a4a <_puts_r+0x9a>
 80039de:	4621      	mov	r1, r4
 80039e0:	4628      	mov	r0, r5
 80039e2:	f000 f8c5 	bl	8003b70 <__swsetup_r>
 80039e6:	b380      	cbz	r0, 8003a4a <_puts_r+0x9a>
 80039e8:	f04f 35ff 	mov.w	r5, #4294967295
 80039ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039ee:	07da      	lsls	r2, r3, #31
 80039f0:	d405      	bmi.n	80039fe <_puts_r+0x4e>
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	059b      	lsls	r3, r3, #22
 80039f6:	d402      	bmi.n	80039fe <_puts_r+0x4e>
 80039f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039fa:	f000 f9df 	bl	8003dbc <__retarget_lock_release_recursive>
 80039fe:	4628      	mov	r0, r5
 8003a00:	bd70      	pop	{r4, r5, r6, pc}
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	da04      	bge.n	8003a10 <_puts_r+0x60>
 8003a06:	69a2      	ldr	r2, [r4, #24]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	dc17      	bgt.n	8003a3c <_puts_r+0x8c>
 8003a0c:	290a      	cmp	r1, #10
 8003a0e:	d015      	beq.n	8003a3c <_puts_r+0x8c>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	6022      	str	r2, [r4, #0]
 8003a16:	7019      	strb	r1, [r3, #0]
 8003a18:	68a3      	ldr	r3, [r4, #8]
 8003a1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	60a3      	str	r3, [r4, #8]
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d1ed      	bne.n	8003a02 <_puts_r+0x52>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da11      	bge.n	8003a4e <_puts_r+0x9e>
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	210a      	movs	r1, #10
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 f85f 	bl	8003af2 <__swbuf_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d0d7      	beq.n	80039e8 <_puts_r+0x38>
 8003a38:	250a      	movs	r5, #10
 8003a3a:	e7d7      	b.n	80039ec <_puts_r+0x3c>
 8003a3c:	4622      	mov	r2, r4
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f000 f857 	bl	8003af2 <__swbuf_r>
 8003a44:	3001      	adds	r0, #1
 8003a46:	d1e7      	bne.n	8003a18 <_puts_r+0x68>
 8003a48:	e7ce      	b.n	80039e8 <_puts_r+0x38>
 8003a4a:	3e01      	subs	r6, #1
 8003a4c:	e7e4      	b.n	8003a18 <_puts_r+0x68>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	6022      	str	r2, [r4, #0]
 8003a54:	220a      	movs	r2, #10
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e7ee      	b.n	8003a38 <_puts_r+0x88>
	...

08003a5c <puts>:
 8003a5c:	4b02      	ldr	r3, [pc, #8]	@ (8003a68 <puts+0xc>)
 8003a5e:	4601      	mov	r1, r0
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	f7ff bfa5 	b.w	80039b0 <_puts_r>
 8003a66:	bf00      	nop
 8003a68:	2000001c 	.word	0x2000001c

08003a6c <__sread>:
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	460c      	mov	r4, r1
 8003a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a74:	f000 f952 	bl	8003d1c <_read_r>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	bfab      	itete	ge
 8003a7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a80:	181b      	addge	r3, r3, r0
 8003a82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a86:	bfac      	ite	ge
 8003a88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a8a:	81a3      	strhlt	r3, [r4, #12]
 8003a8c:	bd10      	pop	{r4, pc}

08003a8e <__swrite>:
 8003a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a92:	461f      	mov	r7, r3
 8003a94:	898b      	ldrh	r3, [r1, #12]
 8003a96:	05db      	lsls	r3, r3, #23
 8003a98:	4605      	mov	r5, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	4616      	mov	r6, r2
 8003a9e:	d505      	bpl.n	8003aac <__swrite+0x1e>
 8003aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f000 f926 	bl	8003cf8 <_lseek_r>
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ab6:	81a3      	strh	r3, [r4, #12]
 8003ab8:	4632      	mov	r2, r6
 8003aba:	463b      	mov	r3, r7
 8003abc:	4628      	mov	r0, r5
 8003abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac2:	f000 b93d 	b.w	8003d40 <_write_r>

08003ac6 <__sseek>:
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	460c      	mov	r4, r1
 8003aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ace:	f000 f913 	bl	8003cf8 <_lseek_r>
 8003ad2:	1c43      	adds	r3, r0, #1
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	bf15      	itete	ne
 8003ad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ae2:	81a3      	strheq	r3, [r4, #12]
 8003ae4:	bf18      	it	ne
 8003ae6:	81a3      	strhne	r3, [r4, #12]
 8003ae8:	bd10      	pop	{r4, pc}

08003aea <__sclose>:
 8003aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aee:	f000 b89d 	b.w	8003c2c <_close_r>

08003af2 <__swbuf_r>:
 8003af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af4:	460e      	mov	r6, r1
 8003af6:	4614      	mov	r4, r2
 8003af8:	4605      	mov	r5, r0
 8003afa:	b118      	cbz	r0, 8003b04 <__swbuf_r+0x12>
 8003afc:	6a03      	ldr	r3, [r0, #32]
 8003afe:	b90b      	cbnz	r3, 8003b04 <__swbuf_r+0x12>
 8003b00:	f7ff ff0e 	bl	8003920 <__sinit>
 8003b04:	69a3      	ldr	r3, [r4, #24]
 8003b06:	60a3      	str	r3, [r4, #8]
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	071a      	lsls	r2, r3, #28
 8003b0c:	d501      	bpl.n	8003b12 <__swbuf_r+0x20>
 8003b0e:	6923      	ldr	r3, [r4, #16]
 8003b10:	b943      	cbnz	r3, 8003b24 <__swbuf_r+0x32>
 8003b12:	4621      	mov	r1, r4
 8003b14:	4628      	mov	r0, r5
 8003b16:	f000 f82b 	bl	8003b70 <__swsetup_r>
 8003b1a:	b118      	cbz	r0, 8003b24 <__swbuf_r+0x32>
 8003b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8003b20:	4638      	mov	r0, r7
 8003b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	6922      	ldr	r2, [r4, #16]
 8003b28:	1a98      	subs	r0, r3, r2
 8003b2a:	6963      	ldr	r3, [r4, #20]
 8003b2c:	b2f6      	uxtb	r6, r6
 8003b2e:	4283      	cmp	r3, r0
 8003b30:	4637      	mov	r7, r6
 8003b32:	dc05      	bgt.n	8003b40 <__swbuf_r+0x4e>
 8003b34:	4621      	mov	r1, r4
 8003b36:	4628      	mov	r0, r5
 8003b38:	f000 fd8e 	bl	8004658 <_fflush_r>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d1ed      	bne.n	8003b1c <__swbuf_r+0x2a>
 8003b40:	68a3      	ldr	r3, [r4, #8]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	60a3      	str	r3, [r4, #8]
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	6022      	str	r2, [r4, #0]
 8003b4c:	701e      	strb	r6, [r3, #0]
 8003b4e:	6962      	ldr	r2, [r4, #20]
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d004      	beq.n	8003b60 <__swbuf_r+0x6e>
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	07db      	lsls	r3, r3, #31
 8003b5a:	d5e1      	bpl.n	8003b20 <__swbuf_r+0x2e>
 8003b5c:	2e0a      	cmp	r6, #10
 8003b5e:	d1df      	bne.n	8003b20 <__swbuf_r+0x2e>
 8003b60:	4621      	mov	r1, r4
 8003b62:	4628      	mov	r0, r5
 8003b64:	f000 fd78 	bl	8004658 <_fflush_r>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d0d9      	beq.n	8003b20 <__swbuf_r+0x2e>
 8003b6c:	e7d6      	b.n	8003b1c <__swbuf_r+0x2a>
	...

08003b70 <__swsetup_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4b29      	ldr	r3, [pc, #164]	@ (8003c18 <__swsetup_r+0xa8>)
 8003b74:	4605      	mov	r5, r0
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	460c      	mov	r4, r1
 8003b7a:	b118      	cbz	r0, 8003b84 <__swsetup_r+0x14>
 8003b7c:	6a03      	ldr	r3, [r0, #32]
 8003b7e:	b90b      	cbnz	r3, 8003b84 <__swsetup_r+0x14>
 8003b80:	f7ff fece 	bl	8003920 <__sinit>
 8003b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b88:	0719      	lsls	r1, r3, #28
 8003b8a:	d422      	bmi.n	8003bd2 <__swsetup_r+0x62>
 8003b8c:	06da      	lsls	r2, r3, #27
 8003b8e:	d407      	bmi.n	8003ba0 <__swsetup_r+0x30>
 8003b90:	2209      	movs	r2, #9
 8003b92:	602a      	str	r2, [r5, #0]
 8003b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9e:	e033      	b.n	8003c08 <__swsetup_r+0x98>
 8003ba0:	0758      	lsls	r0, r3, #29
 8003ba2:	d512      	bpl.n	8003bca <__swsetup_r+0x5a>
 8003ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ba6:	b141      	cbz	r1, 8003bba <__swsetup_r+0x4a>
 8003ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bac:	4299      	cmp	r1, r3
 8003bae:	d002      	beq.n	8003bb6 <__swsetup_r+0x46>
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 f905 	bl	8003dc0 <_free_r>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003bc0:	81a3      	strh	r3, [r4, #12]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6063      	str	r3, [r4, #4]
 8003bc6:	6923      	ldr	r3, [r4, #16]
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	f043 0308 	orr.w	r3, r3, #8
 8003bd0:	81a3      	strh	r3, [r4, #12]
 8003bd2:	6923      	ldr	r3, [r4, #16]
 8003bd4:	b94b      	cbnz	r3, 8003bea <__swsetup_r+0x7a>
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be0:	d003      	beq.n	8003bea <__swsetup_r+0x7a>
 8003be2:	4621      	mov	r1, r4
 8003be4:	4628      	mov	r0, r5
 8003be6:	f000 fd85 	bl	80046f4 <__smakebuf_r>
 8003bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bee:	f013 0201 	ands.w	r2, r3, #1
 8003bf2:	d00a      	beq.n	8003c0a <__swsetup_r+0x9a>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	60a2      	str	r2, [r4, #8]
 8003bf8:	6962      	ldr	r2, [r4, #20]
 8003bfa:	4252      	negs	r2, r2
 8003bfc:	61a2      	str	r2, [r4, #24]
 8003bfe:	6922      	ldr	r2, [r4, #16]
 8003c00:	b942      	cbnz	r2, 8003c14 <__swsetup_r+0xa4>
 8003c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c06:	d1c5      	bne.n	8003b94 <__swsetup_r+0x24>
 8003c08:	bd38      	pop	{r3, r4, r5, pc}
 8003c0a:	0799      	lsls	r1, r3, #30
 8003c0c:	bf58      	it	pl
 8003c0e:	6962      	ldrpl	r2, [r4, #20]
 8003c10:	60a2      	str	r2, [r4, #8]
 8003c12:	e7f4      	b.n	8003bfe <__swsetup_r+0x8e>
 8003c14:	2000      	movs	r0, #0
 8003c16:	e7f7      	b.n	8003c08 <__swsetup_r+0x98>
 8003c18:	2000001c 	.word	0x2000001c

08003c1c <memset>:
 8003c1c:	4402      	add	r2, r0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d100      	bne.n	8003c26 <memset+0xa>
 8003c24:	4770      	bx	lr
 8003c26:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2a:	e7f9      	b.n	8003c20 <memset+0x4>

08003c2c <_close_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4d06      	ldr	r5, [pc, #24]	@ (8003c48 <_close_r+0x1c>)
 8003c30:	2300      	movs	r3, #0
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	f7fc ff2d 	bl	8000a96 <_close>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d102      	bne.n	8003c46 <_close_r+0x1a>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b103      	cbz	r3, 8003c46 <_close_r+0x1a>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	20004214 	.word	0x20004214

08003c4c <_reclaim_reent>:
 8003c4c:	4b29      	ldr	r3, [pc, #164]	@ (8003cf4 <_reclaim_reent+0xa8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4283      	cmp	r3, r0
 8003c52:	b570      	push	{r4, r5, r6, lr}
 8003c54:	4604      	mov	r4, r0
 8003c56:	d04b      	beq.n	8003cf0 <_reclaim_reent+0xa4>
 8003c58:	69c3      	ldr	r3, [r0, #28]
 8003c5a:	b1ab      	cbz	r3, 8003c88 <_reclaim_reent+0x3c>
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	b16b      	cbz	r3, 8003c7c <_reclaim_reent+0x30>
 8003c60:	2500      	movs	r5, #0
 8003c62:	69e3      	ldr	r3, [r4, #28]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	5959      	ldr	r1, [r3, r5]
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	d13b      	bne.n	8003ce4 <_reclaim_reent+0x98>
 8003c6c:	3504      	adds	r5, #4
 8003c6e:	2d80      	cmp	r5, #128	@ 0x80
 8003c70:	d1f7      	bne.n	8003c62 <_reclaim_reent+0x16>
 8003c72:	69e3      	ldr	r3, [r4, #28]
 8003c74:	4620      	mov	r0, r4
 8003c76:	68d9      	ldr	r1, [r3, #12]
 8003c78:	f000 f8a2 	bl	8003dc0 <_free_r>
 8003c7c:	69e3      	ldr	r3, [r4, #28]
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	b111      	cbz	r1, 8003c88 <_reclaim_reent+0x3c>
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 f89c 	bl	8003dc0 <_free_r>
 8003c88:	6961      	ldr	r1, [r4, #20]
 8003c8a:	b111      	cbz	r1, 8003c92 <_reclaim_reent+0x46>
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f000 f897 	bl	8003dc0 <_free_r>
 8003c92:	69e1      	ldr	r1, [r4, #28]
 8003c94:	b111      	cbz	r1, 8003c9c <_reclaim_reent+0x50>
 8003c96:	4620      	mov	r0, r4
 8003c98:	f000 f892 	bl	8003dc0 <_free_r>
 8003c9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003c9e:	b111      	cbz	r1, 8003ca6 <_reclaim_reent+0x5a>
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 f88d 	bl	8003dc0 <_free_r>
 8003ca6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ca8:	b111      	cbz	r1, 8003cb0 <_reclaim_reent+0x64>
 8003caa:	4620      	mov	r0, r4
 8003cac:	f000 f888 	bl	8003dc0 <_free_r>
 8003cb0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003cb2:	b111      	cbz	r1, 8003cba <_reclaim_reent+0x6e>
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f000 f883 	bl	8003dc0 <_free_r>
 8003cba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003cbc:	b111      	cbz	r1, 8003cc4 <_reclaim_reent+0x78>
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f000 f87e 	bl	8003dc0 <_free_r>
 8003cc4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003cc6:	b111      	cbz	r1, 8003cce <_reclaim_reent+0x82>
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 f879 	bl	8003dc0 <_free_r>
 8003cce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003cd0:	b111      	cbz	r1, 8003cd8 <_reclaim_reent+0x8c>
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f000 f874 	bl	8003dc0 <_free_r>
 8003cd8:	6a23      	ldr	r3, [r4, #32]
 8003cda:	b14b      	cbz	r3, 8003cf0 <_reclaim_reent+0xa4>
 8003cdc:	4620      	mov	r0, r4
 8003cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ce2:	4718      	bx	r3
 8003ce4:	680e      	ldr	r6, [r1, #0]
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f000 f86a 	bl	8003dc0 <_free_r>
 8003cec:	4631      	mov	r1, r6
 8003cee:	e7bb      	b.n	8003c68 <_reclaim_reent+0x1c>
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000001c 	.word	0x2000001c

08003cf8 <_lseek_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4d07      	ldr	r5, [pc, #28]	@ (8003d18 <_lseek_r+0x20>)
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	4608      	mov	r0, r1
 8003d00:	4611      	mov	r1, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	602a      	str	r2, [r5, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f7fc feec 	bl	8000ae4 <_lseek>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d102      	bne.n	8003d16 <_lseek_r+0x1e>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	b103      	cbz	r3, 8003d16 <_lseek_r+0x1e>
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	20004214 	.word	0x20004214

08003d1c <_read_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4d07      	ldr	r5, [pc, #28]	@ (8003d3c <_read_r+0x20>)
 8003d20:	4604      	mov	r4, r0
 8003d22:	4608      	mov	r0, r1
 8003d24:	4611      	mov	r1, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	602a      	str	r2, [r5, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7fc fe96 	bl	8000a5c <_read>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_read_r+0x1e>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_read_r+0x1e>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	20004214 	.word	0x20004214

08003d40 <_write_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4d07      	ldr	r5, [pc, #28]	@ (8003d60 <_write_r+0x20>)
 8003d44:	4604      	mov	r4, r0
 8003d46:	4608      	mov	r0, r1
 8003d48:	4611      	mov	r1, r2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	602a      	str	r2, [r5, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f7fc fc67 	bl	8000622 <_write>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d102      	bne.n	8003d5e <_write_r+0x1e>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	b103      	cbz	r3, 8003d5e <_write_r+0x1e>
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	20004214 	.word	0x20004214

08003d64 <__errno>:
 8003d64:	4b01      	ldr	r3, [pc, #4]	@ (8003d6c <__errno+0x8>)
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	2000001c 	.word	0x2000001c

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4d0d      	ldr	r5, [pc, #52]	@ (8003da8 <__libc_init_array+0x38>)
 8003d74:	4c0d      	ldr	r4, [pc, #52]	@ (8003dac <__libc_init_array+0x3c>)
 8003d76:	1b64      	subs	r4, r4, r5
 8003d78:	10a4      	asrs	r4, r4, #2
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	4d0b      	ldr	r5, [pc, #44]	@ (8003db0 <__libc_init_array+0x40>)
 8003d82:	4c0c      	ldr	r4, [pc, #48]	@ (8003db4 <__libc_init_array+0x44>)
 8003d84:	f000 fd24 	bl	80047d0 <_init>
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	2600      	movs	r6, #0
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	080048f4 	.word	0x080048f4
 8003dac:	080048f4 	.word	0x080048f4
 8003db0:	080048f4 	.word	0x080048f4
 8003db4:	080048f8 	.word	0x080048f8

08003db8 <__retarget_lock_init_recursive>:
 8003db8:	4770      	bx	lr

08003dba <__retarget_lock_acquire_recursive>:
 8003dba:	4770      	bx	lr

08003dbc <__retarget_lock_release_recursive>:
 8003dbc:	4770      	bx	lr
	...

08003dc0 <_free_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d041      	beq.n	8003e4c <_free_r+0x8c>
 8003dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dcc:	1f0c      	subs	r4, r1, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bfb8      	it	lt
 8003dd2:	18e4      	addlt	r4, r4, r3
 8003dd4:	f000 f8e0 	bl	8003f98 <__malloc_lock>
 8003dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e50 <_free_r+0x90>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	b933      	cbnz	r3, 8003dec <_free_r+0x2c>
 8003dde:	6063      	str	r3, [r4, #4]
 8003de0:	6014      	str	r4, [r2, #0]
 8003de2:	4628      	mov	r0, r5
 8003de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003de8:	f000 b8dc 	b.w	8003fa4 <__malloc_unlock>
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d908      	bls.n	8003e02 <_free_r+0x42>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	1821      	adds	r1, r4, r0
 8003df4:	428b      	cmp	r3, r1
 8003df6:	bf01      	itttt	eq
 8003df8:	6819      	ldreq	r1, [r3, #0]
 8003dfa:	685b      	ldreq	r3, [r3, #4]
 8003dfc:	1809      	addeq	r1, r1, r0
 8003dfe:	6021      	streq	r1, [r4, #0]
 8003e00:	e7ed      	b.n	8003dde <_free_r+0x1e>
 8003e02:	461a      	mov	r2, r3
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	b10b      	cbz	r3, 8003e0c <_free_r+0x4c>
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	d9fa      	bls.n	8003e02 <_free_r+0x42>
 8003e0c:	6811      	ldr	r1, [r2, #0]
 8003e0e:	1850      	adds	r0, r2, r1
 8003e10:	42a0      	cmp	r0, r4
 8003e12:	d10b      	bne.n	8003e2c <_free_r+0x6c>
 8003e14:	6820      	ldr	r0, [r4, #0]
 8003e16:	4401      	add	r1, r0
 8003e18:	1850      	adds	r0, r2, r1
 8003e1a:	4283      	cmp	r3, r0
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	d1e0      	bne.n	8003de2 <_free_r+0x22>
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	6053      	str	r3, [r2, #4]
 8003e26:	4408      	add	r0, r1
 8003e28:	6010      	str	r0, [r2, #0]
 8003e2a:	e7da      	b.n	8003de2 <_free_r+0x22>
 8003e2c:	d902      	bls.n	8003e34 <_free_r+0x74>
 8003e2e:	230c      	movs	r3, #12
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	e7d6      	b.n	8003de2 <_free_r+0x22>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	1821      	adds	r1, r4, r0
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	bf04      	itt	eq
 8003e3c:	6819      	ldreq	r1, [r3, #0]
 8003e3e:	685b      	ldreq	r3, [r3, #4]
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	bf04      	itt	eq
 8003e44:	1809      	addeq	r1, r1, r0
 8003e46:	6021      	streq	r1, [r4, #0]
 8003e48:	6054      	str	r4, [r2, #4]
 8003e4a:	e7ca      	b.n	8003de2 <_free_r+0x22>
 8003e4c:	bd38      	pop	{r3, r4, r5, pc}
 8003e4e:	bf00      	nop
 8003e50:	20004220 	.word	0x20004220

08003e54 <sbrk_aligned>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	4e0f      	ldr	r6, [pc, #60]	@ (8003e94 <sbrk_aligned+0x40>)
 8003e58:	460c      	mov	r4, r1
 8003e5a:	6831      	ldr	r1, [r6, #0]
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	b911      	cbnz	r1, 8003e66 <sbrk_aligned+0x12>
 8003e60:	f000 fca6 	bl	80047b0 <_sbrk_r>
 8003e64:	6030      	str	r0, [r6, #0]
 8003e66:	4621      	mov	r1, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 fca1 	bl	80047b0 <_sbrk_r>
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	d103      	bne.n	8003e7a <sbrk_aligned+0x26>
 8003e72:	f04f 34ff 	mov.w	r4, #4294967295
 8003e76:	4620      	mov	r0, r4
 8003e78:	bd70      	pop	{r4, r5, r6, pc}
 8003e7a:	1cc4      	adds	r4, r0, #3
 8003e7c:	f024 0403 	bic.w	r4, r4, #3
 8003e80:	42a0      	cmp	r0, r4
 8003e82:	d0f8      	beq.n	8003e76 <sbrk_aligned+0x22>
 8003e84:	1a21      	subs	r1, r4, r0
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 fc92 	bl	80047b0 <_sbrk_r>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d1f2      	bne.n	8003e76 <sbrk_aligned+0x22>
 8003e90:	e7ef      	b.n	8003e72 <sbrk_aligned+0x1e>
 8003e92:	bf00      	nop
 8003e94:	2000421c 	.word	0x2000421c

08003e98 <_malloc_r>:
 8003e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e9c:	1ccd      	adds	r5, r1, #3
 8003e9e:	f025 0503 	bic.w	r5, r5, #3
 8003ea2:	3508      	adds	r5, #8
 8003ea4:	2d0c      	cmp	r5, #12
 8003ea6:	bf38      	it	cc
 8003ea8:	250c      	movcc	r5, #12
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	4606      	mov	r6, r0
 8003eae:	db01      	blt.n	8003eb4 <_malloc_r+0x1c>
 8003eb0:	42a9      	cmp	r1, r5
 8003eb2:	d904      	bls.n	8003ebe <_malloc_r+0x26>
 8003eb4:	230c      	movs	r3, #12
 8003eb6:	6033      	str	r3, [r6, #0]
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f94 <_malloc_r+0xfc>
 8003ec2:	f000 f869 	bl	8003f98 <__malloc_lock>
 8003ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eca:	461c      	mov	r4, r3
 8003ecc:	bb44      	cbnz	r4, 8003f20 <_malloc_r+0x88>
 8003ece:	4629      	mov	r1, r5
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f7ff ffbf 	bl	8003e54 <sbrk_aligned>
 8003ed6:	1c43      	adds	r3, r0, #1
 8003ed8:	4604      	mov	r4, r0
 8003eda:	d158      	bne.n	8003f8e <_malloc_r+0xf6>
 8003edc:	f8d8 4000 	ldr.w	r4, [r8]
 8003ee0:	4627      	mov	r7, r4
 8003ee2:	2f00      	cmp	r7, #0
 8003ee4:	d143      	bne.n	8003f6e <_malloc_r+0xd6>
 8003ee6:	2c00      	cmp	r4, #0
 8003ee8:	d04b      	beq.n	8003f82 <_malloc_r+0xea>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	4639      	mov	r1, r7
 8003eee:	4630      	mov	r0, r6
 8003ef0:	eb04 0903 	add.w	r9, r4, r3
 8003ef4:	f000 fc5c 	bl	80047b0 <_sbrk_r>
 8003ef8:	4581      	cmp	r9, r0
 8003efa:	d142      	bne.n	8003f82 <_malloc_r+0xea>
 8003efc:	6821      	ldr	r1, [r4, #0]
 8003efe:	1a6d      	subs	r5, r5, r1
 8003f00:	4629      	mov	r1, r5
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7ff ffa6 	bl	8003e54 <sbrk_aligned>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d03a      	beq.n	8003f82 <_malloc_r+0xea>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	442b      	add	r3, r5
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	f8d8 3000 	ldr.w	r3, [r8]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	bb62      	cbnz	r2, 8003f74 <_malloc_r+0xdc>
 8003f1a:	f8c8 7000 	str.w	r7, [r8]
 8003f1e:	e00f      	b.n	8003f40 <_malloc_r+0xa8>
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	1b52      	subs	r2, r2, r5
 8003f24:	d420      	bmi.n	8003f68 <_malloc_r+0xd0>
 8003f26:	2a0b      	cmp	r2, #11
 8003f28:	d917      	bls.n	8003f5a <_malloc_r+0xc2>
 8003f2a:	1961      	adds	r1, r4, r5
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	6025      	str	r5, [r4, #0]
 8003f30:	bf18      	it	ne
 8003f32:	6059      	strne	r1, [r3, #4]
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	bf08      	it	eq
 8003f38:	f8c8 1000 	streq.w	r1, [r8]
 8003f3c:	5162      	str	r2, [r4, r5]
 8003f3e:	604b      	str	r3, [r1, #4]
 8003f40:	4630      	mov	r0, r6
 8003f42:	f000 f82f 	bl	8003fa4 <__malloc_unlock>
 8003f46:	f104 000b 	add.w	r0, r4, #11
 8003f4a:	1d23      	adds	r3, r4, #4
 8003f4c:	f020 0007 	bic.w	r0, r0, #7
 8003f50:	1ac2      	subs	r2, r0, r3
 8003f52:	bf1c      	itt	ne
 8003f54:	1a1b      	subne	r3, r3, r0
 8003f56:	50a3      	strne	r3, [r4, r2]
 8003f58:	e7af      	b.n	8003eba <_malloc_r+0x22>
 8003f5a:	6862      	ldr	r2, [r4, #4]
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	bf0c      	ite	eq
 8003f60:	f8c8 2000 	streq.w	r2, [r8]
 8003f64:	605a      	strne	r2, [r3, #4]
 8003f66:	e7eb      	b.n	8003f40 <_malloc_r+0xa8>
 8003f68:	4623      	mov	r3, r4
 8003f6a:	6864      	ldr	r4, [r4, #4]
 8003f6c:	e7ae      	b.n	8003ecc <_malloc_r+0x34>
 8003f6e:	463c      	mov	r4, r7
 8003f70:	687f      	ldr	r7, [r7, #4]
 8003f72:	e7b6      	b.n	8003ee2 <_malloc_r+0x4a>
 8003f74:	461a      	mov	r2, r3
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	d1fb      	bne.n	8003f74 <_malloc_r+0xdc>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6053      	str	r3, [r2, #4]
 8003f80:	e7de      	b.n	8003f40 <_malloc_r+0xa8>
 8003f82:	230c      	movs	r3, #12
 8003f84:	6033      	str	r3, [r6, #0]
 8003f86:	4630      	mov	r0, r6
 8003f88:	f000 f80c 	bl	8003fa4 <__malloc_unlock>
 8003f8c:	e794      	b.n	8003eb8 <_malloc_r+0x20>
 8003f8e:	6005      	str	r5, [r0, #0]
 8003f90:	e7d6      	b.n	8003f40 <_malloc_r+0xa8>
 8003f92:	bf00      	nop
 8003f94:	20004220 	.word	0x20004220

08003f98 <__malloc_lock>:
 8003f98:	4801      	ldr	r0, [pc, #4]	@ (8003fa0 <__malloc_lock+0x8>)
 8003f9a:	f7ff bf0e 	b.w	8003dba <__retarget_lock_acquire_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	20004218 	.word	0x20004218

08003fa4 <__malloc_unlock>:
 8003fa4:	4801      	ldr	r0, [pc, #4]	@ (8003fac <__malloc_unlock+0x8>)
 8003fa6:	f7ff bf09 	b.w	8003dbc <__retarget_lock_release_recursive>
 8003faa:	bf00      	nop
 8003fac:	20004218 	.word	0x20004218

08003fb0 <__sfputc_r>:
 8003fb0:	6893      	ldr	r3, [r2, #8]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	b410      	push	{r4}
 8003fb8:	6093      	str	r3, [r2, #8]
 8003fba:	da08      	bge.n	8003fce <__sfputc_r+0x1e>
 8003fbc:	6994      	ldr	r4, [r2, #24]
 8003fbe:	42a3      	cmp	r3, r4
 8003fc0:	db01      	blt.n	8003fc6 <__sfputc_r+0x16>
 8003fc2:	290a      	cmp	r1, #10
 8003fc4:	d103      	bne.n	8003fce <__sfputc_r+0x1e>
 8003fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fca:	f7ff bd92 	b.w	8003af2 <__swbuf_r>
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	1c58      	adds	r0, r3, #1
 8003fd2:	6010      	str	r0, [r2, #0]
 8003fd4:	7019      	strb	r1, [r3, #0]
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <__sfputs_r>:
 8003fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	460f      	mov	r7, r1
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	18d5      	adds	r5, r2, r3
 8003fe8:	42ac      	cmp	r4, r5
 8003fea:	d101      	bne.n	8003ff0 <__sfputs_r+0x12>
 8003fec:	2000      	movs	r0, #0
 8003fee:	e007      	b.n	8004000 <__sfputs_r+0x22>
 8003ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff4:	463a      	mov	r2, r7
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7ff ffda 	bl	8003fb0 <__sfputc_r>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d1f3      	bne.n	8003fe8 <__sfputs_r+0xa>
 8004000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004004 <_vfiprintf_r>:
 8004004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	460d      	mov	r5, r1
 800400a:	b09d      	sub	sp, #116	@ 0x74
 800400c:	4614      	mov	r4, r2
 800400e:	4698      	mov	r8, r3
 8004010:	4606      	mov	r6, r0
 8004012:	b118      	cbz	r0, 800401c <_vfiprintf_r+0x18>
 8004014:	6a03      	ldr	r3, [r0, #32]
 8004016:	b90b      	cbnz	r3, 800401c <_vfiprintf_r+0x18>
 8004018:	f7ff fc82 	bl	8003920 <__sinit>
 800401c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800401e:	07d9      	lsls	r1, r3, #31
 8004020:	d405      	bmi.n	800402e <_vfiprintf_r+0x2a>
 8004022:	89ab      	ldrh	r3, [r5, #12]
 8004024:	059a      	lsls	r2, r3, #22
 8004026:	d402      	bmi.n	800402e <_vfiprintf_r+0x2a>
 8004028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800402a:	f7ff fec6 	bl	8003dba <__retarget_lock_acquire_recursive>
 800402e:	89ab      	ldrh	r3, [r5, #12]
 8004030:	071b      	lsls	r3, r3, #28
 8004032:	d501      	bpl.n	8004038 <_vfiprintf_r+0x34>
 8004034:	692b      	ldr	r3, [r5, #16]
 8004036:	b99b      	cbnz	r3, 8004060 <_vfiprintf_r+0x5c>
 8004038:	4629      	mov	r1, r5
 800403a:	4630      	mov	r0, r6
 800403c:	f7ff fd98 	bl	8003b70 <__swsetup_r>
 8004040:	b170      	cbz	r0, 8004060 <_vfiprintf_r+0x5c>
 8004042:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004044:	07dc      	lsls	r4, r3, #31
 8004046:	d504      	bpl.n	8004052 <_vfiprintf_r+0x4e>
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	b01d      	add	sp, #116	@ 0x74
 800404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004052:	89ab      	ldrh	r3, [r5, #12]
 8004054:	0598      	lsls	r0, r3, #22
 8004056:	d4f7      	bmi.n	8004048 <_vfiprintf_r+0x44>
 8004058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800405a:	f7ff feaf 	bl	8003dbc <__retarget_lock_release_recursive>
 800405e:	e7f3      	b.n	8004048 <_vfiprintf_r+0x44>
 8004060:	2300      	movs	r3, #0
 8004062:	9309      	str	r3, [sp, #36]	@ 0x24
 8004064:	2320      	movs	r3, #32
 8004066:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800406a:	f8cd 800c 	str.w	r8, [sp, #12]
 800406e:	2330      	movs	r3, #48	@ 0x30
 8004070:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004220 <_vfiprintf_r+0x21c>
 8004074:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004078:	f04f 0901 	mov.w	r9, #1
 800407c:	4623      	mov	r3, r4
 800407e:	469a      	mov	sl, r3
 8004080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004084:	b10a      	cbz	r2, 800408a <_vfiprintf_r+0x86>
 8004086:	2a25      	cmp	r2, #37	@ 0x25
 8004088:	d1f9      	bne.n	800407e <_vfiprintf_r+0x7a>
 800408a:	ebba 0b04 	subs.w	fp, sl, r4
 800408e:	d00b      	beq.n	80040a8 <_vfiprintf_r+0xa4>
 8004090:	465b      	mov	r3, fp
 8004092:	4622      	mov	r2, r4
 8004094:	4629      	mov	r1, r5
 8004096:	4630      	mov	r0, r6
 8004098:	f7ff ffa1 	bl	8003fde <__sfputs_r>
 800409c:	3001      	adds	r0, #1
 800409e:	f000 80a7 	beq.w	80041f0 <_vfiprintf_r+0x1ec>
 80040a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040a4:	445a      	add	r2, fp
 80040a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80040a8:	f89a 3000 	ldrb.w	r3, [sl]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 809f 	beq.w	80041f0 <_vfiprintf_r+0x1ec>
 80040b2:	2300      	movs	r3, #0
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040bc:	f10a 0a01 	add.w	sl, sl, #1
 80040c0:	9304      	str	r3, [sp, #16]
 80040c2:	9307      	str	r3, [sp, #28]
 80040c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80040ca:	4654      	mov	r4, sl
 80040cc:	2205      	movs	r2, #5
 80040ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d2:	4853      	ldr	r0, [pc, #332]	@ (8004220 <_vfiprintf_r+0x21c>)
 80040d4:	f7fc f89c 	bl	8000210 <memchr>
 80040d8:	9a04      	ldr	r2, [sp, #16]
 80040da:	b9d8      	cbnz	r0, 8004114 <_vfiprintf_r+0x110>
 80040dc:	06d1      	lsls	r1, r2, #27
 80040de:	bf44      	itt	mi
 80040e0:	2320      	movmi	r3, #32
 80040e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040e6:	0713      	lsls	r3, r2, #28
 80040e8:	bf44      	itt	mi
 80040ea:	232b      	movmi	r3, #43	@ 0x2b
 80040ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040f0:	f89a 3000 	ldrb.w	r3, [sl]
 80040f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80040f6:	d015      	beq.n	8004124 <_vfiprintf_r+0x120>
 80040f8:	9a07      	ldr	r2, [sp, #28]
 80040fa:	4654      	mov	r4, sl
 80040fc:	2000      	movs	r0, #0
 80040fe:	f04f 0c0a 	mov.w	ip, #10
 8004102:	4621      	mov	r1, r4
 8004104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004108:	3b30      	subs	r3, #48	@ 0x30
 800410a:	2b09      	cmp	r3, #9
 800410c:	d94b      	bls.n	80041a6 <_vfiprintf_r+0x1a2>
 800410e:	b1b0      	cbz	r0, 800413e <_vfiprintf_r+0x13a>
 8004110:	9207      	str	r2, [sp, #28]
 8004112:	e014      	b.n	800413e <_vfiprintf_r+0x13a>
 8004114:	eba0 0308 	sub.w	r3, r0, r8
 8004118:	fa09 f303 	lsl.w	r3, r9, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	9304      	str	r3, [sp, #16]
 8004120:	46a2      	mov	sl, r4
 8004122:	e7d2      	b.n	80040ca <_vfiprintf_r+0xc6>
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	1d19      	adds	r1, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	9103      	str	r1, [sp, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	bfbb      	ittet	lt
 8004130:	425b      	neglt	r3, r3
 8004132:	f042 0202 	orrlt.w	r2, r2, #2
 8004136:	9307      	strge	r3, [sp, #28]
 8004138:	9307      	strlt	r3, [sp, #28]
 800413a:	bfb8      	it	lt
 800413c:	9204      	strlt	r2, [sp, #16]
 800413e:	7823      	ldrb	r3, [r4, #0]
 8004140:	2b2e      	cmp	r3, #46	@ 0x2e
 8004142:	d10a      	bne.n	800415a <_vfiprintf_r+0x156>
 8004144:	7863      	ldrb	r3, [r4, #1]
 8004146:	2b2a      	cmp	r3, #42	@ 0x2a
 8004148:	d132      	bne.n	80041b0 <_vfiprintf_r+0x1ac>
 800414a:	9b03      	ldr	r3, [sp, #12]
 800414c:	1d1a      	adds	r2, r3, #4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	9203      	str	r2, [sp, #12]
 8004152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004156:	3402      	adds	r4, #2
 8004158:	9305      	str	r3, [sp, #20]
 800415a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004230 <_vfiprintf_r+0x22c>
 800415e:	7821      	ldrb	r1, [r4, #0]
 8004160:	2203      	movs	r2, #3
 8004162:	4650      	mov	r0, sl
 8004164:	f7fc f854 	bl	8000210 <memchr>
 8004168:	b138      	cbz	r0, 800417a <_vfiprintf_r+0x176>
 800416a:	9b04      	ldr	r3, [sp, #16]
 800416c:	eba0 000a 	sub.w	r0, r0, sl
 8004170:	2240      	movs	r2, #64	@ 0x40
 8004172:	4082      	lsls	r2, r0
 8004174:	4313      	orrs	r3, r2
 8004176:	3401      	adds	r4, #1
 8004178:	9304      	str	r3, [sp, #16]
 800417a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417e:	4829      	ldr	r0, [pc, #164]	@ (8004224 <_vfiprintf_r+0x220>)
 8004180:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004184:	2206      	movs	r2, #6
 8004186:	f7fc f843 	bl	8000210 <memchr>
 800418a:	2800      	cmp	r0, #0
 800418c:	d03f      	beq.n	800420e <_vfiprintf_r+0x20a>
 800418e:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <_vfiprintf_r+0x224>)
 8004190:	bb1b      	cbnz	r3, 80041da <_vfiprintf_r+0x1d6>
 8004192:	9b03      	ldr	r3, [sp, #12]
 8004194:	3307      	adds	r3, #7
 8004196:	f023 0307 	bic.w	r3, r3, #7
 800419a:	3308      	adds	r3, #8
 800419c:	9303      	str	r3, [sp, #12]
 800419e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041a0:	443b      	add	r3, r7
 80041a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80041a4:	e76a      	b.n	800407c <_vfiprintf_r+0x78>
 80041a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80041aa:	460c      	mov	r4, r1
 80041ac:	2001      	movs	r0, #1
 80041ae:	e7a8      	b.n	8004102 <_vfiprintf_r+0xfe>
 80041b0:	2300      	movs	r3, #0
 80041b2:	3401      	adds	r4, #1
 80041b4:	9305      	str	r3, [sp, #20]
 80041b6:	4619      	mov	r1, r3
 80041b8:	f04f 0c0a 	mov.w	ip, #10
 80041bc:	4620      	mov	r0, r4
 80041be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041c2:	3a30      	subs	r2, #48	@ 0x30
 80041c4:	2a09      	cmp	r2, #9
 80041c6:	d903      	bls.n	80041d0 <_vfiprintf_r+0x1cc>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0c6      	beq.n	800415a <_vfiprintf_r+0x156>
 80041cc:	9105      	str	r1, [sp, #20]
 80041ce:	e7c4      	b.n	800415a <_vfiprintf_r+0x156>
 80041d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d4:	4604      	mov	r4, r0
 80041d6:	2301      	movs	r3, #1
 80041d8:	e7f0      	b.n	80041bc <_vfiprintf_r+0x1b8>
 80041da:	ab03      	add	r3, sp, #12
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	462a      	mov	r2, r5
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <_vfiprintf_r+0x228>)
 80041e2:	a904      	add	r1, sp, #16
 80041e4:	4630      	mov	r0, r6
 80041e6:	f3af 8000 	nop.w
 80041ea:	4607      	mov	r7, r0
 80041ec:	1c78      	adds	r0, r7, #1
 80041ee:	d1d6      	bne.n	800419e <_vfiprintf_r+0x19a>
 80041f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041f2:	07d9      	lsls	r1, r3, #31
 80041f4:	d405      	bmi.n	8004202 <_vfiprintf_r+0x1fe>
 80041f6:	89ab      	ldrh	r3, [r5, #12]
 80041f8:	059a      	lsls	r2, r3, #22
 80041fa:	d402      	bmi.n	8004202 <_vfiprintf_r+0x1fe>
 80041fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041fe:	f7ff fddd 	bl	8003dbc <__retarget_lock_release_recursive>
 8004202:	89ab      	ldrh	r3, [r5, #12]
 8004204:	065b      	lsls	r3, r3, #25
 8004206:	f53f af1f 	bmi.w	8004048 <_vfiprintf_r+0x44>
 800420a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800420c:	e71e      	b.n	800404c <_vfiprintf_r+0x48>
 800420e:	ab03      	add	r3, sp, #12
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	462a      	mov	r2, r5
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <_vfiprintf_r+0x228>)
 8004216:	a904      	add	r1, sp, #16
 8004218:	4630      	mov	r0, r6
 800421a:	f000 f879 	bl	8004310 <_printf_i>
 800421e:	e7e4      	b.n	80041ea <_vfiprintf_r+0x1e6>
 8004220:	080048b8 	.word	0x080048b8
 8004224:	080048c2 	.word	0x080048c2
 8004228:	00000000 	.word	0x00000000
 800422c:	08003fdf 	.word	0x08003fdf
 8004230:	080048be 	.word	0x080048be

08004234 <_printf_common>:
 8004234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	4616      	mov	r6, r2
 800423a:	4698      	mov	r8, r3
 800423c:	688a      	ldr	r2, [r1, #8]
 800423e:	690b      	ldr	r3, [r1, #16]
 8004240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004244:	4293      	cmp	r3, r2
 8004246:	bfb8      	it	lt
 8004248:	4613      	movlt	r3, r2
 800424a:	6033      	str	r3, [r6, #0]
 800424c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004250:	4607      	mov	r7, r0
 8004252:	460c      	mov	r4, r1
 8004254:	b10a      	cbz	r2, 800425a <_printf_common+0x26>
 8004256:	3301      	adds	r3, #1
 8004258:	6033      	str	r3, [r6, #0]
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	0699      	lsls	r1, r3, #26
 800425e:	bf42      	ittt	mi
 8004260:	6833      	ldrmi	r3, [r6, #0]
 8004262:	3302      	addmi	r3, #2
 8004264:	6033      	strmi	r3, [r6, #0]
 8004266:	6825      	ldr	r5, [r4, #0]
 8004268:	f015 0506 	ands.w	r5, r5, #6
 800426c:	d106      	bne.n	800427c <_printf_common+0x48>
 800426e:	f104 0a19 	add.w	sl, r4, #25
 8004272:	68e3      	ldr	r3, [r4, #12]
 8004274:	6832      	ldr	r2, [r6, #0]
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	42ab      	cmp	r3, r5
 800427a:	dc26      	bgt.n	80042ca <_printf_common+0x96>
 800427c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	3b00      	subs	r3, #0
 8004284:	bf18      	it	ne
 8004286:	2301      	movne	r3, #1
 8004288:	0692      	lsls	r2, r2, #26
 800428a:	d42b      	bmi.n	80042e4 <_printf_common+0xb0>
 800428c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004290:	4641      	mov	r1, r8
 8004292:	4638      	mov	r0, r7
 8004294:	47c8      	blx	r9
 8004296:	3001      	adds	r0, #1
 8004298:	d01e      	beq.n	80042d8 <_printf_common+0xa4>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	6922      	ldr	r2, [r4, #16]
 800429e:	f003 0306 	and.w	r3, r3, #6
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	bf02      	ittt	eq
 80042a6:	68e5      	ldreq	r5, [r4, #12]
 80042a8:	6833      	ldreq	r3, [r6, #0]
 80042aa:	1aed      	subeq	r5, r5, r3
 80042ac:	68a3      	ldr	r3, [r4, #8]
 80042ae:	bf0c      	ite	eq
 80042b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042b4:	2500      	movne	r5, #0
 80042b6:	4293      	cmp	r3, r2
 80042b8:	bfc4      	itt	gt
 80042ba:	1a9b      	subgt	r3, r3, r2
 80042bc:	18ed      	addgt	r5, r5, r3
 80042be:	2600      	movs	r6, #0
 80042c0:	341a      	adds	r4, #26
 80042c2:	42b5      	cmp	r5, r6
 80042c4:	d11a      	bne.n	80042fc <_printf_common+0xc8>
 80042c6:	2000      	movs	r0, #0
 80042c8:	e008      	b.n	80042dc <_printf_common+0xa8>
 80042ca:	2301      	movs	r3, #1
 80042cc:	4652      	mov	r2, sl
 80042ce:	4641      	mov	r1, r8
 80042d0:	4638      	mov	r0, r7
 80042d2:	47c8      	blx	r9
 80042d4:	3001      	adds	r0, #1
 80042d6:	d103      	bne.n	80042e0 <_printf_common+0xac>
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e0:	3501      	adds	r5, #1
 80042e2:	e7c6      	b.n	8004272 <_printf_common+0x3e>
 80042e4:	18e1      	adds	r1, r4, r3
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	2030      	movs	r0, #48	@ 0x30
 80042ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ee:	4422      	add	r2, r4
 80042f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042f8:	3302      	adds	r3, #2
 80042fa:	e7c7      	b.n	800428c <_printf_common+0x58>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4622      	mov	r2, r4
 8004300:	4641      	mov	r1, r8
 8004302:	4638      	mov	r0, r7
 8004304:	47c8      	blx	r9
 8004306:	3001      	adds	r0, #1
 8004308:	d0e6      	beq.n	80042d8 <_printf_common+0xa4>
 800430a:	3601      	adds	r6, #1
 800430c:	e7d9      	b.n	80042c2 <_printf_common+0x8e>
	...

08004310 <_printf_i>:
 8004310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004314:	7e0f      	ldrb	r7, [r1, #24]
 8004316:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004318:	2f78      	cmp	r7, #120	@ 0x78
 800431a:	4691      	mov	r9, r2
 800431c:	4680      	mov	r8, r0
 800431e:	460c      	mov	r4, r1
 8004320:	469a      	mov	sl, r3
 8004322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004326:	d807      	bhi.n	8004338 <_printf_i+0x28>
 8004328:	2f62      	cmp	r7, #98	@ 0x62
 800432a:	d80a      	bhi.n	8004342 <_printf_i+0x32>
 800432c:	2f00      	cmp	r7, #0
 800432e:	f000 80d2 	beq.w	80044d6 <_printf_i+0x1c6>
 8004332:	2f58      	cmp	r7, #88	@ 0x58
 8004334:	f000 80b9 	beq.w	80044aa <_printf_i+0x19a>
 8004338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800433c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004340:	e03a      	b.n	80043b8 <_printf_i+0xa8>
 8004342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004346:	2b15      	cmp	r3, #21
 8004348:	d8f6      	bhi.n	8004338 <_printf_i+0x28>
 800434a:	a101      	add	r1, pc, #4	@ (adr r1, 8004350 <_printf_i+0x40>)
 800434c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043bd 	.word	0x080043bd
 8004358:	08004339 	.word	0x08004339
 800435c:	08004339 	.word	0x08004339
 8004360:	08004339 	.word	0x08004339
 8004364:	08004339 	.word	0x08004339
 8004368:	080043bd 	.word	0x080043bd
 800436c:	08004339 	.word	0x08004339
 8004370:	08004339 	.word	0x08004339
 8004374:	08004339 	.word	0x08004339
 8004378:	08004339 	.word	0x08004339
 800437c:	080044bd 	.word	0x080044bd
 8004380:	080043e7 	.word	0x080043e7
 8004384:	08004477 	.word	0x08004477
 8004388:	08004339 	.word	0x08004339
 800438c:	08004339 	.word	0x08004339
 8004390:	080044df 	.word	0x080044df
 8004394:	08004339 	.word	0x08004339
 8004398:	080043e7 	.word	0x080043e7
 800439c:	08004339 	.word	0x08004339
 80043a0:	08004339 	.word	0x08004339
 80043a4:	0800447f 	.word	0x0800447f
 80043a8:	6833      	ldr	r3, [r6, #0]
 80043aa:	1d1a      	adds	r2, r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6032      	str	r2, [r6, #0]
 80043b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043b8:	2301      	movs	r3, #1
 80043ba:	e09d      	b.n	80044f8 <_printf_i+0x1e8>
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	1d19      	adds	r1, r3, #4
 80043c2:	6031      	str	r1, [r6, #0]
 80043c4:	0606      	lsls	r6, r0, #24
 80043c6:	d501      	bpl.n	80043cc <_printf_i+0xbc>
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	e003      	b.n	80043d4 <_printf_i+0xc4>
 80043cc:	0645      	lsls	r5, r0, #25
 80043ce:	d5fb      	bpl.n	80043c8 <_printf_i+0xb8>
 80043d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	da03      	bge.n	80043e0 <_printf_i+0xd0>
 80043d8:	232d      	movs	r3, #45	@ 0x2d
 80043da:	426d      	negs	r5, r5
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043e0:	4859      	ldr	r0, [pc, #356]	@ (8004548 <_printf_i+0x238>)
 80043e2:	230a      	movs	r3, #10
 80043e4:	e011      	b.n	800440a <_printf_i+0xfa>
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	6833      	ldr	r3, [r6, #0]
 80043ea:	0608      	lsls	r0, r1, #24
 80043ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80043f0:	d402      	bmi.n	80043f8 <_printf_i+0xe8>
 80043f2:	0649      	lsls	r1, r1, #25
 80043f4:	bf48      	it	mi
 80043f6:	b2ad      	uxthmi	r5, r5
 80043f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80043fa:	4853      	ldr	r0, [pc, #332]	@ (8004548 <_printf_i+0x238>)
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	bf14      	ite	ne
 8004400:	230a      	movne	r3, #10
 8004402:	2308      	moveq	r3, #8
 8004404:	2100      	movs	r1, #0
 8004406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800440a:	6866      	ldr	r6, [r4, #4]
 800440c:	60a6      	str	r6, [r4, #8]
 800440e:	2e00      	cmp	r6, #0
 8004410:	bfa2      	ittt	ge
 8004412:	6821      	ldrge	r1, [r4, #0]
 8004414:	f021 0104 	bicge.w	r1, r1, #4
 8004418:	6021      	strge	r1, [r4, #0]
 800441a:	b90d      	cbnz	r5, 8004420 <_printf_i+0x110>
 800441c:	2e00      	cmp	r6, #0
 800441e:	d04b      	beq.n	80044b8 <_printf_i+0x1a8>
 8004420:	4616      	mov	r6, r2
 8004422:	fbb5 f1f3 	udiv	r1, r5, r3
 8004426:	fb03 5711 	mls	r7, r3, r1, r5
 800442a:	5dc7      	ldrb	r7, [r0, r7]
 800442c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004430:	462f      	mov	r7, r5
 8004432:	42bb      	cmp	r3, r7
 8004434:	460d      	mov	r5, r1
 8004436:	d9f4      	bls.n	8004422 <_printf_i+0x112>
 8004438:	2b08      	cmp	r3, #8
 800443a:	d10b      	bne.n	8004454 <_printf_i+0x144>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	07df      	lsls	r7, r3, #31
 8004440:	d508      	bpl.n	8004454 <_printf_i+0x144>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	6861      	ldr	r1, [r4, #4]
 8004446:	4299      	cmp	r1, r3
 8004448:	bfde      	ittt	le
 800444a:	2330      	movle	r3, #48	@ 0x30
 800444c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004450:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004454:	1b92      	subs	r2, r2, r6
 8004456:	6122      	str	r2, [r4, #16]
 8004458:	f8cd a000 	str.w	sl, [sp]
 800445c:	464b      	mov	r3, r9
 800445e:	aa03      	add	r2, sp, #12
 8004460:	4621      	mov	r1, r4
 8004462:	4640      	mov	r0, r8
 8004464:	f7ff fee6 	bl	8004234 <_printf_common>
 8004468:	3001      	adds	r0, #1
 800446a:	d14a      	bne.n	8004502 <_printf_i+0x1f2>
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	b004      	add	sp, #16
 8004472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	f043 0320 	orr.w	r3, r3, #32
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	4833      	ldr	r0, [pc, #204]	@ (800454c <_printf_i+0x23c>)
 8004480:	2778      	movs	r7, #120	@ 0x78
 8004482:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	6831      	ldr	r1, [r6, #0]
 800448a:	061f      	lsls	r7, r3, #24
 800448c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004490:	d402      	bmi.n	8004498 <_printf_i+0x188>
 8004492:	065f      	lsls	r7, r3, #25
 8004494:	bf48      	it	mi
 8004496:	b2ad      	uxthmi	r5, r5
 8004498:	6031      	str	r1, [r6, #0]
 800449a:	07d9      	lsls	r1, r3, #31
 800449c:	bf44      	itt	mi
 800449e:	f043 0320 	orrmi.w	r3, r3, #32
 80044a2:	6023      	strmi	r3, [r4, #0]
 80044a4:	b11d      	cbz	r5, 80044ae <_printf_i+0x19e>
 80044a6:	2310      	movs	r3, #16
 80044a8:	e7ac      	b.n	8004404 <_printf_i+0xf4>
 80044aa:	4827      	ldr	r0, [pc, #156]	@ (8004548 <_printf_i+0x238>)
 80044ac:	e7e9      	b.n	8004482 <_printf_i+0x172>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f023 0320 	bic.w	r3, r3, #32
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	e7f6      	b.n	80044a6 <_printf_i+0x196>
 80044b8:	4616      	mov	r6, r2
 80044ba:	e7bd      	b.n	8004438 <_printf_i+0x128>
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	6825      	ldr	r5, [r4, #0]
 80044c0:	6961      	ldr	r1, [r4, #20]
 80044c2:	1d18      	adds	r0, r3, #4
 80044c4:	6030      	str	r0, [r6, #0]
 80044c6:	062e      	lsls	r6, r5, #24
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	d501      	bpl.n	80044d0 <_printf_i+0x1c0>
 80044cc:	6019      	str	r1, [r3, #0]
 80044ce:	e002      	b.n	80044d6 <_printf_i+0x1c6>
 80044d0:	0668      	lsls	r0, r5, #25
 80044d2:	d5fb      	bpl.n	80044cc <_printf_i+0x1bc>
 80044d4:	8019      	strh	r1, [r3, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	4616      	mov	r6, r2
 80044dc:	e7bc      	b.n	8004458 <_printf_i+0x148>
 80044de:	6833      	ldr	r3, [r6, #0]
 80044e0:	1d1a      	adds	r2, r3, #4
 80044e2:	6032      	str	r2, [r6, #0]
 80044e4:	681e      	ldr	r6, [r3, #0]
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	2100      	movs	r1, #0
 80044ea:	4630      	mov	r0, r6
 80044ec:	f7fb fe90 	bl	8000210 <memchr>
 80044f0:	b108      	cbz	r0, 80044f6 <_printf_i+0x1e6>
 80044f2:	1b80      	subs	r0, r0, r6
 80044f4:	6060      	str	r0, [r4, #4]
 80044f6:	6863      	ldr	r3, [r4, #4]
 80044f8:	6123      	str	r3, [r4, #16]
 80044fa:	2300      	movs	r3, #0
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004500:	e7aa      	b.n	8004458 <_printf_i+0x148>
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	4632      	mov	r2, r6
 8004506:	4649      	mov	r1, r9
 8004508:	4640      	mov	r0, r8
 800450a:	47d0      	blx	sl
 800450c:	3001      	adds	r0, #1
 800450e:	d0ad      	beq.n	800446c <_printf_i+0x15c>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	079b      	lsls	r3, r3, #30
 8004514:	d413      	bmi.n	800453e <_printf_i+0x22e>
 8004516:	68e0      	ldr	r0, [r4, #12]
 8004518:	9b03      	ldr	r3, [sp, #12]
 800451a:	4298      	cmp	r0, r3
 800451c:	bfb8      	it	lt
 800451e:	4618      	movlt	r0, r3
 8004520:	e7a6      	b.n	8004470 <_printf_i+0x160>
 8004522:	2301      	movs	r3, #1
 8004524:	4632      	mov	r2, r6
 8004526:	4649      	mov	r1, r9
 8004528:	4640      	mov	r0, r8
 800452a:	47d0      	blx	sl
 800452c:	3001      	adds	r0, #1
 800452e:	d09d      	beq.n	800446c <_printf_i+0x15c>
 8004530:	3501      	adds	r5, #1
 8004532:	68e3      	ldr	r3, [r4, #12]
 8004534:	9903      	ldr	r1, [sp, #12]
 8004536:	1a5b      	subs	r3, r3, r1
 8004538:	42ab      	cmp	r3, r5
 800453a:	dcf2      	bgt.n	8004522 <_printf_i+0x212>
 800453c:	e7eb      	b.n	8004516 <_printf_i+0x206>
 800453e:	2500      	movs	r5, #0
 8004540:	f104 0619 	add.w	r6, r4, #25
 8004544:	e7f5      	b.n	8004532 <_printf_i+0x222>
 8004546:	bf00      	nop
 8004548:	080048c9 	.word	0x080048c9
 800454c:	080048da 	.word	0x080048da

08004550 <__sflush_r>:
 8004550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004558:	0716      	lsls	r6, r2, #28
 800455a:	4605      	mov	r5, r0
 800455c:	460c      	mov	r4, r1
 800455e:	d454      	bmi.n	800460a <__sflush_r+0xba>
 8004560:	684b      	ldr	r3, [r1, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	dc02      	bgt.n	800456c <__sflush_r+0x1c>
 8004566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	dd48      	ble.n	80045fe <__sflush_r+0xae>
 800456c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800456e:	2e00      	cmp	r6, #0
 8004570:	d045      	beq.n	80045fe <__sflush_r+0xae>
 8004572:	2300      	movs	r3, #0
 8004574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004578:	682f      	ldr	r7, [r5, #0]
 800457a:	6a21      	ldr	r1, [r4, #32]
 800457c:	602b      	str	r3, [r5, #0]
 800457e:	d030      	beq.n	80045e2 <__sflush_r+0x92>
 8004580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	0759      	lsls	r1, r3, #29
 8004586:	d505      	bpl.n	8004594 <__sflush_r+0x44>
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	1ad2      	subs	r2, r2, r3
 800458c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800458e:	b10b      	cbz	r3, 8004594 <__sflush_r+0x44>
 8004590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	2300      	movs	r3, #0
 8004596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004598:	6a21      	ldr	r1, [r4, #32]
 800459a:	4628      	mov	r0, r5
 800459c:	47b0      	blx	r6
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	d106      	bne.n	80045b2 <__sflush_r+0x62>
 80045a4:	6829      	ldr	r1, [r5, #0]
 80045a6:	291d      	cmp	r1, #29
 80045a8:	d82b      	bhi.n	8004602 <__sflush_r+0xb2>
 80045aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004654 <__sflush_r+0x104>)
 80045ac:	410a      	asrs	r2, r1
 80045ae:	07d6      	lsls	r6, r2, #31
 80045b0:	d427      	bmi.n	8004602 <__sflush_r+0xb2>
 80045b2:	2200      	movs	r2, #0
 80045b4:	6062      	str	r2, [r4, #4]
 80045b6:	04d9      	lsls	r1, r3, #19
 80045b8:	6922      	ldr	r2, [r4, #16]
 80045ba:	6022      	str	r2, [r4, #0]
 80045bc:	d504      	bpl.n	80045c8 <__sflush_r+0x78>
 80045be:	1c42      	adds	r2, r0, #1
 80045c0:	d101      	bne.n	80045c6 <__sflush_r+0x76>
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	b903      	cbnz	r3, 80045c8 <__sflush_r+0x78>
 80045c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80045c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045ca:	602f      	str	r7, [r5, #0]
 80045cc:	b1b9      	cbz	r1, 80045fe <__sflush_r+0xae>
 80045ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045d2:	4299      	cmp	r1, r3
 80045d4:	d002      	beq.n	80045dc <__sflush_r+0x8c>
 80045d6:	4628      	mov	r0, r5
 80045d8:	f7ff fbf2 	bl	8003dc0 <_free_r>
 80045dc:	2300      	movs	r3, #0
 80045de:	6363      	str	r3, [r4, #52]	@ 0x34
 80045e0:	e00d      	b.n	80045fe <__sflush_r+0xae>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b0      	blx	r6
 80045e8:	4602      	mov	r2, r0
 80045ea:	1c50      	adds	r0, r2, #1
 80045ec:	d1c9      	bne.n	8004582 <__sflush_r+0x32>
 80045ee:	682b      	ldr	r3, [r5, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0c6      	beq.n	8004582 <__sflush_r+0x32>
 80045f4:	2b1d      	cmp	r3, #29
 80045f6:	d001      	beq.n	80045fc <__sflush_r+0xac>
 80045f8:	2b16      	cmp	r3, #22
 80045fa:	d11e      	bne.n	800463a <__sflush_r+0xea>
 80045fc:	602f      	str	r7, [r5, #0]
 80045fe:	2000      	movs	r0, #0
 8004600:	e022      	b.n	8004648 <__sflush_r+0xf8>
 8004602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004606:	b21b      	sxth	r3, r3
 8004608:	e01b      	b.n	8004642 <__sflush_r+0xf2>
 800460a:	690f      	ldr	r7, [r1, #16]
 800460c:	2f00      	cmp	r7, #0
 800460e:	d0f6      	beq.n	80045fe <__sflush_r+0xae>
 8004610:	0793      	lsls	r3, r2, #30
 8004612:	680e      	ldr	r6, [r1, #0]
 8004614:	bf08      	it	eq
 8004616:	694b      	ldreq	r3, [r1, #20]
 8004618:	600f      	str	r7, [r1, #0]
 800461a:	bf18      	it	ne
 800461c:	2300      	movne	r3, #0
 800461e:	eba6 0807 	sub.w	r8, r6, r7
 8004622:	608b      	str	r3, [r1, #8]
 8004624:	f1b8 0f00 	cmp.w	r8, #0
 8004628:	dde9      	ble.n	80045fe <__sflush_r+0xae>
 800462a:	6a21      	ldr	r1, [r4, #32]
 800462c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800462e:	4643      	mov	r3, r8
 8004630:	463a      	mov	r2, r7
 8004632:	4628      	mov	r0, r5
 8004634:	47b0      	blx	r6
 8004636:	2800      	cmp	r0, #0
 8004638:	dc08      	bgt.n	800464c <__sflush_r+0xfc>
 800463a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800463e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800464c:	4407      	add	r7, r0
 800464e:	eba8 0800 	sub.w	r8, r8, r0
 8004652:	e7e7      	b.n	8004624 <__sflush_r+0xd4>
 8004654:	dfbffffe 	.word	0xdfbffffe

08004658 <_fflush_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	690b      	ldr	r3, [r1, #16]
 800465c:	4605      	mov	r5, r0
 800465e:	460c      	mov	r4, r1
 8004660:	b913      	cbnz	r3, 8004668 <_fflush_r+0x10>
 8004662:	2500      	movs	r5, #0
 8004664:	4628      	mov	r0, r5
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	b118      	cbz	r0, 8004672 <_fflush_r+0x1a>
 800466a:	6a03      	ldr	r3, [r0, #32]
 800466c:	b90b      	cbnz	r3, 8004672 <_fflush_r+0x1a>
 800466e:	f7ff f957 	bl	8003920 <__sinit>
 8004672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f3      	beq.n	8004662 <_fflush_r+0xa>
 800467a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800467c:	07d0      	lsls	r0, r2, #31
 800467e:	d404      	bmi.n	800468a <_fflush_r+0x32>
 8004680:	0599      	lsls	r1, r3, #22
 8004682:	d402      	bmi.n	800468a <_fflush_r+0x32>
 8004684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004686:	f7ff fb98 	bl	8003dba <__retarget_lock_acquire_recursive>
 800468a:	4628      	mov	r0, r5
 800468c:	4621      	mov	r1, r4
 800468e:	f7ff ff5f 	bl	8004550 <__sflush_r>
 8004692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004694:	07da      	lsls	r2, r3, #31
 8004696:	4605      	mov	r5, r0
 8004698:	d4e4      	bmi.n	8004664 <_fflush_r+0xc>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	059b      	lsls	r3, r3, #22
 800469e:	d4e1      	bmi.n	8004664 <_fflush_r+0xc>
 80046a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046a2:	f7ff fb8b 	bl	8003dbc <__retarget_lock_release_recursive>
 80046a6:	e7dd      	b.n	8004664 <_fflush_r+0xc>

080046a8 <__swhatbuf_r>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	460c      	mov	r4, r1
 80046ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b0:	2900      	cmp	r1, #0
 80046b2:	b096      	sub	sp, #88	@ 0x58
 80046b4:	4615      	mov	r5, r2
 80046b6:	461e      	mov	r6, r3
 80046b8:	da0d      	bge.n	80046d6 <__swhatbuf_r+0x2e>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	bf14      	ite	ne
 80046c6:	2340      	movne	r3, #64	@ 0x40
 80046c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80046cc:	2000      	movs	r0, #0
 80046ce:	6031      	str	r1, [r6, #0]
 80046d0:	602b      	str	r3, [r5, #0]
 80046d2:	b016      	add	sp, #88	@ 0x58
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
 80046d6:	466a      	mov	r2, sp
 80046d8:	f000 f848 	bl	800476c <_fstat_r>
 80046dc:	2800      	cmp	r0, #0
 80046de:	dbec      	blt.n	80046ba <__swhatbuf_r+0x12>
 80046e0:	9901      	ldr	r1, [sp, #4]
 80046e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80046e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80046ea:	4259      	negs	r1, r3
 80046ec:	4159      	adcs	r1, r3
 80046ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046f2:	e7eb      	b.n	80046cc <__swhatbuf_r+0x24>

080046f4 <__smakebuf_r>:
 80046f4:	898b      	ldrh	r3, [r1, #12]
 80046f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046f8:	079d      	lsls	r5, r3, #30
 80046fa:	4606      	mov	r6, r0
 80046fc:	460c      	mov	r4, r1
 80046fe:	d507      	bpl.n	8004710 <__smakebuf_r+0x1c>
 8004700:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	6123      	str	r3, [r4, #16]
 8004708:	2301      	movs	r3, #1
 800470a:	6163      	str	r3, [r4, #20]
 800470c:	b003      	add	sp, #12
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004710:	ab01      	add	r3, sp, #4
 8004712:	466a      	mov	r2, sp
 8004714:	f7ff ffc8 	bl	80046a8 <__swhatbuf_r>
 8004718:	9f00      	ldr	r7, [sp, #0]
 800471a:	4605      	mov	r5, r0
 800471c:	4639      	mov	r1, r7
 800471e:	4630      	mov	r0, r6
 8004720:	f7ff fbba 	bl	8003e98 <_malloc_r>
 8004724:	b948      	cbnz	r0, 800473a <__smakebuf_r+0x46>
 8004726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800472a:	059a      	lsls	r2, r3, #22
 800472c:	d4ee      	bmi.n	800470c <__smakebuf_r+0x18>
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	e7e2      	b.n	8004700 <__smakebuf_r+0xc>
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	6020      	str	r0, [r4, #0]
 800473e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	9b01      	ldr	r3, [sp, #4]
 8004746:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800474a:	b15b      	cbz	r3, 8004764 <__smakebuf_r+0x70>
 800474c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004750:	4630      	mov	r0, r6
 8004752:	f000 f81d 	bl	8004790 <_isatty_r>
 8004756:	b128      	cbz	r0, 8004764 <__smakebuf_r+0x70>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	431d      	orrs	r5, r3
 8004768:	81a5      	strh	r5, [r4, #12]
 800476a:	e7cf      	b.n	800470c <__smakebuf_r+0x18>

0800476c <_fstat_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4d07      	ldr	r5, [pc, #28]	@ (800478c <_fstat_r+0x20>)
 8004770:	2300      	movs	r3, #0
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	4611      	mov	r1, r2
 8004778:	602b      	str	r3, [r5, #0]
 800477a:	f7fc f998 	bl	8000aae <_fstat>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	d102      	bne.n	8004788 <_fstat_r+0x1c>
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	b103      	cbz	r3, 8004788 <_fstat_r+0x1c>
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	bd38      	pop	{r3, r4, r5, pc}
 800478a:	bf00      	nop
 800478c:	20004214 	.word	0x20004214

08004790 <_isatty_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4d06      	ldr	r5, [pc, #24]	@ (80047ac <_isatty_r+0x1c>)
 8004794:	2300      	movs	r3, #0
 8004796:	4604      	mov	r4, r0
 8004798:	4608      	mov	r0, r1
 800479a:	602b      	str	r3, [r5, #0]
 800479c:	f7fc f997 	bl	8000ace <_isatty>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_isatty_r+0x1a>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_isatty_r+0x1a>
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	20004214 	.word	0x20004214

080047b0 <_sbrk_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4d06      	ldr	r5, [pc, #24]	@ (80047cc <_sbrk_r+0x1c>)
 80047b4:	2300      	movs	r3, #0
 80047b6:	4604      	mov	r4, r0
 80047b8:	4608      	mov	r0, r1
 80047ba:	602b      	str	r3, [r5, #0]
 80047bc:	f7fc f9a0 	bl	8000b00 <_sbrk>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d102      	bne.n	80047ca <_sbrk_r+0x1a>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	b103      	cbz	r3, 80047ca <_sbrk_r+0x1a>
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	20004214 	.word	0x20004214

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
